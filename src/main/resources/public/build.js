!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=107)}([function(e,t,n){"use strict";e.exports=n(104)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(25)),o=i(n(6));function i(e){return e&&e.__esModule?e:{default:e}}var a={getArtistSearch:function(e){var t=r.default.ARTIST_SEARCH_URL+"?query="+e;return fetch(t).then(function(e){if(200!==e.status)throw"Artist search did not complete successfully";return e.json()})},getArtistInfo:function(e){var t=r.default.ARTIST_INFO_URL+"?query="+e;return fetch(t).then(function(e){if(200!==e.status)throw"Artist info request did not complete successfully";return e.json()})},getSimilarArtists:function(e){var t=r.default.SIMILAR_ARTISTS_URL+"?query="+e;return fetch(t).then(function(e){if(200!==e.status)throw"Similar artists request did not complete successfully";return e.json()})},getArtistAlbums:function(e){var t=r.default.ARTIST_ALBUMS_URL+"?query="+e;return fetch(t).then(function(e){if(200!==e.status)throw"Similar artists request did not complete successfully";return e.json()})},createArtistCollection:function(e){return o.default.getCurrentUser().then(function(t){return new Promise(function(n,i){var u=r.default.CREATE_ARTIST_COLLECTION_URL+"?query="+e;fetch(u,{method:"GET",headers:{Authorization:"Bearer "+t.jwt}}).then(function(t){if(200===t.status){var r=JSON.parse(t.headers.get("Authorization"));return o.default.saveAuthorization({username:r.username,jwt:r.token}),n(t)}if(401!==t.status)return i(t);o.default.getGuestToken().then(function(t){return a.createArtistCollection(e)})})})})},getArtistCollections:function(){return o.default.getCurrentUser().then(function(e){return new Promise(function(t,n){fetch(r.default.GET_ARTIST_COLLECTIONS_URL,{method:"GET",headers:{Authorization:"Bearer "+e.jwt}}).then(function(e){if(200===e.status){var r=JSON.parse(e.headers.get("Authorization"));return o.default.saveAuthorization({username:r.username,jwt:r.token}),t(e)}if(401!==e.status)return n(e);o.default.getGuestToken().then(function(e){return a.getArtistCollections()})}).catch(function(){return n()})})})},getArtistCollection:function(e,t){return o.default.getCurrentUser().then(function(n){return new Promise(function(o,i){fetch(r.default.GET_ARTIST_COLLECTION_URL+"?username="+e+"&collectionName="+t,{method:"GET",headers:{Authorization:"Bearer "+n.jwt}}).then(function(e){if(200!==e.status)return i(e);e.json().then(function(e){return o(e)})}).catch(function(){return i()})})})},addArtistToCollection:function(e,t){return o.default.getCurrentUser().then(function(n){return new Promise(function(i,u){var l=r.default.ADD_ARTIST_TO_COLLECTION_URL+"?collectionName="+t;fetch(l,{method:"POST",headers:{Authorization:"Bearer "+n.jwt},body:JSON.stringify(e)}).then(function(t){if(200===t.status){var n=JSON.parse(t.headers.get("Authorization"));return o.default.saveAuthorization({username:n.username,jwt:n.token}),i(t)}if(401!==t.status)return u(t);o.default.getGuestToken().then(function(t){return a.addArtistToCollection(e,collection)})}).catch(function(){return u()})})})},getUserSearch:function(e){return new Promise(function(t,n){fetch(r.default.USER_SEARCH_URL+"?query="+e).then(function(e){if(200!==e.status)return n(e);e.json().then(function(e){return t(e)})}).catch(function(){return n()})})},addUserToFriends:function(e){return o.default.getCurrentUser().then(function(t){return new Promise(function(n,o){fetch(r.default.ADD_USER_TO_FRIENDS_URL,{method:"POST",headers:{Authorization:"Bearer "+t.jwt},body:e}).then(function(e){if(200!==e.status)return o(e);e.json().then(function(e){return n(e)})}).catch(function(){return o()})})})},getFriends:function(){return o.default.getCurrentUser().then(function(e){return new Promise(function(t,n){fetch(r.default.GET_FRIENDS_URL,{method:"GET",headers:{Authorization:"Bearer "+e.jwt}}).then(function(e){if(200!==e.status)return n(e);e.json().then(function(e){return t(e)})}).catch(function(){return n()})})})},getRecommendations:function(){return o.default.getCurrentUser().then(function(e){return new Promise(function(t,n){fetch(r.default.GET_RECOMMENDATIONS_URL,{method:"GET",headers:{Authorization:"Bearer "+e.jwt}}).then(function(e){if(200!==e.status)return n(e);e.json().then(function(e){return t(e)})}).catch(function(){return n()})})})},recommendArtist:function(e,t){return o.default.getCurrentUser().then(function(n){return new Promise(function(o,i){fetch(r.default.RECOMMEND_ARTIST_URL,{method:"POST",headers:{Authorization:"Bearer "+n.jwt},body:JSON.stringify({recommendToUser:t.username,artist:e})}).then(function(e){if(200!==e.status)return i(e);e.json().then(function(e){return o(e)})}).catch(function(){return i()})})})},getFriendsArtistWasRecommendedTo:function(e){return o.default.getCurrentUser().then(function(t){return new Promise(function(n,o){fetch(r.default.GET_FRIENDS_ARTIST_WAS_RECOMMENDED_TO_URL+"?artistMbid="+e.mbid,{method:"GET",headers:{Authorization:"Bearer "+t.jwt}}).then(function(e){if(200!==e.status)return o(e);e.json().then(function(e){return n(e)})}).catch(function(){return o()})})})},getLikedArtists:function(){return o.default.getCurrentUser().then(function(e){return new Promise(function(t,n){fetch(r.default.GET_LIKED_ARTISTS_URL,{method:"GET",headers:{Authorization:"Bearer "+e.jwt}}).then(function(e){if(200!==e.status)return n(e);e.json().then(function(e){return t(e)})}).catch(function(){return n()})})})},getLikedArtistMbidList:function(){return o.default.getCurrentUser().then(function(e){return new Promise(function(t,n){fetch(r.default.GET_LIKED_ARTIST_MBID_LIST_URL,{method:"GET",headers:{Authorization:"Bearer "+e.jwt}}).then(function(e){if(200!==e.status)return n(e);e.json().then(function(e){return t(e)})}).catch(function(){return n()})})})},addLikedArtist:function(e){return o.default.getCurrentUser().then(function(t){return new Promise(function(n,o){fetch(r.default.ADD_LIKED_ARTIST_URL,{method:"POST",headers:{Authorization:"Bearer "+t.jwt},body:JSON.stringify(e)}).then(function(e){if(200!==e.status)return o(e);e.json().then(function(e){return n(e)})}).catch(function(){return o()})})})},removeLikedArtist:function(e){return o.default.getCurrentUser().then(function(t){return new Promise(function(n,o){fetch(r.default.REMOVE_LIKED_ARTIST_URL,{method:"POST",headers:{Authorization:"Bearer "+t.jwt},body:JSON.stringify(e)}).then(function(e){if(200!==e.status)return o(e);e.json().then(function(e){return n(e)})}).catch(function(){return o()})})})},deleteArtistCollection:function(e){return o.default.getCurrentUser().then(function(t){return new Promise(function(n,o){fetch(r.default.DELETE_ARTIST_COLLECTION_URL,{method:"POST",headers:{Authorization:"Bearer "+t.jwt},body:e}).then(function(e){if(200!==e.status)return o(e);e.json().then(function(e){return n(e)})}).catch(function(){return o()})})})}};t.default=a},function(e,t,n){"use strict";"function"==typeof Symbol&&Symbol.iterator;e.exports=n(94)()},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,u],c=0;(l=new Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.withRouter=t.matchPath=t.generatePath=t.Switch=t.StaticRouter=t.Router=t.Route=t.Redirect=t.Prompt=t.NavLink=t.MemoryRouter=t.Link=t.HashRouter=t.BrowserRouter=void 0;var r=v(n(95)),o=v(n(87)),i=v(n(34)),a=v(n(86)),u=v(n(85)),l=v(n(83)),s=v(n(82)),c=v(n(32)),f=v(n(16)),d=v(n(81)),p=v(n(80)),h=v(n(79)),m=v(n(78)),y=v(n(77));function v(e){return e&&e.__esModule?e:{default:e}}t.BrowserRouter=r.default,t.HashRouter=o.default,t.Link=i.default,t.MemoryRouter=a.default,t.NavLink=u.default,t.Prompt=l.default,t.Redirect=s.default,t.Route=c.default,t.Router=f.default,t.StaticRouter=d.default,t.Switch=p.default,t.generatePath=h.default,t.matchPath=m.default,t.withRouter=y.default},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(25),i=(r=o)&&r.__esModule?r:{default:r};var a={login:function(e,t){return new Promise(function(n,r){var o=i.default.LOGIN_API_URL+"?username="+e+"&password="+t;fetch(o,{method:"POST"}).then(function(e){if(200===e.status)return e.json();r(e)}).then(function(e){localStorage.setItem("username",e.username),localStorage.setItem("jwt",e.token),n()})})},register:function(e,t,n){return new Promise(function(r,o){var a=i.default.REGISTRATION_API_URL+"?username="+e+"&email="+t+"&password="+n;fetch(a,{method:"POST"}).then(function(e){if(200===e.status)return e.json();o(e)}).then(function(e){localStorage.setItem("username",e.username),localStorage.setItem("jwt",e.token),r()})})},saveAuthorization:function(e){null!==e.username&&null!==e.jwt&&("guest"===e.username?(localStorage.removeItem("username"),localStorage.removeItem("jwt"),sessionStorage.setItem("username","guest"),sessionStorage.setItem("jwt",e.jwt)):(sessionStorage.removeItem("username"),sessionStorage.removeItem("jwt"),localStorage.setItem("username",e.username),localStorage.setItem("jwt",e.jwt)))},logout:function(){localStorage.removeItem("username"),localStorage.removeItem("jwt")},clearGuestSession:function(){sessionStorage.removeItem("username"),sessionStorage.removeItem("jwt")},renewToken:function(e){return new Promise(function(t,n){fetch(i.default.RENEW_TOKEN_URL,{method:"GET",headers:{Authorization:"Bearer "+e}}).then(function(e){return 200!==e.status?n(e):e.json().then(function(e){return t({username:e.username,jwt:e.token})})}).catch(function(e){n(e)})})},getGuestToken:function(){return new Promise(function(e,t){fetch(i.default.GET_GUEST_TOKEN_URL).then(function(e){return 200!==e.status?t(repsonse):e.json()}).then(function(t){return e({username:"guest",jwt:t.token})}).catch(function(e){return t(e)})})},getCurrentUser:function(){return new Promise(function(e,t){return null!==localStorage.getItem("jwt")?e({username:localStorage.getItem("username"),jwt:localStorage.getItem("jwt")}):null!==sessionStorage.getItem("jwt")?e({username:sessionStorage.getItem("username"),jwt:sessionStorage.getItem("jwt")}):void a.getGuestToken().then(function(t){return a.saveAuthorization(t),e(t)}).catch(function(e){return t({username:null,jwt:null})})})},getCurrentUserAndRenew:function(){return new Promise(function(e,t){null!==localStorage.getItem("jwt")?a.renewToken(localStorage.getItem("jwt")).then(function(t){return a.saveAuthorization(t),e(t)}).catch(function(e){return a.logout(),a.getCurrentUserAndRenew()}):null!==sessionStorage.getItem("jwt")?a.renewToken(sessionStorage.getItem("jwt")).then(function(t){return a.saveAuthorization(t),e(t)}).catch(function(e){return a.clearGuestSession(),a.getCurrentUserAndRenew()}):a.getGuestToken().then(function(t){return a.saveAuthorization(t),e(t)}).catch(function(e){return t({username:null,jwt:null})})})}};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createPath=t.parsePath=t.locationsAreEqual=t.createLocation=t.createMemoryHistory=t.createHashHistory=t.createBrowserHistory=void 0;var r=n(12);Object.defineProperty(t,"createLocation",{enumerable:!0,get:function(){return r.createLocation}}),Object.defineProperty(t,"locationsAreEqual",{enumerable:!0,get:function(){return r.locationsAreEqual}});var o=n(8);Object.defineProperty(t,"parsePath",{enumerable:!0,get:function(){return o.parsePath}}),Object.defineProperty(t,"createPath",{enumerable:!0,get:function(){return o.createPath}});var i=l(n(90)),a=l(n(89)),u=l(n(88));function l(e){return e&&e.__esModule?e:{default:e}}t.createBrowserHistory=i.default,t.createHashHistory=a.default,t.createMemoryHistory=u.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(31),i=(r=o)&&r.__esModule?r:{default:r};var a={},u=0;t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,o=r.path,l=r.exact,s=void 0!==l&&l,c=r.strict,f=void 0!==c&&c,d=r.sensitive,p=void 0!==d&&d;if(null==o)return n;var h=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=a[n]||(a[n]={});if(r[e])return r[e];var o=[],l={re:(0,i.default)(e,o,t),keys:o};return u<1e4&&(r[e]=l,u++),l}(o,{end:s,strict:f,sensitive:p}),m=h.re,y=h.keys,v=m.exec(e);if(!v)return null;var g=v[0],b=v.slice(1),w=e===g;return s&&!w?null:{path:o,url:"/"===o&&""===g?"/":g,isExact:w,params:y.reduce(function(e,t,n){return e[t.name]=b[n],e},{})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=l(n(5)),i=l(n(3)),a=l(n(0)),u=l(n(2));function l(e){return e&&e.__esModule?e:{default:e}}var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var f=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:s({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;(0,i.default)(null==n||1===a.default.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){(0,o.default)(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?a.default.Children.only(e):null},t}(a.default.Component);f.propTypes={history:u.default.object.isRequired,children:u.default.node},f.contextTypes={router:u.default.object},f.childContextTypes={router:u.default.object.isRequired},t.default=f},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.locationsAreEqual=t.createLocation=void 0;var r=a(n(92)),o=a(n(91)),i=n(8);function a(e){return e&&e.__esModule?e:{default:e}}var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.createLocation=function(e,t,n,o){var a=void 0;"string"==typeof e?(a=(0,i.parsePath)(e)).state=t:(void 0===(a=u({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),o?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=(0,r.default)(a.pathname,o.pathname)):a.pathname=o.pathname:a.pathname||(a.pathname="/"),a},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,o.default)(e.state,t.state)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.withRouter=t.matchPath=t.generatePath=t.Switch=t.StaticRouter=t.Router=t.Route=t.Redirect=t.Prompt=t.MemoryRouter=void 0;var r=p(n(33)),o=p(n(30)),i=p(n(29)),a=p(n(15)),u=p(n(10)),l=p(n(28)),s=p(n(27)),c=p(n(14)),f=p(n(9)),d=p(n(26));function p(e){return e&&e.__esModule?e:{default:e}}t.MemoryRouter=r.default,t.Prompt=o.default,t.Redirect=i.default,t.Route=a.default,t.Router=u.default,t.StaticRouter=l.default,t.Switch=s.default,t.generatePath=c.default,t.matchPath=f.default,t.withRouter=d.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(31),i=(r=o)&&r.__esModule?r:{default:r};var a={},u=0;t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=a[t]||(a[t]={});if(n[e])return n[e];var r=i.default.compile(e);return u<1e4&&(n[e]=r,u++),r}(e)(t,{pretty:!0})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=s(n(5)),i=s(n(3)),a=s(n(0)),u=s(n(2)),l=s(n(9));function s(e){return e&&e.__esModule?e:{default:e}}var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var d=function(e){return 0===a.default.Children.count(e)},p=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=f(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:c({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,a=e.strict,u=e.exact,s=e.sensitive;if(n)return n;(0,i.default)(t,"You should not use <Route> or withRouter() outside a <Router>");var c=t.route,f=(r||c.location).pathname;return(0,l.default)(f,{path:o,strict:a,exact:u,sensitive:s},c.match)},t.prototype.componentWillMount=function(){(0,o.default)(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),(0,o.default)(!(this.props.component&&this.props.children&&!d(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),(0,o.default)(!(this.props.render&&this.props.children&&!d(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){(0,o.default)(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),(0,o.default)(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,i=this.context.router,u=i.history,l=i.route,s=i.staticContext,c={match:e,location:this.props.location||l.location,history:u,staticContext:s};return r?e?a.default.createElement(r,c):null:o?e?o(c):null:"function"==typeof n?n(c):n&&!d(n)?a.default.Children.only(n):null},t}(a.default.Component);p.propTypes={computedMatch:u.default.object,path:u.default.string,exact:u.default.bool,strict:u.default.bool,sensitive:u.default.bool,component:u.default.func,render:u.default.func,children:u.default.oneOfType([u.default.func,u.default.node]),location:u.default.object},p.contextTypes={router:u.default.shape({history:u.default.object.isRequired,route:u.default.object.isRequired,staticContext:u.default.object})},p.childContextTypes={router:u.default.object.isRequired},t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(10),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(11),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,i.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):((0,i.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,u,l){if(r(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,u,l],f=0;(s=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0)),u=l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}var s=o("div",{className:"icon-wrap"},void 0,o("i",{className:"fas fa-user"})),c=o("button",{type:"submit"},void 0,o("i",{className:"fas fa-plus"})),f=o("div",{},void 0,o("i",{className:"fas fa-check"})),d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.user=n.props.user,n.state={serverResponse:""},n.handleAddUserToFriendsFormSubmit=n.handleAddUserToFriendsFormSubmit.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"handleAddUserToFriendsFormSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation(),u.default.addUserToFriends(this.user.username).then(function(e){t.props.setFriends(e),t.setState({serverResponse:""})}).catch(function(e){e.text().then(function(e){t.setState({serverResponse:e})})})}},{key:"render",value:function(){return o("div",{className:"user-tile"},void 0,o("div",{className:"user-info"},void 0,s,o("div",{className:"username"},void 0,this.user.username),!1===this.props.isFriend?o("form",{name:"add-user-to-friends-form",className:"add-user-to-friends-form",onSubmit:this.handleAddUserToFriendsFormSubmit},void 0,c):f),o("div",{className:"server-response-message"},void 0,this.state.serverResponse))}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0)),u=l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}var s=o("button",{type:"submit",className:"submit"},void 0,o("i",{className:"fas fa-plus"})),c=o("option",{value:"",selected:!0,disabled:!0,hidden:!0},void 0," select existing "),f=o("button",{type:"submit",className:"submit"},void 0,o("i",{className:"fas fa-plus"})),d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={newCollectionName:"",existingCollectionName:"",serverMessage:""},n.handleExistingCollectionChange=n.handleExistingCollectionChange.bind(n),n.handleExistingCollectionSubmit=n.handleExistingCollectionSubmit.bind(n),n.handleNewCollectionChange=n.handleNewCollectionChange.bind(n),n.handleNewCollectionSubmit=n.handleNewCollectionSubmit.bind(n),n.setNewCollectionSuccess=n.setNewCollectionSuccess.bind(n),n.setExistingCollectionSuccess=n.setExistingCollectionSuccess.bind(n),n.createCollection=n.createCollection.bind(n),n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"handleCloseDialogSubmit",value:function(e){e.preventDefault(),this.props.closeDialog(e)}},{key:"handleNewCollectionChange",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector("form[name='new-collection-form']");this.setState({newCollectionName:t.elements["new-collection-name"].value})}},{key:"handleNewCollectionSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation(),this.createCollection(this.state.newCollectionName).then(function(){u.default.addArtistToCollection(t.props.artist,t.state.newCollectionName).then(function(){t.setNewCollectionSuccess()})})}},{key:"createCollection",value:function(e){var t=this;return new Promise(function(n,r){u.default.createArtistCollection(e).then(function(e){t.setState({serverMessage:""}),e.json().then(function(e){return t.props.setArtistCollections(e),n(e)})}).catch(function(e){return 409===e.status?(t.setState({serverMessage:"Collection with this name already exists"}),r(e)):(t.setState({serverMessage:""}),r(e))})})}},{key:"handleExistingCollectionChange",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector("form[name='existing-collection-form']");this.setState({existingCollectionName:t.elements["existing-collection-name"].value})}},{key:"handleExistingCollectionSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation(),u.default.addArtistToCollection(this.props.artist,this.state.existingCollectionName).then(function(){t.setExistingCollectionSuccess()}).catch(function(e){409===e.status?t.setState({serverMessage:"Artist is already in collection"}):e.text().then(function(e){t.setState({serverMessage:e})})})}},{key:"setNewCollectionSuccess",value:function(){var e=this.componentRef.current.querySelector("form[name='new-collection-form'").querySelector(".submit"),t=e.querySelector("i");t.classList.replace("fa-plus","fa-check"),t.classList.add("white"),e.classList.add("green-background"),e.setAttribute("disabled","true"),this.setState({serverMessage:""})}},{key:"setExistingCollectionSuccess",value:function(){var e=this.componentRef.current.querySelector("form[name='existing-collection-form'").querySelector(".submit"),t=e.querySelector("i");t.classList.replace("fa-plus","fa-check"),t.classList.add("white"),e.classList.add("green-background"),e.setAttribute("disabled","true"),this.setState({serverMessage:""})}},{key:"componentDidMount",value:function(){this.props.getArtistCollections()}},{key:"render",value:function(){this.state.artist;var e=this.props.artistCollections;return a.default.createElement("div",{ref:this.componentRef,className:"add-artist-to-collection-dialog"},o("form",{name:"new-collection-form",className:"new-collection-form",onSubmit:this.handleNewCollectionSubmit},void 0,o("fieldset",{},void 0,o("input",{type:"text",name:"new-collection-name",className:"new-collection-name",placeholder:"create new",onChange:this.handleNewCollectionChange}),s)),o("form",{name:"existing-collection-form",className:"existing-collection-form",onSubmit:this.handleExistingCollectionSubmit},void 0,o("fieldset",{},void 0,o("select",{name:"existing-collection-name",onChange:this.handleExistingCollectionChange},void 0,c,e.map(function(e){return o("option",{value:e.collectionName},void 0,e.collectionName)})),f)),o("div",{className:"server-response-message"},void 0,this.state.serverMessage))}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=c(n(0)),l=(c(n(21)),c(n(67))),s=c(n(66));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isDialogOpen:!1},n.handleButtonFocus=n.handleButtonFocus.bind(n),n.handleButtonSubmit=n.handleButtonSubmit.bind(n),n.openDialog=n.openDialog.bind(n),n.closeDialog=n.closeDialog.bind(n),n.closeDialogOnOutsideClick=n.closeDialogOnOutsideClick.bind(n),n.componentRef=u.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"handleButtonFocus",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector(".tool-label");return"mouseover"===e.type||"focus"===e.type?(t.classList.remove("hidden"),t.classList.add("visible")):"mouseout"!==e.type&&"blur"!==e.type||(t.classList.remove("visible"),t.classList.add("hidden")),!1}},{key:"handleButtonSubmit",value:function(e){return e.preventDefault(),e.stopPropagation(),!1===this.state.isDialogOpen?this.openDialog(e):this.closeDialog(e),!1}},{key:"openDialog",value:function(e){this.componentRef.current.querySelector(".tool-dialog");this.setState({isDialogOpen:!0}),document.body.addEventListener("click",this.closeDialogOnOutsideClick)}},{key:"closeDialogOnOutsideClick",value:function(e){this.componentRef.current.querySelector(".tool-dialog").contains(e.target)||this.closeDialog()}},{key:"closeDialog",value:function(e){this.componentRef.current.querySelector(".tool-dialog");this.setState({isDialogOpen:!1}),document.body.removeEventListener("click",this.closeDialogOnOutsideClick)}},{key:"render",value:function(){var e=this.props.toolLabel,t=this.props.toolIconClassName,n=this.props.toolDialogComponent;this.props.artist,this.props.artistCollections;return u.default.createElement("div",{ref:this.componentRef,className:"tool-widget"},i(l.default,{toolIconClassName:t,onSubmit:this.handleButtonSubmit,onMouseOver:this.handleButtonFocus,onMouseOut:this.handleButtonFocus,onFocus:this.handleButtonFocus,onBlur:this.handleButtonFocus}),i("div",{className:"tool-label hidden"},void 0,e),i("div",{},void 0,this.state.isDialogOpen?u.default.createElement(s.default,o({},this.props,{toolDialogComponent:n,openDialog:this.openDialog,closeDialog:this.closeDialog})):""))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=d(n(0)),l=d(n(22)),s=d(n(21)),c=d(n(65)),f=d(n(64));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"render",value:function(){return console.log("Liked artists in nav: "+this.props.likedArtists),i("nav",{className:"item-tools-nav"},void 0,i("ul",{},void 0,i("li",{},void 0,u.default.createElement(l.default,o({},this.props,{toolLabel:"Add to a collection",toolIconClassName:"fas fa-plus",toolDialogComponent:s.default}))),i("li",{},void 0,u.default.createElement(f.default,o({},this.props,{bob:this.props.likedArtists}))),i("li",{},void 0,u.default.createElement(l.default,o({},this.props,{toolLabel:"Recommend to a friend",toolIconClassName:"fas fa-user",toolDialogComponent:c.default})))))}}]),t}();t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(0)),u=s(n(23)),l=n(4);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"render",value:function(){var e=this.props.artist;return a.default.createElement("div",{className:"item-card artist-search-result-tile",ref:this.componentRef},o("div",{className:"avatar-wrap"},void 0,o("div",{className:"image-wrap"},void 0,o(l.Link,{to:"/artistInfo?artistName="+e.artistName},void 0,o("img",{className:"image",src:e.imageLargeUrl})))),o("div",{className:"card-content-wrap"},void 0,o("div",{className:"title"},void 0,o(l.Link,{to:"/artistInfo?artistName="+e.artistName},void 0,e.artistName)),o("div",{className:"item-tools-nav-wrap"},void 0,a.default.createElement(u.default,this.props))))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={REGISTRATION_API_URL:"api/public/auth/register",LOGIN_API_URL:"api/public/auth/login",CURRENT_USER_API_URL:"api/secured/currentUser",ARTIST_SEARCH_URL:"api/getArtistSearch",ALBUM_SEARCH_URL:"api/getAlbumSearch",TRACK_SEARCH_URL:"api/getTrackSearch",ARTIST_INFO_URL:"api/getArtistInfo",ALBUM_INFO_URL:"api/getAlbumInfo",TRACK_INFO_URL:"api/getTrackInfo",SIMILAR_ARTISTS_URL:"api/getSimilarArtists",ARTIST_ALBUMS_URL:"api/getArtistAlbums",RENEW_TOKEN_URL:"api/secured/renewToken",CREATE_ARTIST_COLLECTION_URL:"api/secured/createArtistCollection",GET_ARTIST_COLLECTIONS_URL:"api/secured/getArtistCollections",GET_GUEST_TOKEN_URL:"api/public/auth/getGuestToken",ADD_ARTIST_TO_COLLECTION_URL:"api/secured/addArtistToCollection",GET_ARTIST_COLLECTION_URL:"api/secured/getArtistCollection",USER_SEARCH_URL:"api/getUserSearch",ADD_USER_TO_FRIENDS_URL:"api/secured/addUserToFriends",GET_FRIENDS_URL:"api/secured/getFriends",GET_RECOMMENDATIONS_URL:"api/secured/getRecommendations",RECOMMEND_ARTIST_URL:"api/secured/recommendArtist",GET_FRIENDS_ARTIST_WAS_RECOMMENDED_TO_URL:"api/secured/getFriendsArtistWasRecommendedTo",GET_LIKED_ARTISTS_URL:"api/secured/getLikedArtists",ADD_LIKED_ARTIST_URL:"api/secured/addLikedArtist",GET_LIKED_ARTIST_MBID_LIST_URL:"api/secured/getLikedArtistMbidList",REMOVE_LIKED_ARTIST_URL:"api/secured/removeLikedArtist",DELETE_ARTIST_COLLECTION_URL:"api/secured/deleteArtistCollection"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(0)),o=u(n(2)),i=u(n(76)),a=u(n(15));function u(e){return e&&e.__esModule?e:{default:e}}var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(e){var t=function(t){var n=t.wrappedComponentRef,o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return r.default.createElement(a.default,{children:function(t){return r.default.createElement(e,l({},o,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:o.default.func},(0,i.default)(t,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=s(n(0)),i=s(n(2)),a=s(n(5)),u=s(n(3)),l=s(n(9));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,u.default)(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){(0,a.default)(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),(0,a.default)(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,i=void 0;return o.default.Children.forEach(t,function(t){if(null==r&&o.default.isValidElement(t)){var a=t.props,u=a.path,s=a.exact,c=a.strict,f=a.sensitive,d=a.from,p=u||d;i=t,r=(0,l.default)(n.pathname,{path:p,exact:s,strict:c,sensitive:f},e.match)}}),r?o.default.cloneElement(i,{location:n,computedMatch:r}):null},t}(o.default.Component);c.contextTypes={router:i.default.shape({route:i.default.object.isRequired}).isRequired},c.propTypes={children:i.default.node,location:i.default.object},t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=c(n(5)),i=c(n(3)),a=c(n(0)),u=c(n(2)),l=n(7),s=c(n(10));function c(e){return e&&e.__esModule?e:{default:e}}var f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var p=function(e){return"/"===e.charAt(0)?e:"/"+e},h=function(e,t){return e?f({},t,{pathname:p(e)+t.pathname}):t},m=function(e){return"string"==typeof e?e:(0,l.createPath)(e)},y=function(e){return function(){(0,i.default)(!1,"You cannot %s with <StaticRouter>",e)}},v=function(){},g=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=d(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return p(r.props.basename+m(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=h(n,(0,l.createLocation)(e)),o.url=m(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=h(n,(0,l.createLocation)(e)),o.url=m(o.location)},r.handleListen=function(){return v},r.handleBlock=function(){return v},d(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){(0,o.default)(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=p(e);return 0!==t.pathname.indexOf(n)?t:f({},t,{pathname:t.pathname.substr(n.length)})}(t,(0,l.createLocation)(n)),push:this.handlePush,replace:this.handleReplace,go:y("go"),goBack:y("goBack"),goForward:y("goForward"),listen:this.handleListen,block:this.handleBlock};return a.default.createElement(s.default,f({},r,{history:o}))},t}(a.default.Component);g.propTypes={basename:u.default.string,context:u.default.object.isRequired,location:u.default.oneOfType([u.default.string,u.default.object])},g.defaultProps={basename:"",location:"/"},g.childContextTypes={router:u.default.object.isRequired},t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=c(n(0)),i=c(n(2)),a=c(n(5)),u=c(n(3)),l=n(7),s=c(n(14));function c(e){return e&&e.__esModule?e:{default:e}}var f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){(0,u.default)(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=(0,l.createLocation)(e.to),n=(0,l.createLocation)(this.props.to);(0,l.locationsAreEqual)(t,n)?(0,a.default)(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?(0,s.default)(n,t.params):f({},n,{pathname:(0,s.default)(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(o.default.Component);d.propTypes={computedMatch:i.default.object,push:i.default.bool,from:i.default.string,to:i.default.oneOfType([i.default.string,i.default.object]).isRequired},d.defaultProps={push:!1},d.contextTypes={router:i.default.shape({history:i.default.shape({push:i.default.func.isRequired,replace:i.default.func.isRequired}).isRequired,staticContext:i.default.object}).isRequired},t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=u(n(0)),i=u(n(2)),a=u(n(3));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){(0,a.default)(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(o.default.Component);l.propTypes={when:i.default.bool,message:i.default.oneOfType([i.default.func,i.default.string]).isRequired},l.defaultProps={when:!0},l.contextTypes={router:i.default.shape({history:i.default.shape({block:i.default.func.isRequired}).isRequired}).isRequired},t.default=l},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(84);e.exports=h,e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t))},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=p;var i=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],o=0,a=0,u="",l=t&&t.delimiter||"/";null!=(n=i.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(a,p),a=p+f.length,d)u+=d[1];else{var h=e[a],m=n[2],y=n[3],v=n[4],g=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var _=null!=m&&null!=h&&h!==m,x="+"===b||"*"===b,S="?"===b||"*"===b,C=n[2]||l,E=v||g;r.push({name:y||o++,prefix:m||"",delimiter:C,optional:S,repeat:x,partial:_,asterisk:!!w,pattern:E?c(E):w?".*":"[^"+s(C)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function u(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"===r(e[n])&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,r){for(var i="",a=n||{},l=(r||{}).pretty?u:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=a[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(o(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!t[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):l(d),!t[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function f(e,t){return e.keys=t,e}function d(e){return e.sensitive?"":"i"}function p(e,t,n){o(t)||(n=t||n,t=[]);for(var r=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var l=e[u];if("string"==typeof l)a+=s(l);else{var c=s(l.prefix),p="(?:"+l.pattern+")";t.push(l),l.repeat&&(p+="(?:"+c+p+")*"),a+=p=l.optional?l.partial?c+"("+p+")?":"(?:"+c+"("+p+"))?":c+"("+p+")"}}var h=s(n.delimiter||"/"),m=a.slice(-h.length)===h;return r||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":r&&m?"":"(?="+h+"|$)",f(new RegExp("^"+a,d(n)),t)}function h(e,t,n){return o(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return f(e,t)}(e,t):o(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(h(e[o],t,n).source);return f(new RegExp("(?:"+r.join("|")+")",d(n)),t)}(e,t,n):function(e,t,n){return p(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(15),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=s(n(5)),i=s(n(0)),a=s(n(2)),u=n(7),l=s(n(10));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var f=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.history=(0,u.createMemoryHistory)(r.props),c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,o.default)(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return i.default.createElement(l.default,{history:this.history,children:this.props.children})},t}(i.default.Component);f.propTypes={initialEntries:a.default.array,initialIndex:a.default.number,getUserConfirmation:a.default.func,keyLength:a.default.number,children:a.default.node},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=l(n(0)),i=l(n(2)),a=l(n(3)),u=n(7);function l(e){return e&&e.__esModule?e:{default:e}}var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var f=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},d=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!f(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);(0,a.default)(this.context.router,"You should not use <Link> outside a <Router>"),(0,a.default)(void 0!==t,'You must specify the "to" property');var i=this.context.router.history,l="string"==typeof t?(0,u.createLocation)(t,null,null,i.location):t,c=i.createHref(l);return o.default.createElement("a",s({},r,{onClick:this.handleClick,href:c,ref:n}))},t}(o.default.Component);d.propTypes={onClick:i.default.func,target:i.default.string,replace:i.default.bool,to:i.default.oneOfType([i.default.string,i.default.object]).isRequired,innerRef:i.default.oneOfType([i.default.string,i.default.func])},d.defaultProps={replace:!1},d.contextTypes={router:i.default.shape({history:i.default.shape({push:i.default.func.isRequired,replace:i.default.func.isRequired,createHref:i.default.func.isRequired}).isRequired}).isRequired},t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var s in n=Object(arguments[l]))o.call(n,s)&&(u[s]=n[s]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(u[a[c]]=n[a[c]])}}return u}},,function(e,t,n){},function(e,t,n){var r,o;(function(){e.exports=0;var n,i,a,u,l,s,c,f,d,p,h,m,y,v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};a="hasOwnProperty",u=/[\.\/]/,l=/\s*,\s*/,s=function(e,t){return e-t},c={n:{}},f=function(){for(var e=0,t=this.length;e<t;e++)if(void 0!==this[e])return this[e]},d=function(){for(var e=this.length;--e;)if(void 0!==this[e])return this[e]},p=Object.prototype.toString,h=String,m=Array.isArray||function(e){return e instanceof Array||"[object Array]"==p.call(e)},eve=function(e){function t(t,n){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(e,t){var r,o=i,a=Array.prototype.slice.call(arguments,2),u=eve.listeners(e),l=0,c=[],p={},h=[],m=n;h.firstDefined=f,h.lastDefined=d,n=e,i=0;for(var y=0,v=u.length;y<v;y++)"zIndex"in u[y]&&(c.push(u[y].zIndex),u[y].zIndex<0&&(p[u[y].zIndex]=u[y]));for(c.sort(s);c[l]<0;)if(r=p[c[l++]],h.push(r.apply(t,a)),i)return i=o,h;for(y=0;y<v;y++)if("zIndex"in(r=u[y]))if(r.zIndex==c[l]){if(h.push(r.apply(t,a)),i)break;do{if((r=p[c[++l]])&&h.push(r.apply(t,a)),i)break}while(r)}else p[r.zIndex]=r;else if(h.push(r.apply(t,a)),i)break;return i=o,n=m,h}),eve._events=c,eve.listeners=function(e){var t,n,r,o,i,a,l,s,f=m(e)?e:e.split(u),d=c,p=[d],h=[];for(o=0,i=f.length;o<i;o++){for(s=[],a=0,l=p.length;a<l;a++)for(n=[(d=p[a].n)[f[o]],d["*"]],r=2;r--;)(t=n[r])&&(s.push(t),h=h.concat(t.f||[]));p=s}return h},eve.separator=function(e){e?(e="["+(e=h(e).replace(/(?=[\.\^\]\[\-])/g,"\\"))+"]",u=new RegExp(e)):u=/[\.\/]/},eve.on=function(e,t){if("function"!=typeof t)return function(){};for(var n=m(e)?m(e[0])?e:[e]:h(e).split(l),r=0,o=n.length;r<o;r++)!function(e){for(var n,r=m(e)?e:h(e).split(u),o=c,i=0,a=r.length;i<a;i++)o=(o=o.n).hasOwnProperty(r[i])&&o[r[i]]||(o[r[i]]={n:{}});for(o.f=o.f||[],i=0,a=o.f.length;i<a;i++)if(o.f[i]==t){n=!0;break}!n&&o.f.push(t)}(n[r]);return function(e){+e==+e&&(t.zIndex=+e)}},eve.f=function(e){var t=[].slice.call(arguments,1);return function(){eve.apply(null,[e,null].concat(t).concat([].slice.call(arguments,0)))}},eve.stop=function(){i=1},eve.nt=function(e){var t=m(n)?n.join("."):n;return e?new RegExp("(?:\\.|\\/|^)"+e+"(?:\\.|\\/|$)").test(t):t},eve.nts=function(){return m(n)?n:n.split(u)},eve.off=eve.unbind=function(e,t){if(e){var n=m(e)?m(e[0])?e:[e]:h(e).split(l);if(n.length>1)for(var r=0,o=n.length;r<o;r++)eve.off(n[r],t);else{n=m(e)?e:h(e).split(u);var i,s,f,d,p,y=[c],v=[];for(r=0,o=n.length;r<o;r++)for(d=0;d<y.length;d+=f.length-2){if(f=[d,1],i=y[d].n,"*"!=n[r])i[n[r]]&&(f.push(i[n[r]]),v.unshift({n:i,name:n[r]}));else for(s in i)i[a](s)&&(f.push(i[s]),v.unshift({n:i,name:s}));y.splice.apply(y,f)}for(r=0,o=y.length;r<o;r++)for(i=y[r];i.n;){if(t){if(i.f){for(d=0,p=i.f.length;d<p;d++)if(i.f[d]==t){i.f.splice(d,1);break}!i.f.length&&delete i.f}for(s in i.n)if(i.n[a](s)&&i.n[s].f){var g=i.n[s].f;for(d=0,p=g.length;d<p;d++)if(g[d]==t){g.splice(d,1);break}!g.length&&delete i.n[s].f}}else for(s in delete i.f,i.n)i.n[a](s)&&i.n[s].f&&delete i.n[s].f;i=i.n}e:for(r=0,o=v.length;r<o;r++){for(s in(i=v[r]).n[i.name].f)continue e;for(s in i.n[i.name].n)continue e;delete i.n[i.name]}}}else eve._events=c={n:{}}},eve.once=function(e,t){return eve.on(e,function n(){return eve.off(e,n),t.apply(this,arguments)})},eve.version="0.5.0",eve.toString=function(){return"You are running Eve 0.5.0"},void 0!==e&&e.exports?e.exports=eve:r=function(){return eve}.apply(t,[]),y=window||void 0,void 0===(o=function(e){return function(e,t){var n=function(t){var n,r={},o=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){return setTimeout(e,16,(new Date).getTime()),!0},i=Array.isArray||function(e){return e instanceof Array||"[object Array]"==Object.prototype.toString.call(e)},a=0,u="M"+(+new Date).toString(36),l=Date.now||function(){return+new Date},s=function(e){var t=this;if(null==e)return t.s;var n=t.s-e;t.b+=t.dur*n,t.B+=t.dur*n,t.s=e},c=function(e){if(null==e)return this.spd;this.spd=e},f=function(e){var t=this;if(null==e)return t.dur;t.s=t.s*e/t.dur,t.dur=e},d=function(){var e=this;delete r[e.id],e.update(),t("mina.stop."+e.id,e)},p=function(){var e=this;e.pdif||(delete r[e.id],e.update(),e.pdif=e.get()-e.b)},h=function(){var e=this;e.pdif&&(e.b=e.get()-e.pdif,delete e.pdif,r[e.id]=e,y())},m=function(){var e,t=this;if(i(t.start)){e=[];for(var n=0,r=t.start.length;n<r;n++)e[n]=+t.start[n]+(t.end[n]-t.start[n])*t.easing(t.s)}else e=+t.start+(t.end-t.start)*t.easing(t.s);t.set(e)},y=function e(i){if(i){var a=0;for(var u in r)if(r.hasOwnProperty(u)){var l=r[u],s=l.get();a++,l.s=(s-l.b)/(l.dur/l.spd),l.s>=1&&(delete r[u],l.s=1,a--,function(e){setTimeout(function(){t("mina.finish."+e.id,e)})}(l)),l.update()}n=!!a&&o(e)}else n||(n=o(e))},v=function e(t,n,o,i,l,v,g){var b={id:u+(a++).toString(36),start:t,end:n,b:o,s:0,dur:i-o,spd:1,get:l,set:v,easing:g||e.linear,status:s,speed:c,duration:f,stop:d,pause:p,resume:h,update:m};r[b.id]=b;var w,_=0;for(w in r)if(r.hasOwnProperty(w)&&2==++_)break;return 1==_&&y(),b};return v.time=l,v.getById=function(e){return r[e]||null},v.linear=function(e){return e},v.easeout=function(e){return Math.pow(e,1.7)},v.easein=function(e){return Math.pow(e,.48)},v.easeinout=function(e){if(1==e)return 1;if(0==e)return 0;var t=.48-e/1.04,n=Math.sqrt(.1734+t*t),r=n-t,o=Math.pow(Math.abs(r),1/3)*(r<0?-1:1),i=-n-t,a=Math.pow(Math.abs(i),1/3)*(i<0?-1:1),u=o+a+.5;return 3*(1-u)*u*u+u*u*u},v.backin=function(e){if(1==e)return 1;var t=1.70158;return e*e*((t+1)*e-t)},v.backout=function(e){if(0==e)return 0;var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},v.elastic=function(e){return e==!!e?e:Math.pow(2,-10*e)*Math.sin((e-.075)*(2*Math.PI)/.3)+1},v.bounce=function(e){var t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375},e.mina=v,v}(void 0===t?function(){}:t),r=function(e){function n(e,t){if(e){if(e.nodeType)return Y(e);if(R(e,"array")&&n.set)return n.set.apply(n,e);if(e instanceof H)return e;if(null==t)return Y(e=r.doc.querySelector(String(e)))}return new G(e=null==e?"100%":e,t=null==t?"100%":t)}n.version="0.5.1",n.toString=function(){return"Snap v"+this.version},n._={};var r={win:e.window,doc:e.window.document};n._.glob=r;var o,i,a="hasOwnProperty",u=String,l=parseFloat,s=parseInt,c=Math,f=c.max,d=c.min,p=c.abs,h=(c.pow,c.PI),m=(c.round,""),y=Object.prototype.toString,b=/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\))\s*$/i,w=(n._.separator=/[,\s]+/,/[\s]*,[\s]*/),_={hs:1,rg:1},x=/([a-z])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,S=/([rstm])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,C=/(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\s]*,?[\s]*/gi,E=0,k="S"+(+new Date).toString(36),O=function(e){return(e&&e.type?e.type:m)+k+(E++).toString(36)},P="http://www.w3.org/1999/xlink",T="http://www.w3.org/2000/svg",j={};function A(e,t){if(t){if("#text"==e&&(e=r.doc.createTextNode(t.text||t["#text"]||"")),"#comment"==e&&(e=r.doc.createComment(t.text||t["#text"]||"")),"string"==typeof e&&(e=A(e)),"string"==typeof t)return 1==e.nodeType?"xlink:"==t.substring(0,6)?e.getAttributeNS(P,t.substring(6)):"xml:"==t.substring(0,4)?e.getAttributeNS(T,t.substring(4)):e.getAttribute(t):"text"==t?e.nodeValue:null;if(1==e.nodeType){for(var n in t)if(t[a](n)){var o=u(t[n]);o?"xlink:"==n.substring(0,6)?e.setAttributeNS(P,n.substring(6),o):"xml:"==n.substring(0,4)?e.setAttributeNS(T,n.substring(4),o):e.setAttribute(n,o):e.removeAttribute(n)}}else"text"in t&&(e.nodeValue=t.text)}else e=r.doc.createElementNS(T,e);return e}function R(e,t){return"finite"==(t=u.prototype.toLowerCase.call(t))?isFinite(e):!("array"!=t||!(e instanceof Array||Array.isArray&&Array.isArray(e)))||"null"==t&&null===e||t==(void 0===e?"undefined":v(e))&&null!==e||"object"==t&&e===Object(e)||y.call(e).slice(8,-1).toLowerCase()==t}function N(e,t,n){return function r(){var o=Array.prototype.slice.call(arguments,0),i=o.join("␀"),u=r.cache=r.cache||{},l=r.count=r.count||[];return u[a](i)?(function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return e.push(e.splice(n,1)[0])}(l,i),n?n(u[i]):u[i]):(l.length>=1e3&&delete u[l.shift()],l.push(i),u[i]=e.apply(t,o),n?n(u[i]):u[i])}}function F(e){return e%360*h/180}n.url=function(e){return"url('#"+e+"')"},n._.$=A,n._.id=O,n.format=(o=/\{([^\}]+)\}/g,i=/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g,function(e,t){return u(e).replace(o,function(e,n){return function(e,t,n){var r=n;return t.replace(i,function(e,t,n,o,i){t=t||o,r&&(t in r&&(r=r[t]),"function"==typeof r&&i&&(r=r()))}),r=(null==r||r==n?e:r)+""}(e,n,t)})}),n._.clone=function e(t){if("function"==typeof t||Object(t)!==t)return t;var n=new t.constructor;for(var r in t)t[a](r)&&(n[r]=e(t[r]));return n},n._.cacher=N,n.rad=F,n.deg=function(e){return 180*e/h%360},n.sin=function(e){return c.sin(n.rad(e))},n.tan=function(e){return c.tan(n.rad(e))},n.cos=function(e){return c.cos(n.rad(e))},n.asin=function(e){return n.deg(c.asin(e))},n.acos=function(e){return n.deg(c.acos(e))},n.atan=function(e){return n.deg(c.atan(e))},n.atan2=function(e){return n.deg(c.atan2(e))},n.angle=function e(t,n,r,o,i,a){if(null==i){var u=t-r,l=n-o;return u||l?(180+180*c.atan2(-l,-u)/h+360)%360:0}return e(t,n,i,a)-e(r,o,i,a)},n.len=function(e,t,r,o){return Math.sqrt(n.len2(e,t,r,o))},n.len2=function(e,t,n,r){return(e-n)*(e-n)+(t-r)*(t-r)},n.closestPoint=function(e,t,n){function r(e){var r=e.x-t,o=e.y-n;return r*r+o*o}for(var o,i,a,u,l=e.node,s=l.getTotalLength(),c=s/l.pathSegList.numberOfItems*.125,f=1/0,d=0;d<=s;d+=c)(u=r(a=l.getPointAtLength(d)))<f&&(o=a,i=d,f=u);for(c*=.5;c>.5;){var p,h,m,y,v,g;(m=i-c)>=0&&(v=r(p=l.getPointAtLength(m)))<f?(o=p,i=m,f=v):(y=i+c)<=s&&(g=r(h=l.getPointAtLength(y)))<f?(o=h,i=y,f=g):c*=.5}return o={x:o.x,y:o.y,length:i,distance:Math.sqrt(f)}},n.is=R,n.snapTo=function(e,t,n){if(n=R(n,"finite")?n:10,R(e,"array")){for(var r=e.length;r--;)if(p(e[r]-t)<=n)return e[r]}else{var o=t%(e=+e);if(o<n)return t-o;if(o>e-n)return t-o+e}return t},n.getRGB=N(function(e){if(!e||(e=u(e)).indexOf("-")+1)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:U};if("none"==e)return{r:-1,g:-1,b:-1,hex:"none",toString:U};if(!_[a](e.toLowerCase().substring(0,2))&&"#"!=e.charAt()&&(e=M(e)),!e)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:U};var t,r,o,i,p,h,m=e.match(b);return m?(m[2]&&(o=s(m[2].substring(5),16),r=s(m[2].substring(3,5),16),t=s(m[2].substring(1,3),16)),m[3]&&(o=s((p=m[3].charAt(3))+p,16),r=s((p=m[3].charAt(2))+p,16),t=s((p=m[3].charAt(1))+p,16)),m[4]&&(h=m[4].split(w),t=l(h[0]),"%"==h[0].slice(-1)&&(t*=2.55),r=l(h[1]),"%"==h[1].slice(-1)&&(r*=2.55),o=l(h[2]),"%"==h[2].slice(-1)&&(o*=2.55),"rgba"==m[1].toLowerCase().slice(0,4)&&(i=l(h[3])),h[3]&&"%"==h[3].slice(-1)&&(i/=100)),m[5]?(h=m[5].split(w),t=l(h[0]),"%"==h[0].slice(-1)&&(t/=100),r=l(h[1]),"%"==h[1].slice(-1)&&(r/=100),o=l(h[2]),"%"==h[2].slice(-1)&&(o/=100),("deg"==h[0].slice(-3)||"°"==h[0].slice(-1))&&(t/=360),"hsba"==m[1].toLowerCase().slice(0,4)&&(i=l(h[3])),h[3]&&"%"==h[3].slice(-1)&&(i/=100),n.hsb2rgb(t,r,o,i)):m[6]?(h=m[6].split(w),t=l(h[0]),"%"==h[0].slice(-1)&&(t/=100),r=l(h[1]),"%"==h[1].slice(-1)&&(r/=100),o=l(h[2]),"%"==h[2].slice(-1)&&(o/=100),("deg"==h[0].slice(-3)||"°"==h[0].slice(-1))&&(t/=360),"hsla"==m[1].toLowerCase().slice(0,4)&&(i=l(h[3])),h[3]&&"%"==h[3].slice(-1)&&(i/=100),n.hsl2rgb(t,r,o,i)):(t=d(c.round(t),255),r=d(c.round(r),255),o=d(c.round(o),255),i=d(f(i,0),1),(m={r:t,g:r,b:o,toString:U}).hex="#"+(16777216|o|r<<8|t<<16).toString(16).slice(1),m.opacity=R(i,"finite")?i:1,m)):{r:-1,g:-1,b:-1,hex:"none",error:1,toString:U}},n),n.hsb=N(function(e,t,r){return n.hsb2rgb(e,t,r).hex}),n.hsl=N(function(e,t,r){return n.hsl2rgb(e,t,r).hex}),n.rgb=N(function(e,t,n,r){if(R(r,"finite")){var o=c.round;return"rgba("+[o(e),o(t),o(n),+r.toFixed(2)]+")"}return"#"+(16777216|n|t<<8|e<<16).toString(16).slice(1)});var M=function(e){var t=r.doc.getElementsByTagName("head")[0]||r.doc.getElementsByTagName("svg")[0],n="rgb(255, 0, 0)";return(M=N(function(e){if("red"==e.toLowerCase())return n;t.style.color=n,t.style.color=e;var o=r.doc.defaultView.getComputedStyle(t,m).getPropertyValue("color");return o==n?null:o}))(e)},L=function(){return"hsb("+[this.h,this.s,this.b]+")"},D=function(){return"hsl("+[this.h,this.s,this.l]+")"},U=function(){return 1==this.opacity||null==this.opacity?this.hex:"rgba("+[this.r,this.g,this.b,this.opacity]+")"},B=function(e,t,r){if(null==t&&R(e,"object")&&"r"in e&&"g"in e&&"b"in e&&(r=e.b,t=e.g,e=e.r),null==t&&R(e,string)){var o=n.getRGB(e);e=o.r,t=o.g,r=o.b}return(e>1||t>1||r>1)&&(e/=255,t/=255,r/=255),[e,t,r]},I=function(e,t,r,o){e=c.round(255*e),t=c.round(255*t),r=c.round(255*r);var i={r:e,g:t,b:r,opacity:R(o,"finite")?o:1,hex:n.rgb(e,t,r),toString:U};return R(o,"finite")&&(i.opacity=o),i};n.color=function(e){var t;return R(e,"object")&&"h"in e&&"s"in e&&"b"in e?(t=n.hsb2rgb(e),e.r=t.r,e.g=t.g,e.b=t.b,e.opacity=1,e.hex=t.hex):R(e,"object")&&"h"in e&&"s"in e&&"l"in e?(t=n.hsl2rgb(e),e.r=t.r,e.g=t.g,e.b=t.b,e.opacity=1,e.hex=t.hex):(R(e,"string")&&(e=n.getRGB(e)),R(e,"object")&&"r"in e&&"g"in e&&"b"in e&&!("error"in e)?(t=n.rgb2hsl(e),e.h=t.h,e.s=t.s,e.l=t.l,t=n.rgb2hsb(e),e.v=t.b):((e={hex:"none"}).r=e.g=e.b=e.h=e.s=e.v=e.l=-1,e.error=1)),e.toString=U,e},n.hsb2rgb=function(e,t,n,r){var o,i,a,u,l;return R(e,"object")&&"h"in e&&"s"in e&&"b"in e&&(n=e.b,t=e.s,r=e.o,e=e.h),u=(l=n*t)*(1-p((e=(e*=360)%360/60)%2-1)),o=i=a=n-l,I(o+=[l,u,0,0,u,l][e=~~e],i+=[u,l,l,u,0,0][e],a+=[0,0,u,l,l,u][e],r)},n.hsl2rgb=function(e,t,n,r){var o,i,a,u,l;return R(e,"object")&&"h"in e&&"s"in e&&"l"in e&&(n=e.l,t=e.s,e=e.h),(e>1||t>1||n>1)&&(e/=360,t/=100,n/=100),e=(e*=360)%360/60,u=(l=2*t*(n<.5?n:1-n))*(1-p(e%2-1)),o=i=a=n-l/2,I(o+=[l,u,0,0,u,l][e=~~e],i+=[u,l,l,u,0,0][e],a+=[0,0,u,l,l,u][e],r)},n.rgb2hsb=function(e,t,n){var r,o;return n=B(e,t,n),e=n[0],t=n[1],n=n[2],r=f(e,t,n),{h:((0==(o=r-d(e,t,n))?null:r==e?(t-n)/o:r==t?(n-e)/o+2:(e-t)/o+4)+360)%6*60/360,s:0==o?0:o/r,b:r,toString:L}},n.rgb2hsl=function(e,t,n){var r,o,i,a;return n=B(e,t,n),e=n[0],t=n[1],n=n[2],o=f(e,t,n),i=d(e,t,n),r=(o+i)/2,{h:((0==(a=o-i)?null:o==e?(t-n)/a:o==t?(n-e)/a+2:(e-t)/a+4)+360)%6*60/360,s:0==a?0:r<.5?a/(2*r):a/(2-2*r),l:r,toString:D}},n.parsePathString=function(e){if(!e)return null;var t=n.path(e);if(t.arr)return n.path.clone(t.arr);var r={a:7,c:6,o:2,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,u:3,z:0},o=[];return R(e,"array")&&R(e[0],"array")&&(o=n.path.clone(e)),o.length||u(e).replace(x,function(e,t,n){var i=[],a=t.toLowerCase();if(n.replace(C,function(e,t){t&&i.push(+t)}),"m"==a&&i.length>2&&(o.push([t].concat(i.splice(0,2))),a="l",t="m"==t?"l":"L"),"o"==a&&1==i.length&&o.push([t,i[0]]),"r"==a)o.push([t].concat(i));else for(;i.length>=r[a]&&(o.push([t].concat(i.splice(0,r[a]))),r[a]););}),o.toString=n.path.toString,t.arr=n.path.clone(o),o};var z=n.parseTransformString=function(e){if(!e)return null;var t=[];return R(e,"array")&&R(e[0],"array")&&(t=n.path.clone(e)),t.length||u(e).replace(S,function(e,n,r){var o=[];n.toLowerCase(),r.replace(C,function(e,t){t&&o.push(+t)}),t.push([n].concat(o))}),t.toString=n.path.toString,t};function $(e){return e.node.ownerSVGElement&&Y(e.node.ownerSVGElement)||n.select("svg")}function q(e){R(e,"array")||(e=Array.prototype.slice.call(arguments,0));for(var t=0,n=0,r=this.node;this[t];)delete this[t++];for(t=0;t<e.length;t++)"set"==e[t].type?e[t].forEach(function(e){r.appendChild(e.node)}):r.appendChild(e[t].node);var o=r.childNodes;for(t=0;t<o.length;t++)this[n++]=Y(o[t]);return this}function H(e){if(e.snap in j)return j[e.snap];var t;try{t=e.ownerSVGElement}catch(e){}this.node=e,t&&(this.paper=new G(t)),this.type=e.tagName||e.nodeName;var n=this.id=O(this);if(this.anims={},this._={transform:[]},e.snap=n,j[n]=this,"g"==this.type&&(this.add=q),this.type in{g:1,mask:1,pattern:1,symbol:1})for(var r in G.prototype)G.prototype[a](r)&&(this[r]=G.prototype[r])}function V(e){this.node=e}function W(e,t){var n=A(e);t.appendChild(n);var r=Y(n);return r}function G(e,t){var n,o,i,u=G.prototype;if(e&&e.tagName&&"svg"==e.tagName.toLowerCase()){if(e.snap in j)return j[e.snap];var l=e.ownerDocument;for(var s in n=new H(e),o=e.getElementsByTagName("desc")[0],i=e.getElementsByTagName("defs")[0],o||((o=A("desc")).appendChild(l.createTextNode("Created with Snap")),n.node.appendChild(o)),i||(i=A("defs"),n.node.appendChild(i)),n.defs=i,u)u[a](s)&&(n[s]=u[s]);n.paper=n.root=n}else A((n=W("svg",r.doc.body)).node,{height:t,version:1.1,width:e,xmlns:T});return n}function Y(e){return e?e instanceof H||e instanceof V?e:e.tagName&&"svg"==e.tagName.toLowerCase()?new G(e):e.tagName&&"object"==e.tagName.toLowerCase()&&"image/svg+xml"==e.type?new G(e.contentDocument.getElementsByTagName("svg")[0]):new H(e):e}n._.svgTransform2string=function(e){var t=[];return e=e.replace(/(?:^|\s)(\w+)\(([^)]+)\)/g,function(e,n,r){return r=r.split(/\s*,\s*|\s+/),"rotate"==n&&1==r.length&&r.push(0,0),"scale"==n&&(r.length>2?r=r.slice(0,2):2==r.length&&r.push(0,0),1==r.length&&r.push(r[0],0,0)),"skewX"==n?t.push(["m",1,0,c.tan(F(r[0])),1,0,0]):"skewY"==n?t.push(["m",1,c.tan(F(r[0])),0,1,0,0]):t.push([n.charAt(0)].concat(r)),e}),t},n._.rgTransform=/^[a-z][\s]*-?\.?\d/i,n._.transform2matrix=function(e,t){var r=z(e),o=new n.Matrix;if(r)for(var i=0,a=r.length;i<a;i++){var l,s,c,f,d,p=r[i],h=p.length,m=u(p[0]).toLowerCase(),y=p[0]!=m,v=y?o.invert():0;"t"==m&&2==h?o.translate(p[1],0):"t"==m&&3==h?y?(l=v.x(0,0),s=v.y(0,0),c=v.x(p[1],p[2]),f=v.y(p[1],p[2]),o.translate(c-l,f-s)):o.translate(p[1],p[2]):"r"==m?2==h?(d=d||t,o.rotate(p[1],d.x+d.width/2,d.y+d.height/2)):4==h&&(y?(c=v.x(p[2],p[3]),f=v.y(p[2],p[3]),o.rotate(p[1],c,f)):o.rotate(p[1],p[2],p[3])):"s"==m?2==h||3==h?(d=d||t,o.scale(p[1],p[h-1],d.x+d.width/2,d.y+d.height/2)):4==h?y?(c=v.x(p[2],p[3]),f=v.y(p[2],p[3]),o.scale(p[1],p[1],c,f)):o.scale(p[1],p[1],p[2],p[3]):5==h&&(y?(c=v.x(p[3],p[4]),f=v.y(p[3],p[4]),o.scale(p[1],p[2],c,f)):o.scale(p[1],p[2],p[3],p[4])):"m"==m&&7==h&&o.add(p[1],p[2],p[3],p[4],p[5],p[6])}return o},n._unit2px=function(e,t,n){var r=$(e).node,o={},i=r.querySelector(".svg---mgr");function a(e){if(null==e)return m;if(e==+e)return e;A(i,{width:e});try{return i.getBBox().width}catch(e){return 0}}function u(e){if(null==e)return m;if(e==+e)return e;A(i,{height:e});try{return i.getBBox().height}catch(e){return 0}}function l(r,i){null==t?o[r]=i(e.attr(r)||0):r==t&&(o=i(null==n?e.attr(r)||0:n))}switch(i||(A(i=A("rect"),{x:-9e9,y:-9e9,width:10,height:10,class:"svg---mgr",fill:"none"}),r.appendChild(i)),e.type){case"rect":l("rx",a),l("ry",u);case"image":l("width",a),l("height",u);case"text":l("x",a),l("y",u);break;case"circle":l("cx",a),l("cy",u),l("r",a);break;case"ellipse":l("cx",a),l("cy",u),l("rx",a),l("ry",u);break;case"line":l("x1",a),l("x2",a),l("y1",u),l("y2",u);break;case"marker":l("refX",a),l("markerWidth",a),l("refY",u),l("markerHeight",u);break;case"radialGradient":l("fx",a),l("fy",u);break;case"tspan":l("dx",a),l("dy",u);break;default:l(t,a)}return r.removeChild(i),o},r.doc.contains||r.doc.compareDocumentPosition,n._.getSomeDefs=function(e){var t=e.node.ownerSVGElement&&Y(e.node.ownerSVGElement)||e.node.parentNode&&Y(e.node.parentNode)||n.select("svg")||n(0,0),r=t.select("defs"),o=null!=r&&r.node;return o||(o=W("defs",t.node).node),o},n._.getSomeSVG=$,n.select=function(e){return e=u(e).replace(/([^\\]):/g,"$1\\:"),Y(r.doc.querySelector(e))},n.selectAll=function(e){for(var t=r.doc.querySelectorAll(e),o=(n.set||Array)(),i=0;i<t.length;i++)o.push(Y(t[i]));return o},setInterval(function(){for(var e in j)if(j[a](e)){var t=j[e],n=t.node;("svg"!=t.type&&!n.ownerSVGElement||"svg"==t.type&&(!n.parentNode||"ownerSVGElement"in n.parentNode&&!n.ownerSVGElement))&&delete j[e]}},1e4),H.prototype.attr=function(e,n){var r=this.node;if(!e){if(1!=r.nodeType)return{text:r.nodeValue};for(var o=r.attributes,i={},u=0,l=o.length;u<l;u++)i[o[u].nodeName]=o[u].nodeValue;return i}if(R(e,"string")){if(!(arguments.length>1))return t("snap.util.getattr."+e,this).firstDefined();var s={};s[e]=n,e=s}for(var c in e)e[a](c)&&t("snap.util.attr."+c,this,e[c]);return this},n.parse=function(e){var t=r.doc.createDocumentFragment(),n=!0,o=r.doc.createElement("div");if((e=u(e)).match(/^\s*<\s*svg(?:\s|>)/)||(e="<svg>"+e+"</svg>",n=!1),o.innerHTML=e,e=o.getElementsByTagName("svg")[0])if(n)t=e;else for(;e.firstChild;)t.appendChild(e.firstChild);return new V(t)},n.fragment=function(){for(var e=Array.prototype.slice.call(arguments,0),t=r.doc.createDocumentFragment(),o=0,i=e.length;o<i;o++){var a=e[o];a.node&&a.node.nodeType&&t.appendChild(a.node),a.nodeType&&t.appendChild(a),"string"==typeof a&&t.appendChild(n.parse(a).node)}return new V(t)},n._.make=W,n._.wrap=Y,G.prototype.el=function(e,t){var n=W(e,this.node);return t&&n.attr(t),n},H.prototype.children=function(){for(var e=[],t=this.node.childNodes,r=0,o=t.length;r<o;r++)e[r]=n(t[r]);return e},H.prototype.toJSON=function(){var e=[];return function e(t,n){for(var r=0,o=t.length;r<o;r++){var i={type:t[r].type,attr:t[r].attr()},a=t[r].children();n.push(i),a.length&&e(a,i.childNodes=[])}}([this],e),e[0]},t.on("snap.util.getattr",function(){var e=t.nt(),n=(e=e.substring(e.lastIndexOf(".")+1)).replace(/[A-Z]/g,function(e){return"-"+e.toLowerCase()});return K[a](n)?this.node.ownerDocument.defaultView.getComputedStyle(this.node,null).getPropertyValue(n):A(this.node,e)});var K={"alignment-baseline":0,"baseline-shift":0,clip:0,"clip-path":0,"clip-rule":0,color:0,"color-interpolation":0,"color-interpolation-filters":0,"color-profile":0,"color-rendering":0,cursor:0,direction:0,display:0,"dominant-baseline":0,"enable-background":0,fill:0,"fill-opacity":0,"fill-rule":0,filter:0,"flood-color":0,"flood-opacity":0,font:0,"font-family":0,"font-size":0,"font-size-adjust":0,"font-stretch":0,"font-style":0,"font-variant":0,"font-weight":0,"glyph-orientation-horizontal":0,"glyph-orientation-vertical":0,"image-rendering":0,kerning:0,"letter-spacing":0,"lighting-color":0,marker:0,"marker-end":0,"marker-mid":0,"marker-start":0,mask:0,opacity:0,overflow:0,"pointer-events":0,"shape-rendering":0,"stop-color":0,"stop-opacity":0,stroke:0,"stroke-dasharray":0,"stroke-dashoffset":0,"stroke-linecap":0,"stroke-linejoin":0,"stroke-miterlimit":0,"stroke-opacity":0,"stroke-width":0,"text-anchor":0,"text-decoration":0,"text-rendering":0,"unicode-bidi":0,visibility:0,"word-spacing":0,"writing-mode":0};return t.on("snap.util.attr",function(e){var n=t.nt(),r={};n=n.substring(n.lastIndexOf(".")+1),r[n]=e;var o=n.replace(/-(\w)/gi,function(e,t){return t.toUpperCase()}),i=n.replace(/[A-Z]/g,function(e){return"-"+e.toLowerCase()});K[a](i)?this.node.style[o]=null==e?m:e:A(this.node,r)}),G.prototype,n.ajax=function(e,n,r,o){var i=new XMLHttpRequest,a=O();if(i){if(R(n,"function"))o=r,r=n,n=null;else if(R(n,"object")){var u=[];for(var l in n)n.hasOwnProperty(l)&&u.push(encodeURIComponent(l)+"="+encodeURIComponent(n[l]));n=u.join("&")}return i.open(n?"POST":"GET",e,!0),n&&(i.setRequestHeader("X-Requested-With","XMLHttpRequest"),i.setRequestHeader("Content-type","application/x-www-form-urlencoded")),r&&(t.once("snap.ajax."+a+".0",r),t.once("snap.ajax."+a+".200",r),t.once("snap.ajax."+a+".304",r)),i.onreadystatechange=function(){4==i.readyState&&t("snap.ajax."+a+"."+i.status,o,i)},4==i.readyState?i:(i.send(n),i)}},n.load=function(e,t,r){n.ajax(e,function(e){var o=n.parse(e.responseText);r?t.call(r,o):t(o)})},n.getElementByPoint=function(e,t){this.canvas;var n,o,i,a,u,l,s,c,f,d=r.doc.elementFromPoint(e,t);if(r.win.opera&&"svg"==d.tagName){var p=(o=(n=d).getBoundingClientRect(),i=n.ownerDocument,a=i.body,u=i.documentElement,l=u.clientTop||a.clientTop||0,s=u.clientLeft||a.clientLeft||0,c=o.top+(g.win.pageYOffset||u.scrollTop||a.scrollTop)-l,f=o.left+(g.win.pageXOffset||u.scrollLeft||a.scrollLeft)-s,{y:c,x:f}),h=d.createSVGRect();h.x=e-p.x,h.y=t-p.y,h.width=h.height=1;var m=d.getIntersectionList(h,null);m.length&&(d=m[m.length-1])}return d?Y(d):null},n.plugin=function(e){e(n,H,G,r,V)},r.win.Snap=n,n}(e||this);return r.plugin(function(n,r,o,i,a){var u=r.prototype,l=n.is,s=String,c=n._unit2px,f=n._.$,d=n._.make,p=n._.getSomeDefs,h=n._.wrap;u.getBBox=function(e){if("tspan"==this.type)return n._.box(this.node.getClientRects().item(0));if(!n.Matrix||!n.path)return this.node.getBBox();var t=this,r=new n.Matrix;if(t.removed)return n._.box();for(;"use"==t.type;)if(e||(r=r.add(t.transform().localMatrix.translate(t.attr("x")||0,t.attr("y")||0))),t.original)t=t.original;else{var o=t.attr("xlink:href");t=t.original=t.node.ownerDocument.getElementById(o.substring(o.indexOf("#")+1))}var i=t._,a=n.path.get[t.type]||n.path.get.deflt;try{return e?(i.bboxwt=a?n.path.getBBox(t.realPath=a(t)):n._.box(t.node.getBBox()),n._.box(i.bboxwt)):(t.realPath=a(t),t.matrix=t.transform().localMatrix,i.bbox=n.path.getBBox(n.path.map(t.realPath,r.add(t.matrix))),n._.box(i.bbox))}catch(e){return n._.box()}};var m=function(){return this.string};function y(e,t){if(null==t){var r=!0;if(!(t="linearGradient"==e.type||"radialGradient"==e.type?e.node.getAttribute("gradientTransform"):"pattern"==e.type?e.node.getAttribute("patternTransform"):e.node.getAttribute("transform")))return new n.Matrix;t=n._.svgTransform2string(t)}else t=n._.rgTransform.test(t)?s(t).replace(/\.{3}|\u2026/g,e._.transform||""):n._.svgTransform2string(t),l(t,"array")&&(t=n.path?n.path.toString.call(t):s(t)),e._.transform=t;var o=n._.transform2matrix(t,e.getBBox(1));if(r)return o;e.matrix=o}u.transform=function(e){var t=this._;if(null==e){for(var r,o=this,i=new n.Matrix(this.node.getCTM()),a=y(this),u=[a],l=new n.Matrix,c=a.toTransformString(),d=s(a)==s(this.matrix)?s(t.transform):c;"svg"!=o.type&&(o=o.parent());)u.push(y(o));for(r=u.length;r--;)l.add(u[r]);return{string:d,globalMatrix:i,totalMatrix:l,localMatrix:a,diffMatrix:i.clone().add(a.invert()),global:i.toTransformString(),total:l.toTransformString(),local:c,toString:m}}return e instanceof n.Matrix?(this.matrix=e,this._.transform=e.toTransformString()):y(this,e),this.node&&("linearGradient"==this.type||"radialGradient"==this.type?f(this.node,{gradientTransform:this.matrix}):"pattern"==this.type?f(this.node,{patternTransform:this.matrix}):f(this.node,{transform:this.matrix})),this},u.parent=function(){return h(this.node.parentNode)},u.append=u.add=function(e){if(e){if("set"==e.type){var t=this;return e.forEach(function(e){t.add(e)}),this}e=h(e),this.node.appendChild(e.node),e.paper=this.paper}return this},u.appendTo=function(e){return e&&(e=h(e)).append(this),this},u.prepend=function(e){if(e){if("set"==e.type){var t,n=this;return e.forEach(function(e){t?t.after(e):n.prepend(e),t=e}),this}var r=(e=h(e)).parent();this.node.insertBefore(e.node,this.node.firstChild),this.add&&this.add(),e.paper=this.paper,this.parent()&&this.parent().add(),r&&r.add()}return this},u.prependTo=function(e){return(e=h(e)).prepend(this),this},u.before=function(e){if("set"==e.type){var t=this;return e.forEach(function(e){var n=e.parent();t.node.parentNode.insertBefore(e.node,t.node),n&&n.add()}),this.parent().add(),this}var n=(e=h(e)).parent();return this.node.parentNode.insertBefore(e.node,this.node),this.parent()&&this.parent().add(),n&&n.add(),e.paper=this.paper,this},u.after=function(e){var t=(e=h(e)).parent();return this.node.nextSibling?this.node.parentNode.insertBefore(e.node,this.node.nextSibling):this.node.parentNode.appendChild(e.node),this.parent()&&this.parent().add(),t&&t.add(),e.paper=this.paper,this},u.insertBefore=function(e){e=h(e);var t=this.parent();return e.node.parentNode.insertBefore(this.node,e.node),this.paper=e.paper,t&&t.add(),e.parent()&&e.parent().add(),this},u.insertAfter=function(e){e=h(e);var t=this.parent();return e.node.parentNode.insertBefore(this.node,e.node.nextSibling),this.paper=e.paper,t&&t.add(),e.parent()&&e.parent().add(),this},u.remove=function(){var e=this.parent();return this.node.parentNode&&this.node.parentNode.removeChild(this.node),delete this.paper,this.removed=!0,e&&e.add(),this},u.select=function(e){return h(this.node.querySelector(e))},u.selectAll=function(e){for(var t=this.node.querySelectorAll(e),r=(n.set||Array)(),o=0;o<t.length;o++)r.push(h(t[o]));return r},u.asPX=function(e,t){return null==t&&(t=this.attr(e)),+c(this,e,t)},u.use=function(){var e,t=this.node.id;return t||(t=this.id,f(this.node,{id:t})),e="linearGradient"==this.type||"radialGradient"==this.type||"pattern"==this.type?d(this.type,this.node.parentNode):d("use",this.node.parentNode),f(e.node,{"xlink:href":"#"+t}),e.original=this,e},u.clone=function(){var e=h(this.node.cloneNode(!0));return f(e.node,"id")&&f(e.node,{id:e.id}),function(e){var t,r=e.selectAll("*"),o=/^\s*url\(("|'|)(.*)\1\)\s*$/,i=[],a={};function u(e,t){var r=f(e.node,t);(r=(r=r&&r.match(o))&&r[2])&&"#"==r.charAt()&&(r=r.substring(1))&&(a[r]=(a[r]||[]).concat(function(r){var o={};o[t]=n.url(r),f(e.node,o)}))}function l(e){var t=f(e.node,"xlink:href");t&&"#"==t.charAt()&&(t=t.substring(1))&&(a[t]=(a[t]||[]).concat(function(t){e.attr("xlink:href","#"+t)}))}for(var s=0,c=r.length;s<c;s++){u(t=r[s],"fill"),u(t,"stroke"),u(t,"filter"),u(t,"mask"),u(t,"clip-path"),l(t);var d=f(t.node,"id");d&&(f(t.node,{id:t.id}),i.push({old:d,id:t.id}))}for(s=0,c=i.length;s<c;s++){var p=a[i[s].old];if(p)for(var h=0,m=p.length;h<m;h++)p[h](i[s].id)}}(e),e.insertAfter(this),e},u.toDefs=function(){return p(this).appendChild(this.node),this},u.pattern=u.toPattern=function(e,t,n,r){var o=d("pattern",p(this));return null==e&&(e=this.getBBox()),l(e,"object")&&"x"in e&&(t=e.y,n=e.width,r=e.height,e=e.x),f(o.node,{x:e,y:t,width:n,height:r,patternUnits:"userSpaceOnUse",id:o.id,viewBox:[e,t,n,r].join(" ")}),o.node.appendChild(this.node),o},u.marker=function(e,t,n,r,o,i){var a=d("marker",p(this));return null==e&&(e=this.getBBox()),l(e,"object")&&"x"in e&&(t=e.y,n=e.width,r=e.height,o=e.refX||e.cx,i=e.refY||e.cy,e=e.x),f(a.node,{viewBox:[e,t,n,r].join(" "),markerWidth:n,markerHeight:r,orient:"auto",refX:o||0,refY:i||0,id:a.id}),a.node.appendChild(this.node),a};var v={};function g(e){return function(){var t=e?"<"+this.type:"",n=this.node.attributes,r=this.node.childNodes;if(e)for(var o=0,i=n.length;o<i;o++)t+=" "+n[o].name+'="'+n[o].value.replace(/"/g,'\\"')+'"';if(r.length){for(e&&(t+=">"),o=0,i=r.length;o<i;o++)3==r[o].nodeType?t+=r[o].nodeValue:1==r[o].nodeType&&(t+=h(r[o]).toString());e&&(t+="</"+this.type+">")}else e&&(t+="/>");return t}}u.data=function(e,r){var o=v[this.id]=v[this.id]||{};if(0==arguments.length)return t("snap.data.get."+this.id,this,o,null),o;if(1==arguments.length){if(n.is(e,"object")){for(var i in e)e.hasOwnProperty(i)&&this.data(i,e[i]);return this}return t("snap.data.get."+this.id,this,o[e],e),o[e]}return o[e]=r,t("snap.data.set."+this.id,this,r,e),this},u.removeData=function(e){return null==e?v[this.id]={}:v[this.id]&&delete v[this.id][e],this},u.outerSVG=u.toString=g(1),u.innerSVG=g(),u.toDataURL=function(){if(e&&e.btoa){var t=this.getBBox(),r=n.format('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="{width}" height="{height}" viewBox="{x} {y} {width} {height}">{contents}</svg>',{x:+t.x.toFixed(3),y:+t.y.toFixed(3),width:+t.width.toFixed(3),height:+t.height.toFixed(3),contents:this.outerSVG()});return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(r)))}},a.prototype.select=u.select,a.prototype.selectAll=u.selectAll}),r.plugin(function(e,r,o,i,a){var u=r.prototype,l=e.is,s=String,c="hasOwnProperty";function f(e,t,n){return function(r){var o=r.slice(e,t);return 1==o.length&&(o=o[0]),n?n(o):o}}var d=function(e,t,r,o){"function"!=typeof r||r.length||(o=r,r=n.linear),this.attr=e,this.dur=t,r&&(this.easing=r),o&&(this.callback=o)};e._.Animation=d,e.animation=function(e,t,n,r){return new d(e,t,n,r)},u.inAnim=function(){var e=[];for(var t in this.anims)this.anims[c](t)&&function(t){e.push({anim:new d(t._attrs,t.dur,t.easing,t._callback),mina:t,curStatus:t.status(),status:function(e){return t.status(e)},stop:function(){t.stop()}})}(this.anims[t]);return e},e.animate=function(e,r,o,i,a,u){"function"!=typeof a||a.length||(u=a,a=n.linear);var l=n.time(),s=n(e,r,l,l+i,n.time,o,a);return u&&t.once("mina.finish."+s.id,u),s},u.stop=function(){for(var e=this.inAnim(),t=0,n=e.length;t<n;t++)e[t].stop();return this},u.animate=function(e,r,o,i){"function"!=typeof o||o.length||(i=o,o=n.linear),e instanceof d&&(i=e.callback,o=e.easing,r=e.dur,e=e.attr);var a,u,p,h,m=[],y=[],v={},g=this;for(var b in e)if(e[c](b)){g.equal?(a=(h=g.equal(b,s(e[b]))).from,u=h.to,p=h.f):(a=+g.attr(b),u=+e[b]);var w=l(a,"array")?a.length:1;v[b]=f(m.length,m.length+w,p),m=m.concat(a),y=y.concat(u)}var _=n.time(),x=n(m,y,_,_+r,n.time,function(e){var t={};for(var n in v)v[c](n)&&(t[n]=v[n](e));g.attr(t)},o);return g.anims[x.id]=x,x._attrs=e,x._callback=i,t("snap.animcreated."+g.id,x),t.once("mina.finish."+x.id,function(){t.off("mina.*."+x.id),delete g.anims[x.id],i&&i.call(g)}),t.once("mina.stop."+x.id,function(){t.off("mina.*."+x.id),delete g.anims[x.id]}),g}}),r.plugin(function(e,t,n,r,o){var i=Object.prototype.toString,a=String,u=Math;function l(e,t,n,r,o,a){if(null==t&&"[object SVGMatrix]"==i.call(e))return this.a=e.a,this.b=e.b,this.c=e.c,this.d=e.d,this.e=e.e,void(this.f=e.f);null!=e?(this.a=+e,this.b=+t,this.c=+n,this.d=+r,this.e=+o,this.f=+a):(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0)}!function(t){function n(e){return e[0]*e[0]+e[1]*e[1]}function r(e){var t=u.sqrt(n(e));e[0]&&(e[0]/=t),e[1]&&(e[1]/=t)}t.add=function(e,t,n,r,o,i){if(e&&e instanceof l)return this.add(e.a,e.b,e.c,e.d,e.e,e.f);var a=e*this.a+t*this.c,u=e*this.b+t*this.d;return this.e+=o*this.a+i*this.c,this.f+=o*this.b+i*this.d,this.c=n*this.a+r*this.c,this.d=n*this.b+r*this.d,this.a=a,this.b=u,this},l.prototype.multLeft=function(e,t,n,r,o,i){if(e&&e instanceof l)return this.multLeft(e.a,e.b,e.c,e.d,e.e,e.f);var a=e*this.a+n*this.b,u=e*this.c+n*this.d,s=e*this.e+n*this.f+o;return this.b=t*this.a+r*this.b,this.d=t*this.c+r*this.d,this.f=t*this.e+r*this.f+i,this.a=a,this.c=u,this.e=s,this},t.invert=function(){var e=this,t=e.a*e.d-e.b*e.c;return new l(e.d/t,-e.b/t,-e.c/t,e.a/t,(e.c*e.f-e.d*e.e)/t,(e.b*e.e-e.a*e.f)/t)},t.clone=function(){return new l(this.a,this.b,this.c,this.d,this.e,this.f)},t.translate=function(e,t){return this.e+=e*this.a+t*this.c,this.f+=e*this.b+t*this.d,this},t.scale=function(e,t,n,r){return null==t&&(t=e),(n||r)&&this.translate(n,r),this.a*=e,this.b*=e,this.c*=t,this.d*=t,(n||r)&&this.translate(-n,-r),this},t.rotate=function(t,n,r){t=e.rad(t),n=n||0,r=r||0;var o=+u.cos(t).toFixed(9),i=+u.sin(t).toFixed(9);return this.add(o,i,-i,o,n,r),this.add(1,0,0,1,-n,-r)},t.skewX=function(e){return this.skew(e,0)},t.skewY=function(e){return this.skew(0,e)},t.skew=function(t,n){t=t||0,n=n||0,t=e.rad(t),n=e.rad(n);var r=u.tan(t).toFixed(9),o=u.tan(n).toFixed(9);return this.add(1,o,r,1,0,0)},t.x=function(e,t){return e*this.a+t*this.c+this.e},t.y=function(e,t){return e*this.b+t*this.d+this.f},t.get=function(e){return+this[a.fromCharCode(97+e)].toFixed(4)},t.toString=function(){return"matrix("+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+")"},t.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]},t.determinant=function(){return this.a*this.d-this.b*this.c},t.split=function(){var t={};t.dx=this.e,t.dy=this.f;var o=[[this.a,this.b],[this.c,this.d]];t.scalex=u.sqrt(n(o[0])),r(o[0]),t.shear=o[0][0]*o[1][0]+o[0][1]*o[1][1],o[1]=[o[1][0]-o[0][0]*t.shear,o[1][1]-o[0][1]*t.shear],t.scaley=u.sqrt(n(o[1])),r(o[1]),t.shear/=t.scaley,this.determinant()<0&&(t.scalex=-t.scalex);var i=o[0][1],a=o[1][1];return a<0?(t.rotate=e.deg(u.acos(a)),i<0&&(t.rotate=360-t.rotate)):t.rotate=e.deg(u.asin(i)),t.isSimple=!(+t.shear.toFixed(9)||t.scalex.toFixed(9)!=t.scaley.toFixed(9)&&t.rotate),t.isSuperSimple=!+t.shear.toFixed(9)&&t.scalex.toFixed(9)==t.scaley.toFixed(9)&&!t.rotate,t.noRotation=!+t.shear.toFixed(9)&&!t.rotate,t},t.toTransformString=function(e){var t=e||this.split();return+t.shear.toFixed(9)?"m"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]:(t.scalex=+t.scalex.toFixed(4),t.scaley=+t.scaley.toFixed(4),t.rotate=+t.rotate.toFixed(4),(t.dx||t.dy?"t"+[+t.dx.toFixed(4),+t.dy.toFixed(4)]:"")+(t.rotate?"r"+[+t.rotate.toFixed(4),0,0]:"")+(1!=t.scalex||1!=t.scaley?"s"+[t.scalex,t.scaley,0,0]:""))}}(l.prototype),e.Matrix=l,e.matrix=function(e,t,n,r,o,i){return new l(e,t,n,r,o,i)}}),r.plugin(function(e,n,r,o,i){var a,u=e._.make,l=e._.wrap,s=e.is,c=e._.getSomeDefs,f=/^url\((['"]?)([^)]+)\1\)$/,d=e._.$,p=e.url,h=String,m=e._.separator,y="";function v(r){return function(o){if(t.stop(),o instanceof i&&1==o.node.childNodes.length&&("radialGradient"==o.node.firstChild.tagName||"linearGradient"==o.node.firstChild.tagName||"pattern"==o.node.firstChild.tagName)&&(o=o.node.firstChild,c(this).appendChild(o),o=l(o)),o instanceof n)if("radialGradient"==o.type||"linearGradient"==o.type||"pattern"==o.type){o.node.id||d(o.node,{id:o.id});var a=p(o.node.id)}else a=o.attr(r);else if((a=e.color(o)).error){var u=e(c(this).ownerSVGElement).gradient(o);u?(u.node.id||d(u.node,{id:u.id}),a=p(u.node.id)):a=o}else a=h(a);var s={};s[r]=a,d(this.node,s),this.node.style[r]=y}}e.deurl=function(e){var t=String(e).match(f);return t?t[2]:e},t.on("snap.util.attr.mask",function(e){if(e instanceof n||e instanceof i){if(t.stop(),e instanceof i&&1==e.node.childNodes.length&&(e=e.node.firstChild,c(this).appendChild(e),e=l(e)),"mask"==e.type)var r=e;else(r=u("mask",c(this))).node.appendChild(e.node);!r.node.id&&d(r.node,{id:r.id}),d(this.node,{mask:p(r.id)})}}),a=function(e){if(e instanceof n||e instanceof i){t.stop();for(var r,o=e.node;o;){if("clipPath"===o.nodeName){r=new n(o);break}if("svg"===o.nodeName){r=void 0;break}o=o.parentNode}r||((r=u("clipPath",c(this))).node.appendChild(e.node),!r.node.id&&d(r.node,{id:r.id})),d(this.node,{"clip-path":p(r.node.id||r.id)})}},t.on("snap.util.attr.clip",a),t.on("snap.util.attr.clip-path",a),t.on("snap.util.attr.clipPath",a),t.on("snap.util.attr.fill",v("fill")),t.on("snap.util.attr.stroke",v("stroke"));var g=/^([lr])(?:\(([^)]*)\))?(.*)$/i;function b(e){t.stop(),e==+e&&(e+="px"),this.node.style.fontSize=e}function w(){return t.stop(),this.node.style.fontSize}t.on("snap.util.grad.parse",function(e){var t=(e=h(e)).match(g);if(!t)return null;var n=t[1],r=t[2],o=t[3];1==(r=r.split(/\s*,\s*/).map(function(e){return+e==e?+e:e})).length&&0==r[0]&&(r=[]);var i=(o=(o=o.split("-")).map(function(e){var t={color:(e=e.split(":"))[0]};return e[1]&&(t.offset=parseFloat(e[1])),t})).length,a=0,u=0;function l(e,t){for(var n=(t-a)/(e-u),r=u;r<e;r++)o[r].offset=+(+a+n*(r-u)).toFixed(2);u=e,a=t}i--;for(var s=0;s<i;s++)"offset"in o[s]&&l(s,o[s].offset);return o[i].offset=o[i].offset||100,l(i,o[i].offset),{type:n,params:r,stops:o}}),t.on("snap.util.attr.d",function(n){t.stop(),s(n,"array")&&s(n[0],"array")&&(n=e.path.toString.call(n)),(n=h(n)).match(/[ruo]/i)&&(n=e.path.toAbsolute(n)),d(this.node,{d:n})})(-1),t.on("snap.util.attr.#text",function(e){t.stop(),e=h(e);for(var n=o.doc.createTextNode(e);this.node.firstChild;)this.node.removeChild(this.node.firstChild);this.node.appendChild(n)})(-1),t.on("snap.util.attr.path",function(e){t.stop(),this.attr({d:e})})(-1),t.on("snap.util.attr.class",function(e){t.stop(),this.node.className.baseVal=e})(-1),t.on("snap.util.attr.viewBox",function(e){var n;n=s(e,"object")&&"x"in e?[e.x,e.y,e.width,e.height].join(" "):s(e,"array")?e.join(" "):e,d(this.node,{viewBox:n}),t.stop()})(-1),t.on("snap.util.attr.transform",function(e){this.transform(e),t.stop()})(-1),t.on("snap.util.attr.r",function(e){"rect"==this.type&&(t.stop(),d(this.node,{rx:e,ry:e}))})(-1),t.on("snap.util.attr.textpath",function(e){if(t.stop(),"text"==this.type){var r,o,i;if(!e&&this.textPath){for(o=this.textPath;o.node.firstChild;)this.node.appendChild(o.node.firstChild);return o.remove(),void delete this.textPath}if(s(e,"string")){var a=c(this),u=l(a.parentNode).path(e);a.appendChild(u.node),r=u.id,u.attr({id:r})}else(e=l(e))instanceof n&&((r=e.attr("id"))||(r=e.id,e.attr({id:r})));if(r)if(o=this.textPath,i=this.node,o)o.attr({"xlink:href":"#"+r});else{for(o=d("textPath",{"xlink:href":"#"+r});i.firstChild;)o.appendChild(i.firstChild);i.appendChild(o),this.textPath=l(o)}}})(-1),t.on("snap.util.attr.text",function(e){if("text"==this.type){for(var n=this.node;n.firstChild;)n.removeChild(n.firstChild);for(var r=function e(t){var n=d("tspan");if(s(t,"array"))for(var r=0;r<t.length;r++)n.appendChild(e(t[r]));else n.appendChild(o.doc.createTextNode(t));return n.normalize&&n.normalize(),n}(e);r.firstChild;)n.appendChild(r.firstChild)}t.stop()})(-1),t.on("snap.util.attr.fontSize",b)(-1),t.on("snap.util.attr.font-size",b)(-1),t.on("snap.util.getattr.transform",function(){return t.stop(),this.transform()})(-1),t.on("snap.util.getattr.textpath",function(){return t.stop(),this.textPath})(-1),function(){function n(n){return function(){t.stop();var r=o.doc.defaultView.getComputedStyle(this.node,null).getPropertyValue("marker-"+n);return"none"==r?r:e(o.doc.getElementById(r.match(f)[1]))}}function r(e){return function(n){t.stop();var r="marker"+e.charAt(0).toUpperCase()+e.substring(1);if(""!=n&&n){if("marker"==n.type){var o=n.node.id;return o||d(n.node,{id:n.id}),void(this.node.style[r]=p(o))}}else this.node.style[r]="none"}}t.on("snap.util.getattr.marker-end",n("end"))(-1),t.on("snap.util.getattr.markerEnd",n("end"))(-1),t.on("snap.util.getattr.marker-start",n("start"))(-1),t.on("snap.util.getattr.markerStart",n("start"))(-1),t.on("snap.util.getattr.marker-mid",n("mid"))(-1),t.on("snap.util.getattr.markerMid",n("mid"))(-1),t.on("snap.util.attr.marker-end",r("end"))(-1),t.on("snap.util.attr.markerEnd",r("end"))(-1),t.on("snap.util.attr.marker-start",r("start"))(-1),t.on("snap.util.attr.markerStart",r("start"))(-1),t.on("snap.util.attr.marker-mid",r("mid"))(-1),t.on("snap.util.attr.markerMid",r("mid"))(-1)}(),t.on("snap.util.getattr.r",function(){if("rect"==this.type&&d(this.node,"rx")==d(this.node,"ry"))return t.stop(),d(this.node,"rx")})(-1),t.on("snap.util.getattr.text",function(){if("text"==this.type||"tspan"==this.type){t.stop();var e=function e(t){for(var n=[],r=t.childNodes,o=0,i=r.length;o<i;o++){var a=r[o];3==a.nodeType&&n.push(a.nodeValue),"tspan"==a.tagName&&(1==a.childNodes.length&&3==a.firstChild.nodeType?n.push(a.firstChild.nodeValue):n.push(e(a)))}return n}(this.node);return 1==e.length?e[0]:e}})(-1),t.on("snap.util.getattr.#text",function(){return this.node.textContent})(-1),t.on("snap.util.getattr.fill",function(n){if(!n){t.stop();var r=t("snap.util.getattr.fill",this,!0).firstDefined();return e(e.deurl(r))||r}})(-1),t.on("snap.util.getattr.stroke",function(n){if(!n){t.stop();var r=t("snap.util.getattr.stroke",this,!0).firstDefined();return e(e.deurl(r))||r}})(-1),t.on("snap.util.getattr.viewBox",function(){t.stop();var n=d(this.node,"viewBox");return n?(n=n.split(m),e._.box(+n[0],+n[1],+n[2],+n[3])):void 0})(-1),t.on("snap.util.getattr.points",function(){var e=d(this.node,"points");return t.stop(),e?e.split(m):void 0})(-1),t.on("snap.util.getattr.path",function(){var e=d(this.node,"d");return t.stop(),e})(-1),t.on("snap.util.getattr.class",function(){return this.node.className.baseVal})(-1),t.on("snap.util.getattr.fontSize",w)(-1),t.on("snap.util.getattr.font-size",w)(-1)}),r.plugin(function(e,t,n,r,o){var i=/\S+/g,a=String,u=t.prototype;u.addClass=function(e){var t,n,r,o=a(e||"").match(i)||[],u=this.node,l=u.className.baseVal,s=l.match(i)||[];if(o.length){for(t=0;n=o[t++];)~s.indexOf(n)||s.push(n);l!=(r=s.join(" "))&&(u.className.baseVal=r)}return this},u.removeClass=function(e){var t,n,r,o,u=a(e||"").match(i)||[],l=this.node,s=l.className.baseVal,c=s.match(i)||[];if(c.length){for(t=0;r=u[t++];)~(n=c.indexOf(r))&&c.splice(n,1);s!=(o=c.join(" "))&&(l.className.baseVal=o)}return this},u.hasClass=function(e){return!!~(this.node.className.baseVal.match(i)||[]).indexOf(e)},u.toggleClass=function(e,t){if(null!=t)return t?this.addClass(e):this.removeClass(e);var n,r,o,a,u=(e||"").match(i)||[],l=this.node,s=l.className.baseVal,c=s.match(i)||[];for(n=0;o=u[n++];)~(r=c.indexOf(o))?c.splice(r,1):c.push(o);return s!=(a=c.join(" "))&&(l.className.baseVal=a),this}}),r.plugin(function(e,n,r,o,i){var a={"+":function(e,t){return e+t},"-":function(e,t){return e-t},"/":function(e,t){return e/t},"*":function(e,t){return e*t}},u=String,l=/[a-z]+$/i,s=/^\s*([+\-\/*])\s*=\s*([\d.eE+\-]+)\s*([^\d\s]+)?\s*$/;function c(e){return e}t.on("snap.util.attr",function(e){var n=u(e).match(s);if(n){var r=t.nt(),o=r.substring(r.lastIndexOf(".")+1),i=this.attr(o),c={};t.stop();var f=n[3]||"",d=i.match(l),p=a[n[1]];if(d&&d==f?e=p(parseFloat(i),+n[2]):(i=this.asPX(o),e=p(this.asPX(o),this.asPX(o,n[2]+f))),isNaN(i)||isNaN(e))return;c[o]=e,this.attr(c)}})(-10),t.on("snap.util.equal",function(e,n){var r=u(this.attr(e)||""),o=u(n).match(s);if(o){t.stop();var i=o[3]||"",f=r.match(l),d=a[o[1]];return f&&f==i?{from:parseFloat(r),to:d(parseFloat(r),+o[2]),f:function(e){return function(t){return+t.toFixed(3)+e}}(f)}:{from:r=this.asPX(e),to:d(r,this.asPX(e,o[2]+i)),f:c}}})(-10)}),r.plugin(function(n,r,o,i,a){var u=o.prototype,l=n.is;u.rect=function(e,t,n,r,o,i){var a;return null==i&&(i=o),l(e,"object")&&"[object Object]"==e?a=e:null!=e&&(a={x:e,y:t,width:n,height:r},null!=o&&(a.rx=o,a.ry=i)),this.el("rect",a)},u.circle=function(e,t,n){var r;return l(e,"object")&&"[object Object]"==e?r=e:null!=e&&(r={cx:e,cy:t,r:n}),this.el("circle",r)};var s=function(){function e(){this.parentNode.removeChild(this)}return function(t,n){var r=i.doc.createElement("img"),o=i.doc.body;r.style.cssText="position:absolute;left:-9999em;top:-9999em",r.onload=function(){n.call(r),r.onload=r.onerror=null,o.removeChild(r)},r.onerror=e,o.appendChild(r),r.src=t}}();u.image=function(e,t,r,o,i){var a=this.el("image");if(l(e,"object")&&"src"in e)a.attr(e);else if(null!=e){var u={"xlink:href":e,preserveAspectRatio:"none"};null!=t&&null!=r&&(u.x=t,u.y=r),null!=o&&null!=i?(u.width=o,u.height=i):s(e,function(){n._.$(a.node,{width:this.offsetWidth,height:this.offsetHeight})}),n._.$(a.node,u)}return a},u.ellipse=function(e,t,n,r){var o;return l(e,"object")&&"[object Object]"==e?o=e:null!=e&&(o={cx:e,cy:t,rx:n,ry:r}),this.el("ellipse",o)},u.path=function(e){var t;return l(e,"object")&&!l(e,"array")?t=e:e&&(t={d:e}),this.el("path",t)},u.group=u.g=function(e){var t=this.el("g");return 1==arguments.length&&e&&!e.type?t.attr(e):arguments.length&&t.add(Array.prototype.slice.call(arguments,0)),t},u.svg=function(e,t,n,r,o,i,a,u){var s={};return l(e,"object")&&null==t?s=e:(null!=e&&(s.x=e),null!=t&&(s.y=t),null!=n&&(s.width=n),null!=r&&(s.height=r),null!=o&&null!=i&&null!=a&&null!=u&&(s.viewBox=[o,i,a,u])),this.el("svg",s)},u.mask=function(e){var t=this.el("mask");return 1==arguments.length&&e&&!e.type?t.attr(e):arguments.length&&t.add(Array.prototype.slice.call(arguments,0)),t},u.ptrn=function(e,t,n,r,o,i,a,u){if(l(e,"object"))var s=e;else s={patternUnits:"userSpaceOnUse"},e&&(s.x=e),t&&(s.y=t),null!=n&&(s.width=n),null!=r&&(s.height=r),s.viewBox=null!=o&&null!=i&&null!=a&&null!=u?[o,i,a,u]:[e||0,t||0,n||0,r||0];return this.el("pattern",s)},u.use=function(e){return null!=e?(e instanceof r&&(e.attr("id")||e.attr({id:n._.id(e)}),e=e.attr("id")),"#"==String(e).charAt()&&(e=e.substring(1)),this.el("use",{"xlink:href":"#"+e})):r.prototype.use.call(this)},u.symbol=function(e,t,n,r){var o={};return null!=e&&null!=t&&null!=n&&null!=r&&(o.viewBox=[e,t,n,r]),this.el("symbol",o)},u.text=function(e,t,n){var r={};return l(e,"object")?r=e:null!=e&&(r={x:e,y:t,text:n||""}),this.el("text",r)},u.line=function(e,t,n,r){var o={};return l(e,"object")?o=e:null!=e&&(o={x1:e,x2:n,y1:t,y2:r}),this.el("line",o)},u.polyline=function(e){arguments.length>1&&(e=Array.prototype.slice.call(arguments,0));var t={};return l(e,"object")&&!l(e,"array")?t=e:null!=e&&(t={points:e}),this.el("polyline",t)},u.polygon=function(e){arguments.length>1&&(e=Array.prototype.slice.call(arguments,0));var t={};return l(e,"object")&&!l(e,"array")?t=e:null!=e&&(t={points:e}),this.el("polygon",t)},function(){var r=n._.$;function o(){return this.selectAll("stop")}function i(e,t){var o=r("stop"),i={offset:+t+"%"};e=n.color(e),i["stop-color"]=e.hex,e.opacity<1&&(i["stop-opacity"]=e.opacity),r(o,i);for(var a,u=this.stops(),l=0;l<u.length;l++)if(parseFloat(u[l].attr("offset"))>t){this.node.insertBefore(o,u[l].node),a=!0;break}return a||this.node.appendChild(o),this}function a(){if("linearGradient"==this.type){var e=r(this.node,"x1")||0,t=r(this.node,"x2")||1,o=r(this.node,"y1")||0,i=r(this.node,"y2")||0;return n._.box(e,o,math.abs(t-e),math.abs(i-o))}var a=this.node.cx||.5,u=this.node.cy||.5,l=this.node.r||0;return n._.box(a-l,u-l,2*l,2*l)}function l(e){var r=e,o=this.stops();if("string"==typeof e&&(r=t("snap.util.grad.parse",null,"l(0,0,0,1)"+e).firstDefined().stops),n.is(r,"array")){for(var i=0;i<o.length;i++)if(r[i]){var a=n.color(r[i].color),u={offset:r[i].offset+"%"};u["stop-color"]=a.hex,a.opacity<1&&(u["stop-opacity"]=a.opacity),o[i].attr(u)}else o[i].remove();for(i=o.length;i<r.length;i++)this.addStop(r[i].color,r[i].offset);return this}}function s(e,t,u,s,c){var f=n._.make("linearGradient",e);return f.stops=o,f.addStop=i,f.getBBox=a,f.setStops=l,null!=t&&r(f.node,{x1:t,y1:u,x2:s,y2:c}),f}function c(e,t,u,l,s,c){var f=n._.make("radialGradient",e);return f.stops=o,f.addStop=i,f.getBBox=a,null!=t&&r(f.node,{cx:t,cy:u,r:l}),null!=s&&null!=c&&r(f.node,{fx:s,fy:c}),f}u.gradient=function(e){return function(e,n){var o,i=t("snap.util.grad.parse",null,n).firstDefined();if(!i)return null;i.params.unshift(e),o="l"==i.type.toLowerCase()?s.apply(0,i.params):c.apply(0,i.params),i.type!=i.type.toLowerCase()&&r(o.node,{gradientUnits:"userSpaceOnUse"});for(var a=i.stops,u=a.length,l=0;l<u;l++){var f=a[l];o.addStop(f.color,f.offset)}return o}(this.defs,e)},u.gradientLinear=function(e,t,n,r){return s(this.defs,e,t,n,r)},u.gradientRadial=function(e,t,n,r,o){return c(this.defs,e,t,n,r,o)},u.toString=function(){var e,t=this.node.ownerDocument,r=t.createDocumentFragment(),o=t.createElement("div"),i=this.node.cloneNode(!0);return r.appendChild(o),o.appendChild(i),n._.$(i,{xmlns:"http://www.w3.org/2000/svg"}),e=o.innerHTML,r.removeChild(r.firstChild),e},u.toDataURL=function(){if(e&&e.btoa)return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(this)))},u.clear=function(){for(var e,t=this.node.firstChild;t;)e=t.nextSibling,"defs"!=t.tagName?t.parentNode.removeChild(t):u.clear.call({node:t}),t=e}}()}),r.plugin(function(e,t,n,r){var o=t.prototype,i=e.is,a=e._.clone,u="hasOwnProperty",l=/,?([a-z]),?/gi,s=parseFloat,c=Math,f=c.PI,d=c.min,p=c.max,h=c.pow,m=c.abs;function y(e){var t=y.ps=y.ps||{};return t[e]?t[e].sleep=100:t[e]={sleep:100},setTimeout(function(){for(var n in t)t[u](n)&&n!=e&&(t[n].sleep--,!t[n].sleep&&delete t[n])}),t[e]}function v(e,t,n,r){return null==e&&(e=t=n=r=0),null==t&&(t=e.y,n=e.width,r=e.height,e=e.x),{x:e,y:t,width:n,w:n,height:r,h:r,x2:e+n,y2:t+r,cx:e+n/2,cy:t+r/2,r1:c.min(n,r)/2,r2:c.max(n,r)/2,r0:c.sqrt(n*n+r*r)/2,path:M(e,t,n,r),vb:[e,t,n,r].join(" ")}}function g(){return this.join(",").replace(l,"$1")}function b(e){var t=a(e);return t.toString=g,t}function w(e,t,n,r,o,i,a,u,l){return null==l?j(e,t,n,r,o,i,a,u):E(e,t,n,r,o,i,a,u,function(e,t,n,r,o,i,a,u,l){if(!(l<0||j(e,t,n,r,o,i,a,u)<l)){var s,c=.5,f=1-c;for(s=j(e,t,n,r,o,i,a,u,f);m(s-l)>.01;)c/=2,s=j(e,t,n,r,o,i,a,u,f+=(s<l?1:-1)*c);return f}}(e,t,n,r,o,i,a,u,l))}function _(n,r){function o(e){return+(+e).toFixed(3)}return e._.cacher(function(e,i,a){e instanceof t&&(e=e.attr("d"));for(var u,l,s,c,f,d="",p={},h=0,m=0,y=(e=q(e)).length;m<y;m++){if("M"==(s=e[m])[0])u=+s[1],l=+s[2];else{if(h+(c=w(u,l,s[1],s[2],s[3],s[4],s[5],s[6]))>i){if(r&&!p.start){if(d+=["C"+o((f=w(u,l,s[1],s[2],s[3],s[4],s[5],s[6],i-h)).start.x),o(f.start.y),o(f.m.x),o(f.m.y),o(f.x),o(f.y)],a)return d;p.start=d,d=["M"+o(f.x),o(f.y)+"C"+o(f.n.x),o(f.n.y),o(f.end.x),o(f.end.y),o(s[5]),o(s[6])].join(),h+=c,u=+s[5],l=+s[6];continue}if(!n&&!r)return f=w(u,l,s[1],s[2],s[3],s[4],s[5],s[6],i-h)}h+=c,u=+s[5],l=+s[6]}d+=s.shift()+s}return p.end=d,f=n?h:r?p:E(u,l,s[0],s[1],s[2],s[3],s[4],s[5],1)},null,e._.clone)}var x=_(1),S=_(),C=_(0,1);function E(e,t,n,r,o,i,a,u,l){var s=1-l,d=h(s,3),p=h(s,2),m=l*l,y=m*l,v=e+2*l*(n-e)+m*(o-2*n+e),g=t+2*l*(r-t)+m*(i-2*r+t),b=n+2*l*(o-n)+m*(a-2*o+n),w=r+2*l*(i-r)+m*(u-2*i+r);return{x:d*e+3*p*l*n+3*s*l*l*o+y*a,y:d*t+3*p*l*r+3*s*l*l*i+y*u,m:{x:v,y:g},n:{x:b,y:w},start:{x:s*e+l*n,y:s*t+l*r},end:{x:s*o+l*a,y:s*i+l*u},alpha:90-180*c.atan2(v-b,g-w)/f}}function k(t,n,r,o,i,a,u,l){e.is(t,"array")||(t=[t,n,r,o,i,a,u,l]);var s=$.apply(null,t);return v(s.min.x,s.min.y,s.max.x-s.min.x,s.max.y-s.min.y)}function O(e,t,n){return t>=e.x&&t<=e.x+e.width&&n>=e.y&&n<=e.y+e.height}function P(e,t){return e=v(e),O(t=v(t),e.x,e.y)||O(t,e.x2,e.y)||O(t,e.x,e.y2)||O(t,e.x2,e.y2)||O(e,t.x,t.y)||O(e,t.x2,t.y)||O(e,t.x,t.y2)||O(e,t.x2,t.y2)||(e.x<t.x2&&e.x>t.x||t.x<e.x2&&t.x>e.x)&&(e.y<t.y2&&e.y>t.y||t.y<e.y2&&t.y>e.y)}function T(e,t,n,r,o){return e*(e*(-3*t+9*n-9*r+3*o)+6*t-12*n+6*r)-3*t+3*n}function j(e,t,n,r,o,i,a,u,l){null==l&&(l=1);for(var s=(l=l>1?1:l<0?0:l)/2,f=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],d=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],p=0,h=0;h<12;h++){var m=s*f[h]+s,y=T(m,e,n,o,a),v=T(m,t,r,i,u),g=y*y+v*v;p+=d[h]*c.sqrt(g)}return s*p}function A(e,t,n,r,o,i,a,u){if(!(p(e,n)<d(o,a)||d(e,n)>p(o,a)||p(t,r)<d(i,u)||d(t,r)>p(i,u))){var l=(e-n)*(i-u)-(t-r)*(o-a);if(l){var s=((e*r-t*n)*(o-a)-(e-n)*(o*u-i*a))/l,c=((e*r-t*n)*(i-u)-(t-r)*(o*u-i*a))/l,f=+s.toFixed(2),h=+c.toFixed(2);if(!(f<+d(e,n).toFixed(2)||f>+p(e,n).toFixed(2)||f<+d(o,a).toFixed(2)||f>+p(o,a).toFixed(2)||h<+d(t,r).toFixed(2)||h>+p(t,r).toFixed(2)||h<+d(i,u).toFixed(2)||h>+p(i,u).toFixed(2)))return{x:s,y:c}}}}function R(e,t,n){if(!P(k(e),k(t)))return n?0:[];for(var r=~~(j.apply(0,e)/8),o=~~(j.apply(0,t)/8),i=[],a=[],u={},l=n?0:[],s=0;s<r+1;s++){var c=E.apply(0,e.concat(s/r));i.push({x:c.x,y:c.y,t:s/r})}for(s=0;s<o+1;s++)c=E.apply(0,t.concat(s/o)),a.push({x:c.x,y:c.y,t:s/o});for(s=0;s<r;s++)for(var f=0;f<o;f++){var d=i[s],p=i[s+1],h=a[f],y=a[f+1],v=m(p.x-d.x)<.001?"y":"x",g=m(y.x-h.x)<.001?"y":"x",b=A(d.x,d.y,p.x,p.y,h.x,h.y,y.x,y.y);if(b){if(u[b.x.toFixed(4)]==b.y.toFixed(4))continue;u[b.x.toFixed(4)]=b.y.toFixed(4);var w=d.t+m((b[v]-d[v])/(p[v]-d[v]))*(p.t-d.t),_=h.t+m((b[g]-h[g])/(y[g]-h[g]))*(y.t-h.t);w>=0&&w<=1&&_>=0&&_<=1&&(n?l++:l.push({x:b.x,y:b.y,t1:w,t2:_}))}}return l}function N(e,t,n){e=q(e),t=q(t);for(var r,o,i,a,u,l,s,c,f,d,p=n?0:[],h=0,m=e.length;h<m;h++){var y=e[h];if("M"==y[0])r=u=y[1],o=l=y[2];else{"C"==y[0]?(r=(f=[r,o].concat(y.slice(1)))[6],o=f[7]):(f=[r,o,r,o,u,l,u,l],r=u,o=l);for(var v=0,g=t.length;v<g;v++){var b=t[v];if("M"==b[0])i=s=b[1],a=c=b[2];else{"C"==b[0]?(i=(d=[i,a].concat(b.slice(1)))[6],a=d[7]):(d=[i,a,i,a,s,c,s,c],i=s,a=c);var w=R(f,d,n);if(n)p+=w;else{for(var _=0,x=w.length;_<x;_++)w[_].segment1=h,w[_].segment2=v,w[_].bez1=f,w[_].bez2=d;p=p.concat(w)}}}}}return p}function F(e){var t=y(e);if(t.bbox)return a(t.bbox);if(!e)return v();for(var n,r=0,o=0,i=[],u=[],l=0,s=(e=q(e)).length;l<s;l++)if("M"==(n=e[l])[0])r=n[1],o=n[2],i.push(r),u.push(o);else{var c=$(r,o,n[1],n[2],n[3],n[4],n[5],n[6]);i=i.concat(c.min.x,c.max.x),u=u.concat(c.min.y,c.max.y),r=n[5],o=n[6]}var f=d.apply(0,i),h=d.apply(0,u),m=v(f,h,p.apply(0,i)-f,p.apply(0,u)-h);return t.bbox=a(m),m}function M(e,t,n,r,o){if(o)return[["M",+e+ +o,t],["l",n-2*o,0],["a",o,o,0,0,1,o,o],["l",0,r-2*o],["a",o,o,0,0,1,-o,o],["l",2*o-n,0],["a",o,o,0,0,1,-o,-o],["l",0,2*o-r],["a",o,o,0,0,1,o,-o],["z"]];var i=[["M",e,t],["l",n,0],["l",0,r],["l",-n,0],["z"]];return i.toString=g,i}function L(e,t,n,r,o){if(null==o&&null==r&&(r=n),e=+e,t=+t,n=+n,r=+r,null!=o)var i=Math.PI/180,a=e+n*Math.cos(-r*i),u=e+n*Math.cos(-o*i),l=[["M",a,t+n*Math.sin(-r*i)],["A",n,n,0,+(o-r>180),0,u,t+n*Math.sin(-o*i)]];else l=[["M",e,t],["m",0,-r],["a",n,r,0,1,1,0,2*r],["a",n,r,0,1,1,0,-2*r],["z"]];return l.toString=g,l}var D=e._unit2px,U={path:function(e){return e.attr("path")},circle:function(e){var t=D(e);return L(t.cx,t.cy,t.r)},ellipse:function(e){var t=D(e);return L(t.cx||0,t.cy||0,t.rx,t.ry)},rect:function(e){var t=D(e);return M(t.x||0,t.y||0,t.width,t.height,t.rx,t.ry)},image:function(e){var t=D(e);return M(t.x||0,t.y||0,t.width,t.height)},line:function(e){return"M"+[e.attr("x1")||0,e.attr("y1")||0,e.attr("x2"),e.attr("y2")]},polyline:function(e){return"M"+e.attr("points")},polygon:function(e){return"M"+e.attr("points")+"z"},deflt:function(e){var t=e.node.getBBox();return M(t.x,t.y,t.width,t.height)}};function B(t){var n=y(t);if(n.abs)return b(n.abs);if(i(t,"array")&&i(t&&t[0],"array")||(t=e.parsePathString(t)),!t||!t.length)return[["M",0,0]];var r,o=[],a=0,u=0,l=0,s=0,c=0;"M"==t[0][0]&&(l=a=+t[0][1],s=u=+t[0][2],c++,o[0]=["M",a,u]);for(var f,d,p=3==t.length&&"M"==t[0][0]&&"R"==t[1][0].toUpperCase()&&"Z"==t[2][0].toUpperCase(),h=c,m=t.length;h<m;h++){if(o.push(f=[]),(r=(d=t[h])[0])!=r.toUpperCase())switch(f[0]=r.toUpperCase(),f[0]){case"A":f[1]=d[1],f[2]=d[2],f[3]=d[3],f[4]=d[4],f[5]=d[5],f[6]=+d[6]+a,f[7]=+d[7]+u;break;case"V":f[1]=+d[1]+u;break;case"H":f[1]=+d[1]+a;break;case"R":for(var v=[a,u].concat(d.slice(1)),w=2,_=v.length;w<_;w++)v[w]=+v[w]+a,v[++w]=+v[w]+u;o.pop(),o=o.concat(H(v,p));break;case"O":o.pop(),(v=L(a,u,d[1],d[2])).push(v[0]),o=o.concat(v);break;case"U":o.pop(),o=o.concat(L(a,u,d[1],d[2],d[3])),f=["U"].concat(o[o.length-1].slice(-2));break;case"M":l=+d[1]+a,s=+d[2]+u;default:for(w=1,_=d.length;w<_;w++)f[w]=+d[w]+(w%2?a:u)}else if("R"==r)v=[a,u].concat(d.slice(1)),o.pop(),o=o.concat(H(v,p)),f=["R"].concat(d.slice(-2));else if("O"==r)o.pop(),(v=L(a,u,d[1],d[2])).push(v[0]),o=o.concat(v);else if("U"==r)o.pop(),o=o.concat(L(a,u,d[1],d[2],d[3])),f=["U"].concat(o[o.length-1].slice(-2));else for(var x=0,S=d.length;x<S;x++)f[x]=d[x];if("O"!=(r=r.toUpperCase()))switch(f[0]){case"Z":a=+l,u=+s;break;case"H":a=f[1];break;case"V":u=f[1];break;case"M":l=f[f.length-2],s=f[f.length-1];default:a=f[f.length-2],u=f[f.length-1]}}return o.toString=g,n.abs=b(o),o}function I(e,t,n,r){return[e,t,n,r,n,r]}function z(e,t,n,r,o,i){return[1/3*e+2/3*n,1/3*t+2/3*r,1/3*o+2/3*n,1/3*i+2/3*r,o,i]}function $(e,t,n,r,o,i,a,u){for(var l,s,f,h,y,v,g,b,w=[],_=[[],[]],x=0;x<2;++x)if(0==x?(s=6*e-12*n+6*o,l=-3*e+9*n-9*o+3*a,f=3*n-3*e):(s=6*t-12*r+6*i,l=-3*t+9*r-9*i+3*u,f=3*r-3*t),m(l)<1e-12){if(m(s)<1e-12)continue;0<(h=-f/s)&&h<1&&w.push(h)}else g=s*s-4*f*l,b=c.sqrt(g),g<0||(0<(y=(-s+b)/(2*l))&&y<1&&w.push(y),0<(v=(-s-b)/(2*l))&&v<1&&w.push(v));for(var S,C=w.length,E=C;C--;)S=1-(h=w[C]),_[0][C]=S*S*S*e+3*S*S*h*n+3*S*h*h*o+h*h*h*a,_[1][C]=S*S*S*t+3*S*S*h*r+3*S*h*h*i+h*h*h*u;return _[0][E]=e,_[1][E]=t,_[0][E+1]=a,_[1][E+1]=u,_[0].length=_[1].length=E+2,{min:{x:d.apply(0,_[0]),y:d.apply(0,_[1])},max:{x:p.apply(0,_[0]),y:p.apply(0,_[1])}}}function q(t,n){var r=!n&&y(t);if(!n&&r.curve)return b(r.curve);for(var o=B(t),i=n&&B(n),a={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},u={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},l=function(t,n,r){var o,i;if(!t)return["C",n.x,n.y,n.x,n.y,n.x,n.y];switch(!(t[0]in{T:1,Q:1})&&(n.qx=n.qy=null),t[0]){case"M":n.X=t[1],n.Y=t[2];break;case"A":t=["C"].concat(function t(n,r,o,i,a,u,l,s,d,p){var h,y=120*f/180,v=f/180*(+a||0),g=[],b=e._.cacher(function(e,t,n){return{x:e*c.cos(n)-t*c.sin(n),y:e*c.sin(n)+t*c.cos(n)}});if(!o||!i)return[n,r,s,d,s,d];if(p)P=p[0],T=p[1],k=p[2],O=p[3];else{n=(h=b(n,r,-v)).x,r=h.y,s=(h=b(s,d,-v)).x,d=h.y,c.cos(f/180*a),c.sin(f/180*a);var w=(n-s)/2,_=(r-d)/2,x=w*w/(o*o)+_*_/(i*i);x>1&&(o*=x=c.sqrt(x),i*=x);var S=o*o,C=i*i,E=(u==l?-1:1)*c.sqrt(m((S*C-S*_*_-C*w*w)/(S*_*_+C*w*w))),k=E*o*_/i+(n+s)/2,O=E*-i*w/o+(r+d)/2,P=c.asin(((r-O)/i).toFixed(9)),T=c.asin(((d-O)/i).toFixed(9));P=n<k?f-P:P,T=s<k?f-T:T,P<0&&(P=2*f+P),T<0&&(T=2*f+T),l&&P>T&&(P-=2*f),!l&&T>P&&(T-=2*f)}var j=T-P;if(m(j)>y){var A=T,R=s,N=d;T=P+y*(l&&T>P?1:-1),g=t(s=k+o*c.cos(T),d=O+i*c.sin(T),o,i,a,0,l,R,N,[T,A,k,O])}j=T-P;var F=c.cos(P),M=c.sin(P),L=c.cos(T),D=c.sin(T),U=c.tan(j/4),B=4/3*o*U,I=4/3*i*U,z=[n,r],$=[n+B*M,r-I*F],q=[s+B*D,d-I*L],H=[s,d];if($[0]=2*z[0]-$[0],$[1]=2*z[1]-$[1],p)return[$,q,H].concat(g);for(var V=[],W=0,G=(g=[$,q,H].concat(g).join().split(",")).length;W<G;W++)V[W]=W%2?b(g[W-1],g[W],v).y:b(g[W],g[W+1],v).x;return V}.apply(0,[n.x,n.y].concat(t.slice(1))));break;case"S":"C"==r||"S"==r?(o=2*n.x-n.bx,i=2*n.y-n.by):(o=n.x,i=n.y),t=["C",o,i].concat(t.slice(1));break;case"T":"Q"==r||"T"==r?(n.qx=2*n.x-n.qx,n.qy=2*n.y-n.qy):(n.qx=n.x,n.qy=n.y),t=["C"].concat(z(n.x,n.y,n.qx,n.qy,t[1],t[2]));break;case"Q":n.qx=t[1],n.qy=t[2],t=["C"].concat(z(n.x,n.y,t[1],t[2],t[3],t[4]));break;case"L":t=["C"].concat(I(n.x,n.y,t[1],t[2]));break;case"H":t=["C"].concat(I(n.x,n.y,t[1],n.y));break;case"V":t=["C"].concat(I(n.x,n.y,n.x,t[1]));break;case"Z":t=["C"].concat(I(n.x,n.y,n.X,n.Y))}return t},d=function(e,t){if(e[t].length>7){e[t].shift();for(var n=e[t];n.length;)v[t]="A",i&&(g[t]="A"),e.splice(t++,0,["C"].concat(n.splice(0,6)));e.splice(t,1),S=p(o.length,i&&i.length||0)}},h=function(e,t,n,r,a){e&&t&&"M"==e[a][0]&&"M"!=t[a][0]&&(t.splice(a,0,["M",r.x,r.y]),n.bx=0,n.by=0,n.x=e[a][1],n.y=e[a][2],S=p(o.length,i&&i.length||0))},v=[],g=[],w="",_="",x=0,S=p(o.length,i&&i.length||0);x<S;x++){o[x]&&(w=o[x][0]),"C"!=w&&(v[x]=w,x&&(_=v[x-1])),o[x]=l(o[x],a,_),"A"!=v[x]&&"C"==w&&(v[x]="C"),d(o,x),i&&(i[x]&&(w=i[x][0]),"C"!=w&&(g[x]=w,x&&(_=g[x-1])),i[x]=l(i[x],u,_),"A"!=g[x]&&"C"==w&&(g[x]="C"),d(i,x)),h(o,i,a,u,x),h(i,o,u,a,x);var C=o[x],E=i&&i[x],k=C.length,O=i&&E.length;a.x=C[k-2],a.y=C[k-1],a.bx=s(C[k-4])||a.x,a.by=s(C[k-3])||a.y,u.bx=i&&(s(E[O-4])||u.x),u.by=i&&(s(E[O-3])||u.y),u.x=i&&E[O-2],u.y=i&&E[O-1]}return i||(r.curve=b(o)),i?[o,i]:o}function H(e,t){for(var n=[],r=0,o=e.length;o-2*!t>r;r+=2){var i=[{x:+e[r-2],y:+e[r-1]},{x:+e[r],y:+e[r+1]},{x:+e[r+2],y:+e[r+3]},{x:+e[r+4],y:+e[r+5]}];t?r?o-4==r?i[3]={x:+e[0],y:+e[1]}:o-2==r&&(i[2]={x:+e[0],y:+e[1]},i[3]={x:+e[2],y:+e[3]}):i[0]={x:+e[o-2],y:+e[o-1]}:o-4==r?i[3]=i[2]:r||(i[0]={x:+e[r],y:+e[r+1]}),n.push(["C",(-i[0].x+6*i[1].x+i[2].x)/6,(-i[0].y+6*i[1].y+i[2].y)/6,(i[1].x+6*i[2].x-i[3].x)/6,(i[1].y+6*i[2].y-i[3].y)/6,i[2].x,i[2].y])}return n}e.path=y,e.path.getTotalLength=x,e.path.getPointAtLength=S,e.path.getSubpath=function(e,t,n){if(this.getTotalLength(e)-n<1e-6)return C(e,t).end;var r=C(e,n,1);return t?C(r,t).end:r},o.getTotalLength=function(){if(this.node.getTotalLength)return this.node.getTotalLength()},o.getPointAtLength=function(e){return S(this.attr("d"),e)},o.getSubpath=function(t,n){return e.path.getSubpath(this.attr("d"),t,n)},e._.box=v,e.path.findDotsAtSegment=E,e.path.bezierBBox=k,e.path.isPointInsideBBox=O,e.closest=function(t,n,r,o){for(var i=100,a=v(t-i/2,n-i/2,i,i),u=[],l=r[0].hasOwnProperty("x")?function(e){return{x:r[e].x,y:r[e].y}}:function(e){return{x:r[e],y:o[e]}},s=0;i<=1e6&&!s;){for(var c=0,f=r.length;c<f;c++){var d=l(c);if(O(a,d.x,d.y)){s++,u.push(d);break}}s||(a=v(t-(i*=2)/2,n-i/2,i,i))}if(1e6!=i){var p,h=1/0;for(c=0,f=u.length;c<f;c++){var m=e.len(t,n,u[c].x,u[c].y);h>m&&(h=m,u[c].len=m,p=u[c])}return p}},e.path.isBBoxIntersect=P,e.path.intersection=function(e,t){return N(e,t)},e.path.intersectionNumber=function(e,t){return N(e,t,1)},e.path.isPointInside=function(e,t,n){var r=F(e);return O(r,t,n)&&N(e,[["M",t,n],["H",r.x2+10]],1)%2==1},e.path.getBBox=F,e.path.get=U,e.path.toRelative=function(t){var n=y(t),r=String.prototype.toLowerCase;if(n.rel)return b(n.rel);e.is(t,"array")&&e.is(t&&t[0],"array")||(t=e.parsePathString(t));var o=[],i=0,a=0,u=0,l=0,s=0;"M"==t[0][0]&&(u=i=t[0][1],l=a=t[0][2],s++,o.push(["M",i,a]));for(var c=s,f=t.length;c<f;c++){var d=o[c]=[],p=t[c];if(p[0]!=r.call(p[0]))switch(d[0]=r.call(p[0]),d[0]){case"a":d[1]=p[1],d[2]=p[2],d[3]=p[3],d[4]=p[4],d[5]=p[5],d[6]=+(p[6]-i).toFixed(3),d[7]=+(p[7]-a).toFixed(3);break;case"v":d[1]=+(p[1]-a).toFixed(3);break;case"m":u=p[1],l=p[2];default:for(var h=1,m=p.length;h<m;h++)d[h]=+(p[h]-(h%2?i:a)).toFixed(3)}else{d=o[c]=[],"m"==p[0]&&(u=p[1]+i,l=p[2]+a);for(var v=0,w=p.length;v<w;v++)o[c][v]=p[v]}var _=o[c].length;switch(o[c][0]){case"z":i=u,a=l;break;case"h":i+=+o[c][_-1];break;case"v":a+=+o[c][_-1];break;default:i+=+o[c][_-2],a+=+o[c][_-1]}}return o.toString=g,n.rel=b(o),o},e.path.toAbsolute=B,e.path.toCubic=q,e.path.map=function(e,t){if(!t)return e;var n,r,o,i,a,u,l;for(o=0,a=(e=q(e)).length;o<a;o++)for(i=1,u=(l=e[o]).length;i<u;i+=2)n=t.x(l[i],l[i+1]),r=t.y(l[i],l[i+1]),l[i]=n,l[i+1]=r;return e},e.path.toString=g,e.path.clone=b}),r.plugin(function(e,r,o,i){var a=Math.max,u=Math.min,l=function(e){if(this.items=[],this.bindings={},this.length=0,this.type="set",e)for(var t=0,n=e.length;t<n;t++)e[t]&&(this[this.items.length]=this.items[this.items.length]=e[t],this.length++)},s=l.prototype;s.push=function(){for(var e,t,n=0,r=arguments.length;n<r;n++)(e=arguments[n])&&(this[t=this.items.length]=this.items[t]=e,this.length++);return this},s.pop=function(){return this.length&&delete this[this.length--],this.items.pop()},s.forEach=function(e,t){for(var n=0,r=this.items.length;n<r;n++)if(!1===e.call(t,this.items[n],n))return this;return this},s.animate=function(r,o,i,a){"function"!=typeof i||i.length||(a=i,i=n.linear),r instanceof e._.Animation&&(a=r.callback,i=r.easing,o=i.dur,r=r.attr);var u=arguments;if(e.is(r,"array")&&e.is(u[u.length-1],"array"))var l=!0;var s,c=function(){s?this.b=s:s=this.b},f=0,d=this,p=a&&function(){++f==d.length&&a.call(this)};return this.forEach(function(e,n){t.once("snap.animcreated."+e.id,c),l?u[n]&&e.animate.apply(e,u[n]):e.animate(r,o,i,p)})},s.remove=function(){for(;this.length;)this.pop().remove();return this},s.bind=function(e,t,n){var r={};if("function"==typeof t)this.bindings[e]=t;else{var o=n||e;this.bindings[e]=function(e){r[o]=e,t.attr(r)}}return this},s.attr=function(e){var t={};for(var n in e)this.bindings[n]?this.bindings[n](e[n]):t[n]=e[n];for(var r=0,o=this.items.length;r<o;r++)this.items[r].attr(t);return this},s.clear=function(){for(;this.length;)this.pop()},s.splice=function(e,t,n){e=e<0?a(this.length+e,0):e,t=a(0,u(this.length-e,t));var r,o=[],i=[],s=[];for(r=2;r<arguments.length;r++)s.push(arguments[r]);for(r=0;r<t;r++)i.push(this[e+r]);for(;r<this.length-e;r++)o.push(this[e+r]);var c=s.length;for(r=0;r<c+o.length;r++)this.items[e+r]=this[e+r]=r<c?s[r]:o[r-c];for(r=this.items.length=this.length-=t-c;this[r];)delete this[r++];return new l(i)},s.exclude=function(e){for(var t=0,n=this.length;t<n;t++)if(this[t]==e)return this.splice(t,1),!0;return!1},s.insertAfter=function(e){for(var t=this.items.length;t--;)this.items[t].insertAfter(e);return this},s.getBBox=function(){for(var e=[],t=[],n=[],r=[],o=this.items.length;o--;)if(!this.items[o].removed){var i=this.items[o].getBBox();e.push(i.x),t.push(i.y),n.push(i.x+i.width),r.push(i.y+i.height)}return{x:e=u.apply(0,e),y:t=u.apply(0,t),x2:n=a.apply(0,n),y2:r=a.apply(0,r),width:n-e,height:r-t,cx:e+(n-e)/2,cy:t+(r-t)/2}},s.clone=function(e){e=new l;for(var t=0,n=this.items.length;t<n;t++)e.push(this.items[t].clone());return e},s.toString=function(){return"Snap‘s set"},s.type="set",e.Set=l,e.set=function(){var e=new l;return arguments.length&&e.push.apply(e,Array.prototype.slice.call(arguments,0)),e}}),r.plugin(function(e,n,r,o){var i={},a=/[%a-z]+$/i,u=String;function l(e){var t=e[0];switch(t.toLowerCase()){case"t":return[t,0,0];case"m":return[t,1,0,0,1,0,0];case"r":return 4==e.length?[t,0,e[2],e[3]]:[t,0];case"s":return 5==e.length?[t,1,1,e[3],e[4]]:3==e.length?[t,1,1]:[t,1]}}function s(e){return e}function c(e){return e.join(" ")}function f(t){return e.rgb(t[0],t[1],t[2],t[3])}function d(e){var t,n,r,o,i,a,u=0,l=[];for(t=0,n=e.length;t<n;t++){for(i="[",a=['"'+e[t][0]+'"'],r=1,o=e[t].length;r<o;r++)a[r]="val["+u+++"]";i+=a+"]",l[t]=i}return Function("val","return Snap.path.toString.call(["+l+"])")}function p(e){for(var t=[],n=0,r=e.length;n<r;n++)for(var o=1,i=e[n].length;o<i;o++)t.push(e[n][o]);return t}function h(e){return isFinite(e)}i.stroke=i.fill="colour",n.prototype.equal=function(e,n){return t("snap.util.equal",this,e,n).firstDefined()},t.on("snap.util.equal",function(t,n){var r,o,m=u(this.attr(t)||""),y=this;if("colour"==i[t])return r=e.color(m),o=e.color(n),{from:[r.r,r.g,r.b,r.opacity],to:[o.r,o.g,o.b,o.opacity],f:f};if("viewBox"==t)return{from:r=this.attr(t).vb.split(" ").map(Number),to:o=n.split(" ").map(Number),f:c};if("transform"==t||"gradientTransform"==t||"patternTransform"==t)return"string"==typeof n&&(n=u(n).replace(/\.{3}|\u2026/g,m)),function(t,n,r){t=t||new e.Matrix,n=n||new e.Matrix,t=e.parseTransformString(t.toTransformString())||[],n=e.parseTransformString(n.toTransformString())||[];for(var o,i,a,u,s=Math.max(t.length,n.length),c=[],f=[],h=0;h<s;h++){if(a=t[h]||l(n[h]),u=n[h]||l(a),a[0]!=u[0]||"r"==a[0].toLowerCase()&&(a[2]!=u[2]||a[3]!=u[3])||"s"==a[0].toLowerCase()&&(a[3]!=u[3]||a[4]!=u[4])){t=e._.transform2matrix(t,r()),n=e._.transform2matrix(n,r()),c=[["m",t.a,t.b,t.c,t.d,t.e,t.f]],f=[["m",n.a,n.b,n.c,n.d,n.e,n.f]];break}for(c[h]=[],f[h]=[],o=0,i=Math.max(a.length,u.length);o<i;o++)o in a&&(c[h][o]=a[o]),o in u&&(f[h][o]=u[o])}return{from:p(c),to:p(f),f:d(c)}}(m=this.matrix,n=e._.rgTransform.test(n)?e._.transform2matrix(n,this.getBBox()):e._.transform2matrix(e._.svgTransform2string(n),this.getBBox()),function(){return y.getBBox(1)});if("d"==t||"path"==t)return{from:p((r=e.path.toCubic(m,n))[0]),to:p(r[1]),f:d(r[0])};if("points"==t)return{from:r=u(m).split(e._.separator),to:o=u(n).split(e._.separator),f:function(e){return e}};if(h(m)&&h(n))return{from:parseFloat(m),to:parseFloat(n),f:s};var v,g,b,w=m.match(a),_=u(n).match(a);return w&&(g=w,b=_,e.is(g,"array")&&e.is(b,"array")&&g.toString()==b.toString())?{from:parseFloat(m),to:parseFloat(n),f:(v=w,function(e){return+e.toFixed(3)+v})}:{from:this.asPX(t),to:this.asPX(t,n),f:s}})}),r.plugin(function(e,n,r,o){for(var i=n.prototype,a=("createTouch"in o.doc),u=["click","dblclick","mousedown","mousemove","mouseout","mouseover","mouseup","touchstart","touchmove","touchend","touchcancel"],l={mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},s=function(e,t){var n="y"==e?"scrollTop":"scrollLeft",r=t&&t.node?t.node.ownerDocument:o.doc;return r[n in r.documentElement?"documentElement":"body"][n]},c=function(){return this.originalEvent.preventDefault()},f=function(){return this.originalEvent.stopPropagation()},d=function(e,t,n,r){var o=a&&l[t]?l[t]:t,i=function(o){var i=s("y",r),u=s("x",r);if(a&&l.hasOwnProperty(t))for(var d=0,p=o.targetTouches&&o.targetTouches.length;d<p;d++)if(o.targetTouches[d].target==e||e.contains(o.targetTouches[d].target)){var h=o;(o=o.targetTouches[d]).originalEvent=h,o.preventDefault=c,o.stopPropagation=f;break}var m=o.clientX+u,y=o.clientY+i;return n.call(r,o,m,y)};return t!==o&&e.addEventListener(t,i,!1),e.addEventListener(o,i,!1),function(){return t!==o&&e.removeEventListener(t,i,!1),e.removeEventListener(o,i,!1),!0}},p=[],h=function(e){for(var n,r=e.clientX,o=e.clientY,i=s("y"),u=s("x"),l=p.length;l--;){if(n=p[l],a){for(var c,f=e.touches&&e.touches.length;f--;)if((c=e.touches[f]).identifier==n.el._drag.id||n.el.node.contains(c.target)){r=c.clientX,o=c.clientY,(e.originalEvent?e.originalEvent:e).preventDefault();break}}else e.preventDefault();var d=n.el.node;d.nextSibling,d.parentNode,d.style.display,r+=u,o+=i,t("snap.drag.move."+n.el.id,n.move_scope||n.el,r-n.el._drag.x,o-n.el._drag.y,r,o,e)}},m=function n(r){e.unmousemove(h).unmouseup(n);for(var o,i=p.length;i--;)(o=p[i]).el._drag={},t("snap.drag.end."+o.el.id,o.end_scope||o.start_scope||o.move_scope||o.el,r),t.off("snap.drag.*."+o.el.id);p=[]},y=u.length;y--;)!function(t){e[t]=i[t]=function(n,r){if(e.is(n,"function"))this.events=this.events||[],this.events.push({name:t,f:n,unbind:d(this.node||document,t,n,r||this)});else for(var o=0,i=this.events.length;o<i;o++)if(this.events[o].name==t)try{this.events[o].f.call(this)}catch(e){}return this},e["un"+t]=i["un"+t]=function(e){for(var n=this.events||[],r=n.length;r--;)if(n[r].name==t&&(n[r].f==e||!e))return n[r].unbind(),n.splice(r,1),!n.length&&delete this.events,this;return this}}(u[y]);i.hover=function(e,t,n,r){return this.mouseover(e,n).mouseout(t,r||n)},i.unhover=function(e,t){return this.unmouseover(e).unmouseout(t)};var v=[];i.drag=function(n,r,o,i,a,u){var l,s=this;if(!arguments.length)return s.drag(function(e,t){this.attr({transform:l+(l?"T":"t")+[e,t]})},function(){l=this.transform().local});function c(l,c,f){(l.originalEvent||l).preventDefault(),s._drag.x=c,s._drag.y=f,s._drag.id=l.identifier,!p.length&&e.mousemove(h).mouseup(m),p.push({el:s,move_scope:i,start_scope:a,end_scope:u}),r&&t.on("snap.drag.start."+s.id,r),n&&t.on("snap.drag.move."+s.id,n),o&&t.on("snap.drag.end."+s.id,o),t("snap.drag.start."+s.id,a||i||s,c,f,l)}function f(e,n,r){t("snap.draginit."+s.id,s,e,n,r)}return t.on("snap.draginit."+s.id,c),s._drag={},v.push({el:s,start:c,init:f}),s.mousedown(f),s},i.undrag=function(){for(var n=v.length;n--;)v[n].el==this&&(this.unmousedown(v[n].init),v.splice(n,1),t.unbind("snap.drag.*."+this.id),t.unbind("snap.draginit."+this.id));return!v.length&&e.unmousemove(h).unmouseup(m),this}}),r.plugin(function(e,n,r,o){n.prototype;var i=r.prototype,a=/^\s*url\((.+)\)/,u=String,l=e._.$;e.filter={},i.filter=function(t){var r=this;"svg"!=r.type&&(r=r.paper);var o=e.parse(u(t)),i=e._.id(),a=(r.node.offsetWidth,r.node.offsetHeight,l("filter"));return l(a,{id:i,filterUnits:"userSpaceOnUse"}),a.appendChild(o.node),r.defs.appendChild(a),new n(a)},t.on("snap.util.getattr.filter",function(){t.stop();var n=l(this.node,"filter");if(n){var r=u(n).match(a);return r&&e.select(r[1])}}),t.on("snap.util.attr.filter",function(r){if(r instanceof n&&"filter"==r.type){t.stop();var o=r.node.id;o||(l(r.node,{id:r.id}),o=r.id),l(this.node,{filter:e.url(o)})}r&&"none"!=r||(t.stop(),this.node.removeAttribute("filter"))}),e.filter.blur=function(t,n){null==t&&(t=2);var r=null==n?t:[t,n];return e.format('<feGaussianBlur stdDeviation="{def}"/>',{def:r})},e.filter.blur.toString=function(){return this()},e.filter.shadow=function(t,n,r,o,i){return null==i&&(null==o?(i=r,r=4,o="#000"):(i=o,o=r,r=4)),null==r&&(r=4),null==i&&(i=1),null==t&&(t=0,n=2),null==n&&(n=t),o=e.color(o),e.format('<feGaussianBlur in="SourceAlpha" stdDeviation="{blur}"/><feOffset dx="{dx}" dy="{dy}" result="offsetblur"/><feFlood flood-color="{color}"/><feComposite in2="offsetblur" operator="in"/><feComponentTransfer><feFuncA type="linear" slope="{opacity}"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge>',{color:o,dx:t,dy:n,blur:r,opacity:i})},e.filter.shadow.toString=function(){return this()},e.filter.grayscale=function(t){return null==t&&(t=1),e.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0"/>',{a:.2126+.7874*(1-t),b:.7152-.7152*(1-t),c:.0722-.0722*(1-t),d:.2126-.2126*(1-t),e:.7152+.2848*(1-t),f:.0722-.0722*(1-t),g:.2126-.2126*(1-t),h:.0722+.9278*(1-t)})},e.filter.grayscale.toString=function(){return this()},e.filter.sepia=function(t){return null==t&&(t=1),e.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0"/>',{a:.393+.607*(1-t),b:.769-.769*(1-t),c:.189-.189*(1-t),d:.349-.349*(1-t),e:.686+.314*(1-t),f:.168-.168*(1-t),g:.272-.272*(1-t),h:.534-.534*(1-t),i:.131+.869*(1-t)})},e.filter.sepia.toString=function(){return this()},e.filter.saturate=function(t){return null==t&&(t=1),e.format('<feColorMatrix type="saturate" values="{amount}"/>',{amount:1-t})},e.filter.saturate.toString=function(){return this()},e.filter.hueRotate=function(t){return t=t||0,e.format('<feColorMatrix type="hueRotate" values="{angle}"/>',{angle:t})},e.filter.hueRotate.toString=function(){return this()},e.filter.invert=function(t){return null==t&&(t=1),e.format('<feComponentTransfer><feFuncR type="table" tableValues="{amount} {amount2}"/><feFuncG type="table" tableValues="{amount} {amount2}"/><feFuncB type="table" tableValues="{amount} {amount2}"/></feComponentTransfer>',{amount:t,amount2:1-t})},e.filter.invert.toString=function(){return this()},e.filter.brightness=function(t){return null==t&&(t=1),e.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}"/><feFuncG type="linear" slope="{amount}"/><feFuncB type="linear" slope="{amount}"/></feComponentTransfer>',{amount:t})},e.filter.brightness.toString=function(){return this()},e.filter.contrast=function(t){return null==t&&(t=1),e.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}" intercept="{amount2}"/><feFuncG type="linear" slope="{amount}" intercept="{amount2}"/><feFuncB type="linear" slope="{amount}" intercept="{amount2}"/></feComponentTransfer>',{amount:t,amount2:.5-t/2})},e.filter.contrast.toString=function(){return this()}}),r.plugin(function(e,t,n,r,o){var i=e._.box,a=e.is,u=/^[^a-z]*([tbmlrc])/i,l=function(){return"T"+this.dx+","+this.dy};t.prototype.getAlign=function(e,t){null==t&&a(e,"string")&&(t=e,e=null);var n=(e=e||this.paper).getBBox?e.getBBox():i(e),r=this.getBBox(),o={};switch(t=(t=t&&t.match(u))?t[1].toLowerCase():"c"){case"t":o.dx=0,o.dy=n.y-r.y;break;case"b":o.dx=0,o.dy=n.y2-r.y2;break;case"m":o.dx=0,o.dy=n.cy-r.cy;break;case"l":o.dx=n.x-r.x,o.dy=0;break;case"r":o.dx=n.x2-r.x2,o.dy=0;break;default:o.dx=n.cx-r.cx,o.dy=0}return o.toString=l,o},t.prototype.align=function(e,t){return this.transform("..."+this.getAlign(e,t))}}),r.plugin(function(t,n,r,o){function i(e){e=e.split(/(?=#)/);var t=new String(e[5]);return t[50]=e[0],t[100]=e[1],t[200]=e[2],t[300]=e[3],t[400]=e[4],t[500]=e[5],t[600]=e[6],t[700]=e[7],t[800]=e[8],t[900]=e[9],e[10]&&(t.A100=e[10],t.A200=e[11],t.A400=e[12],t.A700=e[13]),t}t.mui={},t.flat={},t.mui.red=i("#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000"),t.mui.pink=i("#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162"),t.mui.purple=i("#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF"),t.mui.deeppurple=i("#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA"),t.mui.indigo=i("#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE"),t.mui.blue=i("#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF"),t.mui.lightblue=i("#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA"),t.mui.cyan=i("#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4"),t.mui.teal=i("#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5"),t.mui.green=i("#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853"),t.mui.lightgreen=i("#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17"),t.mui.lime=i("#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00"),t.mui.yellow=i("#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600"),t.mui.amber=i("#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00"),t.mui.orange=i("#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00"),t.mui.deeporange=i("#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00"),t.mui.brown=i("#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723"),t.mui.grey=i("#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121"),t.mui.bluegrey=i("#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238"),t.flat.turquoise="#1abc9c",t.flat.greensea="#16a085",t.flat.sunflower="#f1c40f",t.flat.orange="#f39c12",t.flat.emerland="#2ecc71",t.flat.nephritis="#27ae60",t.flat.carrot="#e67e22",t.flat.pumpkin="#d35400",t.flat.peterriver="#3498db",t.flat.belizehole="#2980b9",t.flat.alizarin="#e74c3c",t.flat.pomegranate="#c0392b",t.flat.amethyst="#9b59b6",t.flat.wisteria="#8e44ad",t.flat.clouds="#ecf0f1",t.flat.silver="#bdc3c7",t.flat.wetasphalt="#34495e",t.flat.midnightblue="#2c3e50",t.flat.concrete="#95a5a6",t.flat.asbestos="#7f8c8d",t.importMUIColors=function(){for(var n in t.mui)t.mui.hasOwnProperty(n)&&(e[n]=t.mui[n])}}),r}(y,e)}.apply(t,[r]))||(e.exports=o)}).call(window)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=n(40),i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);n=n||{},this.snp=new o(t),this.animationState=0,this.container=t,this.init(n),this.animateTravelingWave()}return r(e,[{key:"init",value:function(e){var t=this;this.numSegments=void 0!==e.numSegments?e.numSegments:20,this.segmentWidth=this.container.clientWidth/this.numSegments,this.segments=[],this.driver={x:0,y:0,v:void 0!==e.velocity?e.velocity:void 0!==e.v?e.v:.5},this.waveHeight=void 0!==e.waveHeight?e.waveHeight:400,this.primaryHue=void 0!==e.primaryHue?e.primaryHue:210,this.maxOpacity=void 0!==e.maxOpacity?e.maxOpacity:1,this.centralAxis=void 0!==e.centralAxis?e.centralAxis:this.container.clientHeight/2,this.segments=function(){for(var e=[],n=0;n<t.numSegments;n++){var r=n*t.segmentWidth,o=t.centralAxis/2+Math.sin(r/200)*t.container.clientHeight/2,i=t.snp.rect(r,o,t.segmentWidth,0);i.attr({fill:"hsl("+t.primaryHue+", 100, 50)",opacity:0}),i.isAvailable=!0,i.ox=r,i.oy=o,e.push(i)}return e}(),t.setAnimationState(1),t.runAnimationDriver()}},{key:"resetWavePath",value:function(e){var t=this;(e=e||{}).minFreq=void 0!==e.minFreq?e.minFreq:0,e.maxFreq=void 0!==e.maxFreq?e.maxFreq:200,e.minAmp=void 0!==e.minAmp?e.minAmp:0,e.maxAmp=void 0!==e.maxAmp?e.maxAmp:t.container.clientHeight/2;var n=Math.random()*(e.maxFreq-e.minFreq)+e.minFreq;n=Math.ceil(n);var r=Math.random()*(e.maxAmp-e.minAmp)+e.minAmp;r=Math.floor(r),this.segments.forEach(function(e){e.oy=t.centralAxis+Math.sin(e.ox/n)*r})}},{key:"runAnimationDriver",value:function(){var e=this,t=!0,n=void 0,r=void 0;t?(e.driver.x=Date.now()%(e.container.clientWidth/e.driver.v)*e.driver.v,e.draw(),e.driver.x>e.container.clientWidth-5&&(t=!1,r=Math.floor(5e3*Math.random()),n=Date.now(),e.resetWavePath())):Date.now()>n+r&&(t=!0),window.requestAnimationFrame(function(){e.runAnimationDriver()})}},{key:"draw",value:function(){switch(this.animationState){case 0:break;case 1:this.animateTravelingWave();break;case 2:this.animateShimmer()}}},{key:"setAnimationState",value:function(e){switch(e){case 1:this.setAllAvailable(!0),this.setAllOpacity(0);break;case 2:this.setAllAvailable(!0),this.lineUpHorizontally(0,this.container.clientHeight)}this.animationState=e}},{key:"setAllAvailable",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.segments.forEach(function(t){t.isAvailable=e})}},{key:"setAllOpacity",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;this.segments.forEach(function(t){t.attr({opacity:e})})}},{key:"animateTravelingWave",value:function(){var e=this;e.segments.forEach(function(t){t.isAvailable&&Math.abs(e.driver.x-t.attr().x)<10&&(t.attr({y:t.oy}),function(t){t.isAvailable=!1,t.animate({height:e.waveHeight,y:t.oy-e.waveHeight/2,opacity:e.maxOpacity},500,mina.easein,function(){!function(e){e.animate({height:0,y:e.oy,opacity:0},1e3,mina.easeout,function(){e.isAvailable=!0})}(t)})}(t))})}},{key:"lineUpHorizontally",value:function(e,t){var n=this;e=void 0!==e?e:0,t=void 0!==t?t:1,n.segments.forEach(function(r){r.stop(),r.oy=e,r.oheight=t,r.animate({y:r.oy,height:r.oheight,opacity:n.maxOpacity},1e3,mina.elastic)})}},{key:"animateRain",value:function(){var e=this;e.segments.forEach(function(t){t.isAvailable&&e.driver.x>t.attr().x&&function(t){t.isAvailable=!1,t.animate({y:e.container.clientHeight,height:100,opacity:0},5e3*Math.random()+2e3,mina.easeout,function(){t.attr({y:t.oheight,opacity:.1,height:t.oheight}),t.isAvailable=!0})}(t)})}},{key:"animateShimmer",value:function(){var e=this;e.segments.forEach(function(t){t.isAvailable&&Math.abs(e.driver.x-t.attr().x)<10&&(t.isAvailable=!1,function(e){e.animate({opacity:.01},1e3,mina.linear,function(){!function(e){e.animate({opacity:.2},1e3,mina.linear,function(){e.isAvailable=!0})}(e)})}(t))})}}]),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(0)),i=a(n(41));function a(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.initComponent=n.initComponent.bind(n),n.state={animationComponents:[]},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"initComponent",value:function(e){var t=this,n={maxOpacity:.1,primaryHue:Math.floor(255*Math.random()),centralAxis:100};this.setState({animationComponents:[new i.default(e,n),new i.default(e,n)]}),window.addEventListener("resize",function(){window.requestAnimationFrame(function(){t.state.animationComponents.forEach(function(e){e.init(n)})})})}},{key:"render",value:function(){var e=this.state.animationComponents;return this.props.applicationState===ApplicationStateTypes.SEARCH_RESULT&&e.forEach(function(e){e.setAnimationState(2)}),o.default.createElement("svg",{ref:this.initComponent,style:{position:"absolute",left:0,right:0,width:"100%",height:"100%",overflow:"hidden",zIndex:-1e3}})}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=c(n(0)),l=c(n(24)),s=c(n(1));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={collectionName:"",collectionEntries:[{artist:{}}]},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.location.search!==e.location.search&&this.getData(e.location.search),!0}},{key:"componentDidMount",value:function(){this.getData(this.props.location.search)}},{key:"getData",value:function(e){var t=this;if(null!==e&&void 0!==e&&""!==e){var n=/\?username=(.*)&collectionName=(.*)/.exec(e),r=n[1],o=n[2];this.setState({collectionName:o}),s.default.getArtistCollection(r,o).then(function(e){t.setState({collectionEntries:e})})}}},{key:"render",value:function(){var e=this;return i("div",{className:"viewer collection-viewer"},void 0,i("div",{className:"panel"},void 0,i("h1",{},void 0," ",this.state.collectionName," "),i("ul",{},void 0,null!==this.state.collectionEntries&&void 0!==this.state.collectionEntries&&this.state.collectionEntries.length>0?this.state.collectionEntries.map(function(t){return i("li",{className:"collection-entry"},void 0,u.default.createElement(l.default,o({},e.props,{artist:t.artist})))}):"")))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0)),u=l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}var s=o("fieldset",{},void 0,o("label",{},void 0," Really delete? "),o("button",{type:"submit",className:"submit red-button"},void 0,"Delete")),c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={serverMessage:""},n.handleCloseDialogSubmit=n.handleCloseDialogSubmit.bind(n),n.handleSubmit=n.handleSubmit.bind(n),n.deleteCollection=n.deleteCollection.bind(n),n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"handleCloseDialogSubmit",value:function(e){e.preventDefault(),this.props.closeDialog(e)}},{key:"handleSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation(),this.deleteCollection(this.props.collection.collectionName).then(function(e){return t.setState({serverMessage:""}),t.props.closeDialog()}).catch(function(e){return e.text().then(function(e){t.setState({serverMessage:e})})})}},{key:"deleteCollection",value:function(e){var t=this;return new Promise(function(n,r){u.default.deleteArtistCollection(e).then(function(e){return t.props.setArtistCollections(e),n(e)}).catch(function(e){return r(e)})})}},{key:"render",value:function(){this.props.collection;return a.default.createElement("div",{ref:this.componentRef,className:"delete-collection-dialog"},o("form",{name:"delete-collection-form",className:"delete-collection-form",onSubmit:this.handleSubmit},void 0,s))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=c(n(0)),l=c(n(22)),s=c(n(44));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"render",value:function(){return i("nav",{className:"item-tools-nav"},void 0,i("ul",{},void 0,i("li",{},void 0,u.default.createElement(l.default,o({},this.props,{toolLabel:"Delete collection",toolIconClassName:"fas fa-minus-square",toolDialogComponent:s.default})))))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=c(n(0)),l=c(n(45)),s=n(4);function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"render",value:function(){var e=this.props.collection,t=this.props.link,n=null!==e.artistListEntries&&void 0!==e.artistListEntries&&e.artistListEntries.length>0?e.artistListEntries[0].artist.imageLargeUrl:"",r=null!==e.artistListEntries&&void 0!==e.artistListEntries&&e.artistListEntries.length>0?e.artistListEntries.length:void 0;return i("div",{className:"item-card collection-tile"},void 0,i("div",{className:"avatar-wrap"},void 0,""!==n?i(s.Link,{to:t},void 0,i("div",{className:"image-wrap"},void 0,i("img",{className:"image",src:n}))):""),i("div",{className:"card-content-wrap"},void 0,i("div",{className:"title"},void 0,i(s.Link,{to:t},void 0,i("span",{},void 0,e.collectionName),i("span",{},void 0,void 0!==r?"("+r+") items":"(0) items"))),i("div",{className:"info"},void 0,void 0!==e.artistListEntries&&null!==e.artistListEntries&&e.artistListEntries.length>0?i("span",{},void 0,"includes: ",i("span",{},void 0,e.artistListEntries[0].artist.artistName+e.artistListEntries.slice(1,4).map(function(e){return", "+e.artist.artistName}))):""),i("div",{className:"item-tools-nav-wrap"},void 0,u.default.createElement(l.default,o({},this.props,{collection:e})))))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=c(n(0)),l=c(n(46)),s=(c(n(6)),c(n(1)));n(4);function c(e){return e&&e.__esModule?e:{default:e}}var f=i("h1",{},void 0,i("span",{},void 0,i("i",{className:"far fa-list-alt"})),i("span",{},void 0,"Collections")),d=i("button",{type:"submit"},void 0,i("i",{class:"fas fa-plus"})),p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={collectionName:"",serverMessage:""},n.handleNewCollectionChange=n.handleNewCollectionChange.bind(n),n.handleNewCollectionSubmit=n.handleNewCollectionSubmit.bind(n),n.componentRef=u.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"handleNewCollectionSubmit",value:function(e){var t=this;e.preventDefault(),s.default.createArtistCollection(this.state.collectionName).then(function(e){t.setState({serverMessage:""}),e.json().then(function(e){t.props.setArtistCollections(e)})}).catch(function(e){409===e.status?t.setState({serverMessage:"Collection with this name already exists"}):t.setState({serverMessage:""})})}},{key:"handleNewCollectionChange",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector(".new-collection-form").elements["new-collection-name"].value;this.setState({collectionName:t})}},{key:"componentDidMount",value:function(){this.props.getArtistCollections()}},{key:"render",value:function(){var e=this,t=this.props.artistCollections;return u.default.createElement("div",{className:"viewer collections-viewer",ref:this.componentRef},i("div",{className:"panel collections-panel"},void 0,f,i("form",{name:"new-collection-form",className:"new-collection-form",onSubmit:this.handleNewCollectionSubmit},void 0,i("input",{type:"text",name:"new-collection-name",placeholder:"create new collection",onChange:this.handleNewCollectionChange}),d),i("ul",{},void 0,null!==t&&void 0!==t&&t.length>0?t.map(function(t){var n="/collection?username="+e.props.authentication.username+"&collectionName="+t.collectionName;return i("li",{className:"item-card-wrap"},void 0,u.default.createElement(l.default,o({},e.props,{collection:t,link:n})))}):"")))}}]),t}();t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(0)),u=n(4),l=s(n(23));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={recommendation:n.props.recommendation},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"render",value:function(){var e=this.state.recommendation,t=e.artist;return a.default.createElement("div",{className:"item-card recommendation-tile",ref:this.componentRef},o("div",{className:"title"},void 0,o(u.Link,{to:"/artistInfo?artistName="+t.artistName},void 0,t.artistName)),o("div",{className:"image-wrap"},void 0,o(u.Link,{to:"/artistInfo?artistName="+t.artistName},void 0,o("img",{className:"image",src:t.imageLargeUrl}))),o("div",{className:"item-tools-nav-wrap"},void 0,a.default.createElement(l.default,this.props)),o("div",{className:"recommended-by"},void 0,"Recommended by ",e.recommender.username))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=s(n(0)),l=s(n(48));function s(e){return e&&e.__esModule?e:{default:e}}var c=i("h1",{},void 0," Recommendations "),f=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"componentDidMount",value:function(){this.props.getRecommendations()}},{key:"render",value:function(){var e=this;return i("div",{className:"viewer recommendations-viewer"},void 0,c,i("ul",{className:"recommendations-list"},void 0,null!==this.props.recommendations&&void 0!==this.props.recommendations&&this.props.recommendations.length>0?this.props.recommendations.map(function(t){return i("li",{className:"item-card-wrap"},void 0,u.default.createElement(l.default,o({},e.props,{recommendation:t})))}):""))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(0),l=(o=u)&&o.__esModule?o:{default:o};var s=i("div",{className:"icon-wrap"},void 0,i("i",{className:"fas fa-user"})),c=i("div",{},void 0),f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"render",value:function(){var e=this.props.friend;return i("div",{className:"user-tile friend-tile"},void 0,i("div",{className:"user-info"},void 0,s,i("div",{className:"username"},void 0,e.username),c))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=s(n(0)),l=s(n(50));s(n(1));function s(e){return e&&e.__esModule?e:{default:e}}var c=i("h1",{},void 0," My friends: "),f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={serverResponse:""},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"componentDidMount",value:function(){this.props.getFriends()}},{key:"render",value:function(){var e=this;return i("div",{className:"my-friends-viewer"},void 0,i("ul",{className:"user-list"},void 0,null!==this.props.friends&&this.props.friends.length>0?i("div",{},void 0,c,this.props.friends.map(function(t){return i("li",{className:"user-tile-wrap"},void 0,u.default.createElement(l.default,o({},e.props,{friend:t})))})):""))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0));u(n(20)),u(n(1));function u(e){return e&&e.__esModule?e:{default:e}}var l=o("button",{type:"submit"},void 0,o("i",{className:"fas fa-search"})),s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={query:""},n.handleSubmit=n.handleSubmit.bind(n),n.handleChange=n.handleChange.bind(n),n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"handleChange",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current;this.setState({query:t.elements["user-search-query"].value})}},{key:"handleSubmit",value:function(e){e.preventDefault(),this.props.history.push("friends?username="+this.state.query)}},{key:"render",value:function(){return a.default.createElement("form",{name:"user-search-form",className:"user-search-form",onSubmit:this.handleSubmit,ref:this.componentRef},o("input",{type:"text",name:"user-search-query",className:"user-search-query",placeholder:"Search for users",onChange:this.handleChange}),l)}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=f(n(0)),l=f(n(52)),s=f(n(20)),c=f(n(1));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={userList:[]},n.getData=n.getData.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.location.search!==e.location.search&&this.getData(e.location.search),!0}},{key:"componentDidMount",value:function(){this.getData(this.props.location.search)}},{key:"getData",value:function(e){var t=this;if(null!==e&&void 0!==e&&""!==e){var n=/\?username=(.*)/.exec(e)[1];c.default.getUserSearch(n).then(function(e){t.setState({userList:e})})}}},{key:"render",value:function(){var e=this,t=this.props.friends.map(function(e){return e.username});return i("div",{className:"viewer user-search-viewer"},void 0,u.default.createElement(l.default,this.props),i("ul",{className:"user-list user-search-results"},void 0,null!==this.state.userList&&this.state.userList.length>0?this.state.userList.map(function(n){var r=t.includes(n.username);return i("li",{className:"user-tile-wrap"},void 0,u.default.createElement(s.default,o({},e.props,{user:n,isFriend:r})))}):""))}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(0)),u=s(n(53)),l=s(n(51));s(n(1));function s(e){return e&&e.__esModule?e:{default:e}}var c=o("h1",{},void 0,o("span",{},void 0,o("i",{className:"fas fa-users"})),o("span",{},void 0,"Friends")),f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"render",value:function(){return o("div",{className:"viewer friends-viewer"},void 0,o("div",{className:"panel"},void 0,c,a.default.createElement(u.default,this.props),a.default.createElement(l.default,this.props)))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0)),u=l(n(6));function l(e){return e&&e.__esModule?e:{default:e}}var s=o("input",{type:"submit",value:"Register"}),c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={registrationForm:{username:"",email:"",password:"",confirmPassword:""},serverResponseBody:""},n.handleSubmit=n.handleSubmit.bind(n),n.handleChange=n.handleChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"handleSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation();var n=this.state.registrationForm;u.default.register(n.username,n.email,n.password).then(function(){t.props.getCurrentUser(),t.props.history.push("/")}).catch(function(e){e.text().then(function(e){t.setState({serverResponseBody:e})})})}},{key:"handleChange",value:function(e){var t=document.getElementById("registration-form");this.setState({registrationForm:{username:t.elements.username.value,email:t.elements.email.value,password:t.elements.password.value,confirmPassword:t.elements["confirm-password"].value}})}},{key:"render",value:function(){return o("div",{},void 0,o("form",{name:"registration-form",id:"registration-form",className:"auth-form",onSubmit:this.handleSubmit},void 0,o("input",{type:"text",name:"username",placeholder:"Username",onChange:this.handleChange}),o("input",{type:"email",name:"email",placeholder:"Email",onChange:this.handleChange}),o("input",{type:"password",name:"password",placeholder:"Password",onChange:this.handleChange}),o("input",{type:"password",name:"confirm-password",placeholder:"Confirm Password",onChange:this.handleChange}),s),o("div",{className:"server-response-message"},void 0," ",this.state.serverResponseBody," "))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0)),u=l(n(6));function l(e){return e&&e.__esModule?e:{default:e}}var s=o("div",{}),c=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"componentDidMount",value:function(){u.default.logout(),this.props.getCurrentUser(),this.props.history.push("/")}},{key:"render",value:function(){return s}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0)),u=l(n(6));function l(e){return e&&e.__esModule?e:{default:e}}var s=o("input",{type:"submit",value:"Login"}),c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={loginForm:{username:"",password:""},serverResponseBody:""},n.handleSubmit=n.handleSubmit.bind(n),n.handleChange=n.handleChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"handleSubmit",value:function(e){var t=this;e.preventDefault(),e.stopPropagation(),u.default.login(this.state.loginForm.username,this.state.loginForm.password).then(function(){t.props.getCurrentUser(),t.props.history.push("/")}).catch(function(e){e.text().then(function(e){t.setState({serverResponseBody:e})})})}},{key:"handleChange",value:function(e){var t=document.getElementById("login-form");this.setState({loginForm:{username:t.elements.username.value,password:t.elements.password.value}})}},{key:"render",value:function(){return o("div",{},void 0,o("form",{name:"login-form",id:"login-form",className:"auth-form",onSubmit:this.handleSubmit},void 0,o("input",{type:"text",name:"username",placeholder:"Username",onChange:this.handleChange}),o("input",{type:"password",name:"password",placeholder:"Password",onChange:this.handleChange}),s),o("div",{className:"server-response-message"},void 0," ",this.state.serverResponseBody," "))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(0),l=(o=u)&&o.__esModule?o:{default:o};var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"render",value:function(){var e=this.props.album,t=void 0!==e.imageLargeUrl?e.imageLargeUrl:void 0!==e.imageMediumUrl?e.imageMediumUrl:void 0!==e.imageSmallUrl?e.imageSmallUrl:"";return i("div",{className:"artist-albums-tile"},void 0,i("h1",{},void 0," ",e.albumName," "),i("img",{src:t,alt:""}))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(0)),u=s(n(58)),l=s(n(1));function s(e){return e&&e.__esModule?e:{default:e}}var c=o("h1",{},void 0," Top Albums "),f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={artistAlbums:{albumList:[{albumName:"",imageSmallUrl:"",imageMediumUrl:"",imageLargeUrl:"",artist:{artistName:""},tags:[]}]}},n.getData=n.getData.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.location.search!==e.location.search&&this.getData(e.location.search),!0}},{key:"componentDidMount",value:function(){this.getData(this.props.location.search)}},{key:"getData",value:function(e){var t=this,n=/\?artistName=(.*)/.exec(e)[1].replace("%20"," ");l.default.getArtistAlbums(n).then(function(e){t.setState({artistAlbums:e})})}},{key:"render",value:function(){return o("div",{id:"artist-albums-wrap"},void 0,c,o("ul",{className:"albums-list"},void 0,this.state.artistAlbums.albumList.map(function(e){return o("li",{},void 0,o(u.default,{album:e}))})))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(0),l=(o=u)&&o.__esModule?o:{default:o};var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"render",value:function(){return i("div",{className:"similar-artist-tile"},void 0,i("div",{className:"artist-image-wrap"},void 0,i("img",{className:"artist-image",src:this.props.artist.imageMediumUrl})))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=f(n(0)),l=f(n(60)),s=f(n(1)),c=n(4);function f(e){return e&&e.__esModule?e:{default:e}}var d=i("h1",{},void 0," Similar Artists "),p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={similarArtists:{artistList:[{artistName:"",imageSmallUrl:"",imageMediumUrl:"",imageLargeUrl:""}]},hoveredArtistName:"placeholder"},n.getData=n.getData.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.location.search!==e.location.search&&this.getData(e.location.search),!0}},{key:"componentDidMount",value:function(){this.getData(this.props.location.search)}},{key:"getData",value:function(e){var t=this,n=/\?artistName=(.*)/.exec(e)[1].replace("%20"," ");s.default.getSimilarArtists(n).then(function(e){t.setState({similarArtists:e})})}},{key:"render",value:function(){var e=this;return i("div",{id:"similar-artists-container"},void 0,d,i("div",{className:"similar-artist-name-display"},void 0," ",this.state.hoveredArtistName," "),i("ul",{},void 0,this.state.similarArtists.artistList.map(function(t){return i("li",{},void 0,i(c.Link,{to:"/artistInfo?artistName="+t.artistName},void 0,u.default.createElement(l.default,o({artist:t},e.props))))})))}}]),t}();t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}});t.default={parseArticleStringToJSX:function(e,t){t=void 0===t?"/n":t;var n=/<a\s.*href=(.*)>(.*)<\/a>/,r=e.split(t);return o("article",{},void 0,r.map(function(e){if(""!=e){var t=e.match(n);return null!=t?o("a",{href:t[1]},void 0," ",t[2]," "):o("p",{},void 0," ",e," ")}}))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=f(n(0)),u=f(n(62)),l=f(n(61)),s=f(n(59)),c=f(n(1));function f(e){return e&&e.__esModule?e:{default:e}}var d=o("h1",{},void 0," Bio "),p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={artistInfo:{artistName:"",imageSmallUrl:"",imageMediumUrl:"",imageLargeUrl:"",bioContent:""}},n.getData=n.getData.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.location.search!==e.location.search&&this.getData(e.location.search),!0}},{key:"componentDidMount",value:function(){this.getData(this.props.location.search)}},{key:"getData",value:function(e){var t=this;if(null!==e&&void 0!==e&&""!==e){var n=/\?artistName=(.*)/.exec(e)[1].replace("%20"," ");c.default.getArtistInfo(n).then(function(e){t.setState({artistInfo:e})})}}},{key:"render",value:function(){var e=this.state.artistInfo;this.state.similarArtists;return o("div",{className:"artist-info-wrap"},void 0,o("header",{},void 0,o("h1",{},void 0," ",e.artistName," "),o("div",{className:"artist-image-wrap"},void 0,o("img",{className:"artist-image",src:e.imageLargeUrl,alt:e.artistName}))),o("section",{className:"similar-artists"},void 0,a.default.createElement(l.default,this.props)),o("section",{className:"artist-albums"},void 0,a.default.createElement(s.default,this.props)),o("section",{className:"artist-bio"},void 0,d,u.default.parseArticleStringToJSX(e.bioContent,"\n")))}}]),t}();t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0)),u=l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}var s=o("i",{className:"fas fa-heart red"}),c=o("i",{className:"fas fa-heart"}),f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.isButtonActive=n.isButtonActive.bind(n),n.handleSubmit=n.handleSubmit.bind(n),n.handleButtonFocus=n.handleButtonFocus.bind(n),n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"handleSubmit",value:function(e){var t=this;e.preventDefault(),!1===this.isButtonActive()?u.default.addLikedArtist(this.props.artist).then(function(e){t.props.setLikedArtists(e)}).catch(function(e){}):u.default.removeLikedArtist(this.props.artist).then(function(e){t.props.setLikedArtists(e)}).catch(function(e){})}},{key:"handleButtonFocus",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.componentRef.current.querySelector(".tool-label");return"mouseover"===e.type||"focus"===e.type?(t.classList.remove("hidden"),t.classList.add("visible")):"mouseout"!==e.type&&"blur"!==e.type||(t.classList.remove("visible"),t.classList.add("hidden")),!1}},{key:"isButtonActive",value:function(){var e=this.props.artist,t=this.props.likedArtists.map(function(e){return e.artistMbid}),n=this.props.likedArtists.map(function(e){return e.artistName});if(null!==e.mbid&&void 0!==e.mbid&&""!==e.mbid){if(!0===t.includes(e.mbid))return!0}else if(!0===n.includes(e.artistName))return!0;return!1}},{key:"render",value:function(){var e=this.isButtonActive();return a.default.createElement("div",{className:"tool-widget like-button",ref:this.componentRef},o("form",{name:"like-button-form",className:"tool-button-form like-button-form",onSubmit:this.handleSubmit},void 0,o("button",{type:"submit",className:"submit",onMouseOver:this.handleButtonFocus,onMouseOut:this.handleButtonFocus,onFocus:this.handleButtonFocus,onBlur:this.handleButtonFocus},void 0,!0===e?s:c)),o("div",{className:"tool-label hidden"},void 0,!0===e?"Unlike":"Like"))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0)),u=l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}var s=o("button",{type:"submit",className:"submit"},void 0,o("i",{className:"fas fa-times"})),c=o("h2",{},void 0,"Friends:"),f=o("i",{className:"fas fa-check green"}),d=o("i",{className:"fas fa-plus"}),p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={serverResponse:"",friendsArtistWasRecommendedTo:[]},n.handleCloseDialogSubmit=n.handleCloseDialogSubmit.bind(n),n.handleMenuItemSubmit=n.handleMenuItemSubmit.bind(n),n.getFriendsArtistWasRecommendedTo=n.getFriendsArtistWasRecommendedTo.bind(n),n.componentRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"handleCloseDialogSubmit",value:function(e){e.preventDefault(),this.props.closeDialog(e)}},{key:"handleMenuItemSubmit",value:function(e,t,n){var r=this;u.default.recommendArtist(t,n).then(function(e){r.setState(function(e,t){e.friendsArtistWasRecommendedTo.concat(n.username)}),r.setState({serverResponse:""})}).catch(function(e){e.text().then(function(e){r.setState({serverResponse:e})})})}},{key:"getFriendsArtistWasRecommendedTo",value:function(e){var t=this;u.default.getFriendsArtistWasRecommendedTo(e).then(function(e){t.setState({friendsArtistWasRecommendedTo:e})}).catch(function(e){})}},{key:"componentDidMount",value:function(){this.props.getFriends(),this.getFriendsArtistWasRecommendedTo(this.props.artist)}},{key:"render",value:function(){var e=this,t=this.props.artist,n=this.props.friends,r=this.state.friendsArtistWasRecommendedTo;return a.default.createElement("div",{ref:this.componentRef,className:"recommend-artist-to-friend-dialog"},o("header",{},void 0,o("form",{name:"close-dialog-form",className:"close-dialog-form",onSubmit:this.handleCloseDialogSubmit},void 0,s),o("h1",{},void 0,"Recommend ",o("b",{},void 0,t.artistName)," to a friend")),c,o("nav",{},void 0,o("ul",{},void 0,n.map(function(n){return r.includes(n.username)?o("li",{className:"menu-item"},void 0,o("div",{className:"label friend-name"},void 0,n.username),f):o("li",{className:"menu-item",onClick:function(r){e.handleMenuItemSubmit(r,t,n)}},void 0,o("div",{className:"label friend-name"},void 0,n.username),d)}))),o("div",{className:"server-response-message"},void 0,this.state.serverResponse))}}]),t}();t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(0),l=(o=u)&&o.__esModule?o:{default:o};var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"render",value:function(){var e=this.props.toolDialogComponent;return i("div",{className:"tool-dialog"},void 0,l.default.createElement(e,this.props))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(0),l=(o=u)&&o.__esModule?o:{default:o};var s=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"render",value:function(){var e=this.props.toolIconClassName,t=this.props.onSubmit,n=this.props.onMouseOver,r=this.props.onMouseOut,o=this.props.onFocus,a=this.props.onBlur;return i("form",{name:"tool-button-form",className:"tool-button-form",onSubmit:t},void 0,i("button",{type:"submit",className:"tool-button",onMouseOver:n,onMouseOut:r,onFocus:o,onBlur:a},void 0,i("i",{className:e})))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=c(n(0)),l=c(n(1)),s=c(n(24));function c(e){return e&&e.__esModule?e:{default:e}}var f=i("span",{},void 0,i("i",{className:"fas fa-headphones"})),d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={artistName:"",artistList:[]},n.getData=n.getData.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"shouldComponentUpdate",value:function(e,t){return this.props.location.search!==e.location.search&&this.getData(e.location.search),!0}},{key:"componentDidMount",value:function(){this.getData(this.props.location.search)}},{key:"getData",value:function(e){var t=this;if(null!==e&&void 0!==e&&""!==e){var n=/\?artistName=(.*)/.exec(e)[1];l.default.getArtistSearch(n).then(function(e){t.setState({artistName:n,artistList:e.artistList})})}}},{key:"render",value:function(){var e=this;return i("div",{className:"viewer artist-search-result-viewer"},void 0,i("div",{className:"panel"},void 0,i("h1",{},void 0,f,i("span",{},void 0,"Search for ",this.state.artistName)),i("ul",{},void 0,this.state.artistList.map(function(t){return i("li",{className:"item-card-wrap artist-search-result-tile-wrap"},void 0,u.default.createElement(s.default,o({},e.props,{key:t.id,artist:t})))}))))}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=y(n(0)),a=n(4),u=y(n(68)),l=y(n(63)),s=y(n(57)),c=y(n(56)),f=y(n(55)),d=y(n(54)),p=y(n(49)),h=y(n(47)),m=y(n(43));function y(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return o("div",{},void 0,o(a.Route,{path:"/login",render:function(t){return i.default.createElement(s.default,Object.assign({},e,t))}}),o(a.Route,{path:"/logout",render:function(t){return i.default.createElement(c.default,Object.assign({},e,t))}}),o(a.Route,{path:"/register",render:function(t){return i.default.createElement(f.default,Object.assign({},e,t))}}),o(a.Route,{path:"/artistSearch",render:function(t){return i.default.createElement(u.default,Object.assign({},e,t))}}),o(a.Route,{path:"/artistInfo",render:function(t){return i.default.createElement(l.default,Object.assign({},e,t))}}),o(a.Route,{path:"/collections",render:function(t){return i.default.createElement(h.default,Object.assign({},e,t))}}),o(a.Route,{path:"/collection",render:function(t){return i.default.createElement(m.default,Object.assign({},e,t))}}),o(a.Route,{path:"/favorites",render:function(t){return i.default.createElement(FavoritesViewer,Object.assign({},e,t))}}),o(a.Route,{path:"/friends",render:function(t){return i.default.createElement(d.default,Object.assign({},e,t))}}),o(a.Route,{path:"/recommendations",render:function(t){return i.default.createElement(p.default,Object.assign({},e,t))}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0)),u=(n(13),l(n(69)));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"render",value:function(){return o("div",{className:"wrap main-viewer-component-wrap"},void 0,a.default.createElement(u.default,this.props))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(0),l=(o=u)&&o.__esModule?o:{default:o};n(13);var s=i("button",{type:"submit",id:"main-search-form-submit-button"},void 0,i("i",{className:"fas fa-search"})),c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={searchQuery:""},n.handleSubmit=n.handleSubmit.bind(n),n.handleChange=n.handleChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"handleSubmit",value:function(e){e.preventDefault(),e.stopPropagation(),this.props.history.push("artistSearch?artistName="+this.state.searchQuery)}},{key:"handleChange",value:function(e){e.preventDefault(),e.stopPropagation(),this.setState({searchQuery:document.getElementById("main-search-form-text-input").value})}},{key:"render",value:function(){return i("form",{name:"mainSearchForm",id:"main-search-form",onSubmit:this.handleSubmit},void 0,i("div",{id:"main-search-widgets-container"},void 0,i("input",{type:"text",name:"mainSearchFormTextInput",id:"main-search-form-text-input",placeholder:"search artist name",onChange:this.handleChange}),s))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(0),l=(o=u)&&o.__esModule?o:{default:o},s=n(4);var c=i("i",{className:"fas fa-user"}),f=i(s.Link,{to:"/login"},void 0,i("button",{},void 0,"Log in")),d=i(s.Link,{to:"/logout"},void 0,i("button",{},void 0,"Log out")),p=i(s.Link,{to:"/register"},void 0,i("button",{},void 0,"Register")),h=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),a(t,[{key:"render",value:function(){var e=this.props.authentication.username;return i("nav",{class:"authentication-nav"},void 0,c,i("ul",{},void 0,i("li",{},void 0,null===e||"guest"===e||void 0===e?f:d),i("li",{},void 0,null===e||"guest"===e||void 0===e?p:"")),i("label",{className:"current-user-label"},void 0,null!==e&&void 0!==e&&""!==e&&"guest"!==e?i("span",{},void 0," Logged in as "+e):""))}}]),t}();t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),a=n(0),u=((o=a)&&o.__esModule,n(4));var l=i("nav",{class:"main-nav"},void 0,i("ul",{},void 0,i("li",{},void 0,i(u.Link,{to:"/"},void 0,"Home")),i("li",{},void 0,i(u.Link,{to:"/collections"},void 0,"Collections")),i("li",{},void 0,i(u.Link,{to:"/recommendations"},void 0,"Recommendations")),i("li",{},void 0,i(u.Link,{to:"/friends"},void 0,"Friends"))));t.default=function(e){return l}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=l(n(0)),a=l(n(73)),u=l(n(72));function l(e){return e&&e.__esModule?e:{default:e}}var s=o("div",{},void 0,o("h1",{},void 0," anvil "),o("h2",{},void 0," a tool for music exploration "));t.default=function(e){return o("header",{className:"main-header"},void 0,s,o("div",{className:"authentication-nav-wrap"},void 0,i.default.createElement(u.default,e)),o("div",{},void 0,i.default.createElement(a.default,e)))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=f(n(0)),u=n(13),l=f(n(74)),s=f(n(71)),c=f(n(70));f(n(42));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"render",value:function(){var e=this;return o("div",{},void 0,a.default.createElement(l.default,this.props),o(u.Route,{path:new RegExp("^(?:(?!/register|/login)).*$"),render:function(t){return a.default.createElement(s.default,Object.assign({},e.props,t))}}),o(u.Route,{path:new RegExp(".*"),render:function(t){return a.default.createElement(c.default,Object.assign({},e.props,t))}}))}}]),t}();t.default=d},function(e,t,n){"use strict";var r,o,i,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};i=function(){var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,u=a&&a(Object);return function l(s,c,f){if("string"!=typeof c){if(u){var d=a(c);d&&d!==u&&l(s,d,f)}var p=r(c);o&&(p=p.concat(o(c)));for(var h=0;h<p.length;++h){var m=p[h];if(!(e[m]||t[m]||f&&f[m])){var y=i(c,m);try{n(s,m,y)}catch(e){}}}return s}return s}},"object"===a(t)&&void 0!==e?e.exports=i():void 0===(o="function"==typeof(r=i)?r.call(t,n,t,e):r)||(e.exports=o)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(26),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(9),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(14),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(27),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(28),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(29),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(30),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=l(n(0)),i=l(n(2)),a=l(n(32)),u=l(n(34));function l(e){return e&&e.__esModule?e:{default:e}}var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)};var f=function(e){var t=e.to,n=e.exact,r=e.strict,i=e.location,l=e.activeClassName,f=e.className,d=e.activeStyle,p=e.style,h=e.isActive,m=e["aria-current"],y=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),v="object"===(void 0===t?"undefined":c(t))?t.pathname:t,g=v&&v.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return o.default.createElement(a.default,{path:g,exact:n,strict:r,location:i,children:function(e){var n=e.location,r=e.match,i=!!(h?h(r,n):r);return o.default.createElement(u.default,s({to:t,className:i?[f,l].filter(function(e){return e}).join(" "):f,style:i?s({},p,d):p,"aria-current":i&&m||null},y))}})};f.propTypes={to:u.default.propTypes.to,exact:i.default.bool,strict:i.default.bool,location:i.default.object,activeClassName:i.default.string,className:i.default.string,activeStyle:i.default.object,style:i.default.object,isActive:i.default.func,"aria-current":i.default.oneOf(["page","step","location","date","time","true"])},f.defaultProps={activeClassName:"active","aria-current":"page"},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(33),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=s(n(5)),i=s(n(0)),a=s(n(2)),u=n(7),l=s(n(16));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var f=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.history=(0,u.createHashHistory)(r.props),c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,o.default)(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return i.default.createElement(l.default,{history:this.history,children:this.props.children})},t}(i.default.Component);f.propTypes={basename:a.default.string,getUserConfirmation:a.default.func,hashType:a.default.oneOf(["hashbang","noslash","slash"]),children:a.default.node},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=l(n(11)),i=n(8),a=n(12),u=l(n(17));function l(e){return e&&e.__esModule?e:{default:e}}var s="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)},c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},f=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,l=e.initialIndex,d=void 0===l?0:l,p=e.keyLength,h=void 0===p?6:p,m=(0,u.default)(),y=function(e){c(x,e),x.length=x.entries.length,m.notifyListeners(x.location,x.action)},v=function(){return Math.random().toString(36).substr(2,h)},g=f(d,0,r.length-1),b=r.map(function(e){return"string"==typeof e?(0,a.createLocation)(e,void 0,v()):(0,a.createLocation)(e,void 0,e.key||v())}),w=i.createPath,_=function(e){var n=f(x.index+e,0,x.entries.length-1),r=x.entries[n];m.confirmTransitionTo(r,"POP",t,function(e){e?y({action:"POP",location:r,index:n}):y()})},x={length:b.length,action:"POP",location:b[g],index:g,entries:b,createHref:w,push:function(e,n){(0,o.default)(!("object"===(void 0===e?"undefined":s(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=(0,a.createLocation)(e,n,v(),x.location);m.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=x.index+1,n=x.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),y({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){(0,o.default)(!("object"===(void 0===e?"undefined":s(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=(0,a.createLocation)(e,n,v(),x.location);m.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(x.entries[x.index]=r,y({action:"REPLACE",location:r}))})},go:_,goBack:function(){return _(-1)},goForward:function(){return _(1)},canGo:function(e){var t=x.index+e;return t>=0&&t<x.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return m.setPrompt(e)},listen:function(e){return m.appendListener(e)}};return x}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(11)),o=s(n(3)),i=n(12),a=n(8),u=s(n(17)),l=n(35);function s(e){return e&&e.__esModule?e:{default:e}}var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,a.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:a.stripLeadingSlash,decodePath:a.addLeadingSlash},slash:{encodePath:a.addLeadingSlash,decodePath:a.addLeadingSlash}},d=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},p=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,o.default)(l.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,l.supportsGoWithoutReloadUsingHash)(),s=e.getUserConfirmation,h=void 0===s?l.getConfirmation:s,m=e.hashType,y=void 0===m?"slash":m,v=e.basename?(0,a.stripTrailingSlash)((0,a.addLeadingSlash)(e.basename)):"",g=f[y],b=g.encodePath,w=g.decodePath,_=function(){var e=w(d());return(0,r.default)(!v||(0,a.hasBasename)(e,v),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+v+'".'),v&&(e=(0,a.stripBasename)(e,v)),(0,i.createLocation)(e)},x=(0,u.default)(),S=function(e){c(D,e),D.length=t.length,x.notifyListeners(D.location,D.action)},C=!1,E=null,k=function(){var e=d(),t=b(e);if(e!==t)p(t);else{var n=_(),r=D.location;if(!C&&(0,i.locationsAreEqual)(r,n))return;if(E===(0,a.createPath)(n))return;E=null,O(n)}},O=function(e){C?(C=!1,S()):x.confirmTransitionTo(e,"POP",h,function(t){t?S({action:"POP",location:e}):P(e)})},P=function(e){var t=D.location,n=R.lastIndexOf((0,a.createPath)(t));-1===n&&(n=0);var r=R.lastIndexOf((0,a.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(C=!0,N(o))},T=d(),j=b(T);T!==j&&p(j);var A=_(),R=[(0,a.createPath)(A)],N=function(e){(0,r.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},F=0,M=function(e){1===(F+=e)?(0,l.addEventListener)(window,"hashchange",k):0===F&&(0,l.removeEventListener)(window,"hashchange",k)},L=!1,D={length:t.length,action:"POP",location:A,createHref:function(e){return"#"+b(v+(0,a.createPath)(e))},push:function(e,t){(0,r.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,i.createLocation)(e,void 0,void 0,D.location);x.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,a.createPath)(n),o=b(v+t);if(d()!==o){E=t,function(e){window.location.hash=e}(o);var i=R.lastIndexOf((0,a.createPath)(D.location)),u=R.slice(0,-1===i?0:i+1);u.push(t),R=u,S({action:"PUSH",location:n})}else(0,r.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),S()}})},replace:function(e,t){(0,r.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,i.createLocation)(e,void 0,void 0,D.location);x.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,a.createPath)(n),r=b(v+t);d()!==r&&(E=t,p(r));var o=R.indexOf((0,a.createPath)(D.location));-1!==o&&(R[o]=t),S({action:"REPLACE",location:n})}})},go:N,goBack:function(){return N(-1)},goForward:function(){return N(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=x.setPrompt(e);return L||(M(1),L=!0),function(){return L&&(L=!1,M(-1)),t()}},listen:function(e){var t=x.appendListener(e);return M(1),function(){M(-1),t()}}};return D}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=c(n(11)),i=c(n(3)),a=n(12),u=n(8),l=c(n(17)),s=n(35);function c(e){return e&&e.__esModule?e:{default:e}}var f="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)},d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},p=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(s.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,s.supportsHistory)(),r=!(0,s.supportsPopStateOnHashChange)(),c=e.forceRefresh,h=void 0!==c&&c,m=e.getUserConfirmation,y=void 0===m?s.getConfirmation:m,v=e.keyLength,g=void 0===v?6:v,b=e.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(e.basename)):"",w=function(e){var t=e||{},n=t.key,r=t.state,i=window.location,l=i.pathname+i.search+i.hash;return(0,o.default)(!b||(0,u.hasBasename)(l,b),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+l+'" to begin with "'+b+'".'),b&&(l=(0,u.stripBasename)(l,b)),(0,a.createLocation)(l,r,n)},_=function(){return Math.random().toString(36).substr(2,g)},x=(0,l.default)(),S=function(e){d(L,e),L.length=t.length,x.notifyListeners(L.location,L.action)},C=function(e){(0,s.isExtraneousPopstateEvent)(e)||O(w(e.state))},E=function(){O(w(p()))},k=!1,O=function(e){k?(k=!1,S()):x.confirmTransitionTo(e,"POP",y,function(t){t?S({action:"POP",location:e}):P(e)})},P=function(e){var t=L.location,n=j.indexOf(t.key);-1===n&&(n=0);var r=j.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(k=!0,R(o))},T=w(p()),j=[T.key],A=function(e){return b+(0,u.createPath)(e)},R=function(e){t.go(e)},N=0,F=function(e){1===(N+=e)?((0,s.addEventListener)(window,"popstate",C),r&&(0,s.addEventListener)(window,"hashchange",E)):0===N&&((0,s.removeEventListener)(window,"popstate",C),r&&(0,s.removeEventListener)(window,"hashchange",E))},M=!1,L={length:t.length,action:"POP",location:T,createHref:A,push:function(e,r){(0,o.default)(!("object"===(void 0===e?"undefined":f(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,a.createLocation)(e,r,_(),L.location);x.confirmTransitionTo(i,"PUSH",y,function(e){if(e){var r=A(i),a=i.key,u=i.state;if(n)if(t.pushState({key:a,state:u},null,r),h)window.location.href=r;else{var l=j.indexOf(L.location.key),s=j.slice(0,-1===l?0:l+1);s.push(i.key),j=s,S({action:"PUSH",location:i})}else(0,o.default)(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,r){(0,o.default)(!("object"===(void 0===e?"undefined":f(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,a.createLocation)(e,r,_(),L.location);x.confirmTransitionTo(i,"REPLACE",y,function(e){if(e){var r=A(i),a=i.key,u=i.state;if(n)if(t.replaceState({key:a,state:u},null,r),h)window.location.replace(r);else{var l=j.indexOf(L.location.key);-1!==l&&(j[l]=i.key),S({action:"REPLACE",location:i})}else(0,o.default)(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:R,goBack:function(){return R(-1)},goForward:function(){return R(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=x.setPrompt(e);return M||(F(1),M=!0),function(){return M&&(M=!1,F(-1)),t()}},listen:function(e){var t=x.appendListener(e);return F(1),function(){F(-1),t()}}};return L}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(e){return void 0===e?"undefined":r(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":r(e)};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":o(t);if(r!==(void 0===n?"undefined":o(n)))return!1;if("object"===r){var i=t.valueOf(),a=n.valueOf();if(i!==t||a!==n)return e(i,a);var u=Object.keys(t),l=Object.keys(n);return u.length===l.length&&u.every(function(r){return e(t[r],n[r])})}return!1}},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],i=t&&t.split("/")||[],a=e&&r(e),u=t&&r(t),l=a||u;if(e&&r(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var s=void 0;if(i.length){var c=i[i.length-1];s="."===c||".."===c||""===c}else s=!1;for(var f=0,d=i.length;d>=0;d--){var p=i[d];"."===p?o(i,d):".."===p?(o(i,d),f++):f&&(o(i,d),f--)}if(!l)for(;f--;f)i.unshift("..");!l||""===i[0]||i[0]&&r(i[0])||i.unshift("");var h=i.join("/");return s&&"/"!==h.substr(-1)&&(h+="/"),h}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(18),o=n(19),i=n(93);e.exports=function(){function e(e,t,n,r,a,u){u!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=s(n(5)),i=s(n(0)),a=s(n(2)),u=n(7),l=s(n(16));function s(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":r(t))&&"function"!=typeof t?e:t}var f=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=c(this,e.call.apply(e,[this].concat(i))),r.history=(0,u.createBrowserHistory)(r.props),c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":r(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){(0,o.default)(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return i.default.createElement(l.default,{history:this.history,children:this.props.children})},t}(i.default.Component);f.propTypes={basename:a.default.string,forceRefresh:a.default.bool,getUserConfirmation:a.default.func,keyLength:a.default.number,children:a.default.node},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(0)),u=n(4),l=s(n(75));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),i(t,[{key:"render",value:function(){var e=this;return o(u.BrowserRouter,{},void 0,o("div",{},void 0,o(u.Route,{path:"/",render:function(t){return a.default.createElement(l.default,Object.assign({},e.props,t))}})))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=s(n(0)),a=s(n(96)),u=s(n(6)),l=s(n(1));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={authentication:{username:null,jwt:null},artistCollections:[{}],friends:[],recommendations:[],likedArtists:[]},n.getCurrentUser=n.getCurrentUser.bind(n),n.getCurrentUserAndRenew=n.getCurrentUserAndRenew.bind(n),n.getArtistCollections=n.getArtistCollections.bind(n),n.setArtistCollections=n.setArtistCollections.bind(n),n.getFriends=n.getFriends.bind(n),n.setFriends=n.setFriends.bind(n),n.getRecommendations=n.getRecommendations.bind(n),n.setRecommendations=n.setRecommendations.bind(n),n.getLikedArtists=n.getLikedArtists.bind(n),n.setLikedArtists=n.setLikedArtists.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"componentDidMount",value:function(){this.getCurrentUserAndRenew(),this.getLikedArtists()}},{key:"getCurrentUserAndRenew",value:function(){var e=this;return new Promise(function(t,n){u.default.getCurrentUserAndRenew().then(function(n){return e.setState({authentication:{username:n.username,jwt:n.jwt}}),t(n)}).catch(function(t){return e.setState({authentication:{username:null,jwt:null}}),n(t)})})}},{key:"getCurrentUser",value:function(){var e=this;return new Promise(function(t,n){u.default.getCurrentUser().then(function(n){return e.setState({authentication:{username:n.username,jwt:n.jwt}}),t(n)}).catch(function(t){return e.setState({authentication:{username:null,jwt:null}}),n(t)})})}},{key:"getArtistCollections",value:function(){var e=this;l.default.getArtistCollections().then(function(e){return e.json()}).then(function(t){e.setArtistCollections(t)}).catch(function(e){})}},{key:"setArtistCollections",value:function(e){this.setState({artistCollections:e})}},{key:"getFriends",value:function(){var e=this;l.default.getFriends().then(function(t){e.setFriends(t)}).catch(function(e){})}},{key:"setFriends",value:function(e){this.setState({friends:e})}},{key:"getRecommendations",value:function(){var e=this;l.default.getRecommendations().then(function(t){e.setRecommendations(t)}).catch(function(){})}},{key:"setRecommendations",value:function(e){this.setState({recommendations:e})}},{key:"getLikedArtists",value:function(){var e=this;l.default.getLikedArtists().then(function(t){e.setState({likedArtists:t})}).catch(function(){})}},{key:"setLikedArtists",value:function(e){this.setState({likedArtists:e})}},{key:"render",value:function(){return i.default.createElement(a.default,r({},this.props,{authentication:this.state.authentication,renewAuthentication:this.renewAuthentication,getCurrentUser:this.getCurrentUser,artistCollections:this.state.artistCollections,getArtistCollections:this.getArtistCollections,setArtistCollections:this.setArtistCollections,friends:this.state.friends,getFriends:this.getFriends,setFriends:this.setFriends,recommendations:this.state.recommendations,getRecommendations:this.getRecommendations,setRecommendations:this.setRecommendations,likedArtists:this.state.likedArtists,getLikedArtists:this.getLikedArtists,setLikedArtists:this.setLikedArtists}))}}]),t}();t.default=c},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"===(void 0===e?"undefined":r(e))&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(98);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(99);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.prototype.hasOwnProperty;function i(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(i(e,t))return!0;if("object"!==(void 0===e?"undefined":r(e))||null===e||"object"!==(void 0===t?"undefined":r(t))||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var u=0;u<n.length;u++)if(!o.call(t,n[u])||!i(e[n[u]],t[n[u]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.4.1
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(37),i=n(19),a=n(36),u=n(18),l="function"==typeof Symbol&&Symbol.for,s=l?Symbol.for("react.element"):60103,c=l?Symbol.for("react.portal"):60106,f=l?Symbol.for("react.fragment"):60107,d=l?Symbol.for("react.strict_mode"):60108,p=l?Symbol.for("react.profiler"):60114,h=l?Symbol.for("react.provider"):60109,m=l?Symbol.for("react.context"):60110,y=l?Symbol.for("react.async_mode"):60111,v=l?Symbol.for("react.forward_ref"):60112;l&&Symbol.for("react.timeout");var g="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);i(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var w={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function _(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||w}function x(){}function S(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||w}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){"object"!==(void 0===e?"undefined":r(e))&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=_.prototype;var C=S.prototype=new x;C.constructor=S,o(C,_.prototype),C.isPureReactComponent=!0;var E={current:null},k=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!O.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];o.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:s,type:e,key:i,ref:a,props:o,_owner:E.current}}function T(e){return"object"===(void 0===e?"undefined":r(e))&&null!==e&&e.$$typeof===s}var j=/\/+/g,A=[];function R(e,t,n,r){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function F(e,t,n,o){var i=void 0===e?"undefined":r(e);"undefined"!==i&&"boolean"!==i||(e=null);var a=!1;if(null===e)a=!0;else switch(i){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case s:case c:a=!0}}if(a)return n(o,e,""===t?"."+M(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var u=0;u<e.length;u++){var l=t+M(i=e[u],u);a+=F(i,l,n,o)}else if(null===e||void 0===e?l=null:l="function"==typeof(l=g&&e[g]||e["@@iterator"])?l:null,"function"==typeof l)for(e=l.call(e),u=0;!(i=e.next()).done;)a+=F(i=i.value,l=t+M(i,u++),n,o);else"object"===i&&b("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function M(e,t){return"object"===(void 0===e?"undefined":r(e))&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function D(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,u.thatReturnsArgument):null!=e&&(T(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(j,"$&/")+"/")+n,e={$$typeof:s,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function U(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(j,"$&/")+"/"),t=R(t,i,r,o),null==e||F(e,"",D,t),N(t)}var B={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=R(null,null,t,n),null==e||F(e,"",L,t),N(t)},count:function(e){return null==e?0:F(e,"",u.thatReturnsNull,null)},toArray:function(e){var t=[];return U(e,t,null,u.thatReturnsArgument),t},only:function(e){return T(e)||b("143"),e}},createRef:function(){return{current:null}},Component:_,PureComponent:S,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:m,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:h,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:v,render:e}},Fragment:f,StrictMode:d,unstable_AsyncMode:y,unstable_Profiler:p,createElement:P,cloneElement:function(e,t,n){(null===e||void 0===e)&&b("267",e);var r=void 0,i=o({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,l=E.current),void 0!==t.key&&(a=""+t.key);var c=void 0;for(r in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)k.call(t,r)&&!O.hasOwnProperty(r)&&(i[r]=void 0===t[r]&&void 0!==c?c[r]:t[r])}if(1===(r=arguments.length-2))i.children=n;else if(1<r){c=Array(r);for(var f=0;f<r;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:s,type:e.type,key:a,ref:u,props:i,_owner:l}},createFactory:function(e){var t=P.bind(null,e);return t.type=e,t},isValidElement:T,version:"16.4.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:E,assign:o}},I={default:B},z=I&&B||I;e.exports=z.default?z.default:z},function(e,t,n){"use strict";
/** @license React v16.4.1
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(19),i=n(0),a=n(103),u=n(37),l=n(18),s=n(102),c=n(101),f=n(100),d=n(36);function p(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}i||p("227");var h={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,u,l){(function(e,t,n,r,o,i,a,u,l){this._hasCaughtError=!1,this._caughtError=null;var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(h,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,u,l){if(h.invokeGuardedCallback.apply(this,arguments),h.hasCaughtError()){var s=h.clearCaughtError();h._hasRethrowError||(h._hasRethrowError=!0,h._rethrowError=s)}},rethrowCaughtError:function(){return function(){if(h._hasRethrowError){var e=h._rethrowError;throw h._rethrowError=null,h._hasRethrowError=!1,e}}.apply(h,arguments)},hasCaughtError:function(){return h._hasCaughtError},clearCaughtError:function(){if(h._hasCaughtError){var e=h._caughtError;return h._caughtError=null,h._hasCaughtError=!1,e}p("198")}};var m=null,y={};function v(){if(m)for(var e in y){var t=y[e],n=m.indexOf(e);if(-1<n||p("96",e),!b[n])for(var r in t.extractEvents||p("97",e),b[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,u=r;w.hasOwnProperty(u)&&p("99",u),w[u]=i;var l=i.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&g(l[o],a,u);o=!0}else i.registrationName?(g(i.registrationName,a,u),o=!0):o=!1;o||p("98",r,e)}}}function g(e,t,n){_[e]&&p("100",e),_[e]=t,x[e]=t.eventTypes[n].dependencies}var b=[],w={},_={},x={};function S(e){m&&p("101"),m=Array.prototype.slice.call(e),v()}function C(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];y.hasOwnProperty(t)&&y[t]===r||(y[t]&&p("102",t),y[t]=r,n=!0)}n&&v()}var E={plugins:b,eventNameDispatchConfigs:w,registrationNameModules:_,registrationNameDependencies:x,possibleRegistrationNames:null,injectEventPluginOrder:S,injectEventPluginsByName:C},k=null,O=null,P=null;function T(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=P(r),h.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function j(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function A(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var R=null;function N(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)T(e,t,n[o],r[o]);else n&&T(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function F(e){return N(e,!0)}function M(e){return N(e,!1)}var L={injectEventPluginOrder:S,injectEventPluginsByName:C};function D(e,t){var n=e.stateNode;if(!n)return null;var o=k(n);if(!o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,void 0===n?"undefined":r(n)),n)}function U(e,t){null!==e&&(R=j(R,e)),e=R,R=null,e&&(A(e,t?F:M),R&&p("95"),h.rethrowCaughtError())}function B(e,t,n,r){for(var o=null,i=0;i<b.length;i++){var a=b[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=j(o,a))}U(o,!1)}var I={injection:L,getListener:D,runEventsInBatch:U,runExtractedEventsInBatch:B},z=Math.random().toString(36).slice(2),$="__reactInternalInstance$"+z,q="__reactEventHandlers$"+z;function H(e){if(e[$])return e[$];for(;!e[$];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[$]).tag||6===e.tag?e:null}function V(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function W(e){return e[q]||null}var G={precacheFiberNode:function(e,t){t[$]=e},getClosestInstanceFromNode:H,getInstanceFromNode:function(e){return!(e=e[$])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:V,getFiberCurrentPropsFromNode:W,updateFiberProps:function(e,t){e[q]=t}};function Y(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function K(e,t,n){for(var r=[];e;)r.push(e),e=Y(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function X(e,t,n){(t=D(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=j(n._dispatchListeners,t),n._dispatchInstances=j(n._dispatchInstances,e))}function Q(e){e&&e.dispatchConfig.phasedRegistrationNames&&K(e._targetInst,X,e)}function J(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;K(t=t?Y(t):null,X,e)}}function Z(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=D(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=j(n._dispatchListeners,t),n._dispatchInstances=j(n._dispatchInstances,e))}function ee(e){e&&e.dispatchConfig.registrationName&&Z(e._targetInst,null,e)}function te(e){A(e,Q)}function ne(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,u=o;u;u=Y(u))a++;u=0;for(var l=i;l;l=Y(l))u++;for(;0<a-u;)o=Y(o),a--;for(;0<u-a;)i=Y(i),u--;for(;a--;){if(o===i||o===i.alternate)break e;o=Y(o),i=Y(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=Y(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=Y(r);for(r=0;r<o.length;r++)Z(o[r],"bubbled",e);for(e=n.length;0<e--;)Z(n[e],"captured",t)}var re={accumulateTwoPhaseDispatches:te,accumulateTwoPhaseDispatchesSkipTarget:function(e){A(e,J)},accumulateEnterLeaveDispatches:ne,accumulateDirectDispatches:function(e){A(e,ee)}};function oe(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var ie={animationend:oe("Animation","AnimationEnd"),animationiteration:oe("Animation","AnimationIteration"),animationstart:oe("Animation","AnimationStart"),transitionend:oe("Transition","TransitionEnd")},ae={},ue={};function le(e){if(ae[e])return ae[e];if(!ie[e])return e;var t,n=ie[e];for(t in n)if(n.hasOwnProperty(t)&&t in ue)return ae[e]=n[t];return e}a.canUseDOM&&(ue=document.createElement("div").style,"AnimationEvent"in window||(delete ie.animationend.animation,delete ie.animationiteration.animation,delete ie.animationstart.animation),"TransitionEvent"in window||delete ie.transitionend.transition);var se=le("animationend"),ce=le("animationiteration"),fe=le("animationstart"),de=le("transitionend"),pe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),he=null;function me(){return!he&&a.canUseDOM&&(he="textContent"in document.documentElement?"textContent":"innerText"),he}var ye={_root:null,_startText:null,_fallbackText:null};function ve(){if(ye._fallbackText)return ye._fallbackText;var e,t,n=ye._startText,r=n.length,o=ge(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ye._fallbackText=o.slice(e,1<t?1-t:void 0),ye._fallbackText}function ge(){return"value"in ye._root?ye._root.value:ye._root[me()]}var be="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),we={type:null,target:null,currentTarget:l.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function _e(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?l.thatReturnsTrue:l.thatReturnsFalse,this.isPropagationStopped=l.thatReturnsFalse,this}function xe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Se(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Ce(e){e.eventPool=[],e.getPooled=xe,e.release=Se}u(_e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=l.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=l.thatReturnsTrue)},persist:function(){this.isPersistent=l.thatReturnsTrue},isPersistent:l.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<be.length;t++)this[be[t]]=null}}),_e.Interface=we,_e.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return u(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=u({},r.Interface,e),n.extend=r.extend,Ce(n),n},Ce(_e);var Ee=_e.extend({data:null}),ke=_e.extend({data:null}),Oe=[9,13,27,32],Pe=a.canUseDOM&&"CompositionEvent"in window,Te=null;a.canUseDOM&&"documentMode"in document&&(Te=document.documentMode);var je=a.canUseDOM&&"TextEvent"in window&&!Te,Ae=a.canUseDOM&&(!Pe||Te&&8<Te&&11>=Te),Re=String.fromCharCode(32),Ne={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Fe=!1;function Me(e,t){switch(e){case"keyup":return-1!==Oe.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Le(e){return"object"===(void 0===(e=e.detail)?"undefined":r(e))&&"data"in e?e.data:null}var De=!1;var Ue={eventTypes:Ne,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(Pe)e:{switch(e){case"compositionstart":o=Ne.compositionStart;break e;case"compositionend":o=Ne.compositionEnd;break e;case"compositionupdate":o=Ne.compositionUpdate;break e}o=void 0}else De?Me(e,n)&&(o=Ne.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Ne.compositionStart);return o?(Ae&&(De||o!==Ne.compositionStart?o===Ne.compositionEnd&&De&&(i=ve()):(ye._root=r,ye._startText=ge(),De=!0)),o=Ee.getPooled(o,t,n,r),i?o.data=i:null!==(i=Le(n))&&(o.data=i),te(o),i=o):i=null,(e=je?function(e,t){switch(e){case"compositionend":return Le(t);case"keypress":return 32!==t.which?null:(Fe=!0,Re);case"textInput":return(e=t.data)===Re&&Fe?null:e;default:return null}}(e,n):function(e,t){if(De)return"compositionend"===e||!Pe&&Me(e,t)?(e=ve(),ye._root=null,ye._startText=null,ye._fallbackText=null,De=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ae?null:t.data;default:return null}}(e,n))?((t=ke.getPooled(Ne.beforeInput,t,n,r)).data=e,te(t)):t=null,null===i?t:null===t?i:[i,t]}},Be=null,Ie={injectFiberControlledHostComponent:function(e){Be=e}},ze=null,$e=null;function qe(e){if(e=O(e)){Be&&"function"==typeof Be.restoreControlledState||p("194");var t=k(e.stateNode);Be.restoreControlledState(e.stateNode,e.type,t)}}function He(e){ze?$e?$e.push(e):$e=[e]:ze=e}function Ve(){return null!==ze||null!==$e}function We(){if(ze){var e=ze,t=$e;if($e=ze=null,qe(e),t)for(e=0;e<t.length;e++)qe(t[e])}}var Ge={injection:Ie,enqueueStateRestore:He,needsStateRestore:Ve,restoreStateIfNeeded:We};function Ye(e,t){return e(t)}function Ke(e,t,n){return e(t,n)}function Xe(){}var Qe=!1;function Je(e,t){if(Qe)return e(t);Qe=!0;try{return Ye(e,t)}finally{Qe=!1,Ve()&&(Xe(),We())}}var Ze={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function et(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ze[e.type]:"textarea"===t}function tt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function nt(e,t){return!(!a.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function rt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ot(e){e._valueTracker||(e._valueTracker=function(e){var t=rt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function it(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=rt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var at=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,ut="function"==typeof Symbol&&Symbol.for,lt=ut?Symbol.for("react.element"):60103,st=ut?Symbol.for("react.portal"):60106,ct=ut?Symbol.for("react.fragment"):60107,ft=ut?Symbol.for("react.strict_mode"):60108,dt=ut?Symbol.for("react.profiler"):60114,pt=ut?Symbol.for("react.provider"):60109,ht=ut?Symbol.for("react.context"):60110,mt=ut?Symbol.for("react.async_mode"):60111,yt=ut?Symbol.for("react.forward_ref"):60112,vt=ut?Symbol.for("react.timeout"):60113,gt="function"==typeof Symbol&&Symbol.iterator;function bt(e){return null===e||void 0===e?null:"function"==typeof(e=gt&&e[gt]||e["@@iterator"])?e:null}function wt(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case mt:return"AsyncMode";case ht:return"Context.Consumer";case ct:return"ReactFragment";case st:return"ReactPortal";case dt:return"Profiler("+e.pendingProps.id+")";case pt:return"Context.Provider";case ft:return"StrictMode";case vt:return"Timeout"}if("object"===(void 0===t?"undefined":r(t))&&null!==t)switch(t.$$typeof){case yt:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function _t(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=wt(e),i=null;n&&(i=wt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var xt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,St={},Ct={};function Et(e,t,n,o){if(null===t||void 0===t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(void 0===t?"undefined":r(t)){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(o)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function kt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var Ot={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Ot[e]=new kt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Ot[t]=new kt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){Ot[e]=new kt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){Ot[e]=new kt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Ot[e]=new kt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){Ot[e]=new kt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){Ot[e]=new kt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){Ot[e]=new kt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){Ot[e]=new kt(e,5,!1,e.toLowerCase(),null)});var Pt=/[\-:]([a-z])/g;function Tt(e){return e[1].toUpperCase()}function jt(e,t,n,r){var o=Ot.hasOwnProperty(t)?Ot[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(Et(t,n,o,r)&&(n=null),r||null===o?function(e){return!!Ct.hasOwnProperty(e)||!St.hasOwnProperty(e)&&(xt.test(e)?Ct[e]=!0:(St[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function At(e,t){var n=t.checked;return u({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Rt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Dt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Nt(e,t){null!=(t=t.checked)&&jt(e,"checked",t,!1)}function Ft(e,t){Nt(e,t);var n=Dt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?Lt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Lt(e,t.type,Dt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Mt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){t=""+e._wrapperState.initialValue;var r=e.value;n||t===r||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==n&&(e.name=n)}function Lt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Dt(e){switch(void 0===e?"undefined":r(e)){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Pt,Tt);Ot[t]=new kt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Pt,Tt);Ot[t]=new kt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Pt,Tt);Ot[t]=new kt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),Ot.tabIndex=new kt("tabIndex",1,!1,"tabindex",null);var Ut={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Bt(e,t,n){return(e=_e.getPooled(Ut.change,e,t,n)).type="change",He(n),te(e),e}var It=null,zt=null;function $t(e){U(e,!1)}function qt(e){if(it(V(e)))return e}function Ht(e,t){if("change"===e)return t}var Vt=!1;function Wt(){It&&(It.detachEvent("onpropertychange",Gt),zt=It=null)}function Gt(e){"value"===e.propertyName&&qt(zt)&&Je($t,e=Bt(zt,e,tt(e)))}function Yt(e,t,n){"focus"===e?(Wt(),zt=n,(It=t).attachEvent("onpropertychange",Gt)):"blur"===e&&Wt()}function Kt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qt(zt)}function Xt(e,t){if("click"===e)return qt(t)}function Qt(e,t){if("input"===e||"change"===e)return qt(t)}a.canUseDOM&&(Vt=nt("input")&&(!document.documentMode||9<document.documentMode));var Jt={eventTypes:Ut,_isInputEventSupported:Vt,extractEvents:function(e,t,n,r){var o=t?V(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Ht:et(o)?Vt?i=Qt:(i=Kt,a=Yt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Xt),i&&(i=i(e,t)))return Bt(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Lt(o,"number",o.value)}},Zt=_e.extend({view:null,detail:null}),en={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function tn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=en[e])&&!!t[e]}function nn(){return tn}var rn=Zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:nn,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),on=rn.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),an={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},un={eventTypes:an,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?H(t):null):i=null,i===t)return null;var a=void 0,u=void 0,l=void 0,s=void 0;return"mouseout"===e||"mouseover"===e?(a=rn,u=an.mouseLeave,l=an.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=on,u=an.pointerLeave,l=an.pointerEnter,s="pointer"),e=null==i?o:V(i),o=null==t?o:V(t),(u=a.getPooled(u,i,n,r)).type=s+"leave",u.target=e,u.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=e,ne(u,n,i,t),[u,n]}};function ln(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function sn(e){2!==ln(e)&&p("188")}function cn(e){var t=e.alternate;if(!t)return 3===(t=ln(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return sn(o),e;if(a===r)return sn(o),t;a=a.sibling}p("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function fn(e){if(!(e=cn(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var dn=_e.extend({animationName:null,elapsedTime:null,pseudoElement:null}),pn=_e.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),hn=Zt.extend({relatedTarget:null});function mn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var yn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},vn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},gn=Zt.extend({key:function(e){if(e.key){var t=yn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=mn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?vn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:nn,charCode:function(e){return"keypress"===e.type?mn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?mn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),bn=rn.extend({dataTransfer:null}),wn=Zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:nn}),_n=_e.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),xn=rn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),Sn=[["abort","abort"],[se,"animationEnd"],[ce,"animationIteration"],[fe,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[de,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],Cn={},En={};function kn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},Cn[e]=t,En[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){kn(e,!0)}),Sn.forEach(function(e){kn(e,!1)});var On={eventTypes:Cn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=En[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=En[e];if(!o)return null;switch(e){case"keypress":if(0===mn(n))return null;case"keydown":case"keyup":e=gn;break;case"blur":case"focus":e=hn;break;case"click":if(2===n.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=rn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=bn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=wn;break;case se:case ce:case fe:e=dn;break;case de:e=_n;break;case"scroll":e=Zt;break;case"wheel":e=xn;break;case"copy":case"cut":case"paste":e=pn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=on;break;default:e=_e}return te(t=e.getPooled(o,t,n,r)),t}},Pn=On.isInteractiveTopLevelEventType,Tn=[];function jn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=H(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],B(e.topLevelType,t,e.nativeEvent,tt(e.nativeEvent))}var An=!0;function Rn(e){An=!!e}function Nn(e,t){if(!t)return null;var n=(Pn(e)?Mn:Ln).bind(null,e);t.addEventListener(e,n,!1)}function Fn(e,t){if(!t)return null;var n=(Pn(e)?Mn:Ln).bind(null,e);t.addEventListener(e,n,!0)}function Mn(e,t){Ke(Ln,e,t)}function Ln(e,t){if(An){var n=tt(t);if(null===(n=H(n))||"number"!=typeof n.tag||2===ln(n)||(n=null),Tn.length){var r=Tn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Je(jn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Tn.length&&Tn.push(e)}}}var Dn={get _enabled(){return An},setEnabled:Rn,isEnabled:function(){return An},trapBubbledEvent:Nn,trapCapturedEvent:Fn,dispatchEvent:Ln},Un={},Bn=0,In="_reactListenersID"+(""+Math.random()).slice(2);function zn(e){return Object.prototype.hasOwnProperty.call(e,In)||(e[In]=Bn++,Un[e[In]]={}),Un[e[In]]}function $n(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function qn(e,t){var n,r=$n(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=$n(r)}}function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Vn=a.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Wn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Gn=null,Yn=null,Kn=null,Xn=!1;function Qn(e,t){if(Xn||null==Gn||Gn!==s())return null;var n=Gn;return"selectionStart"in n&&Hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Kn&&c(Kn,n)?null:(Kn=n,(e=_e.getPooled(Wn.select,Yn,e,t)).type="select",e.target=Gn,te(e),e)}var Jn={eventTypes:Wn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=zn(i),o=x.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?V(t):window,e){case"focus":(et(i)||"true"===i.contentEditable)&&(Gn=i,Yn=t,Kn=null);break;case"blur":Kn=Yn=Gn=null;break;case"mousedown":Xn=!0;break;case"contextmenu":case"mouseup":return Xn=!1,Qn(n,r);case"selectionchange":if(Vn)break;case"keydown":case"keyup":return Qn(n,r)}return null}};L.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=G.getFiberCurrentPropsFromNode,O=G.getInstanceFromNode,P=G.getNodeFromInstance,L.injectEventPluginsByName({SimpleEventPlugin:On,EnterLeaveEventPlugin:un,ChangeEventPlugin:Jt,SelectEventPlugin:Jn,BeforeInputEventPlugin:Ue});var Zn="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,er=Date,tr=setTimeout,nr=clearTimeout,rr=void 0;if("object"===("undefined"==typeof performance?"undefined":r(performance))&&"function"==typeof performance.now){var or=performance;rr=function(){return or.now()}}else rr=function(){return er.now()};var ir=void 0,ar=void 0;if(a.canUseDOM){var ur="function"==typeof Zn?Zn:function(){p("276")},lr=null,sr=null,cr=-1,fr=!1,dr=!1,pr=0,hr=33,mr=33,yr={didTimeout:!1,timeRemaining:function(){var e=pr-rr();return 0<e?e:0}},vr=function(e,t){var n=e.scheduledCallback,r=!1;try{n(t),r=!0}finally{ar(e),r||(fr=!0,window.postMessage(gr,"*"))}},gr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===gr&&(fr=!1,null!==lr)){if(null!==lr){var t=rr();if(!(-1===cr||cr>t)){e=-1;for(var n=[],r=lr;null!==r;){var o=r.timeoutTime;-1!==o&&o<=t?n.push(r):-1!==o&&(-1===e||o<e)&&(e=o),r=r.next}if(0<n.length)for(yr.didTimeout=!0,t=0,r=n.length;t<r;t++)vr(n[t],yr);cr=e}}for(e=rr();0<pr-e&&null!==lr;)e=lr,yr.didTimeout=!1,vr(e,yr),e=rr();null===lr||dr||(dr=!0,ur(br))}},!1);var br=function(e){dr=!1;var t=e-pr+mr;t<mr&&hr<mr?(8>t&&(t=8),mr=t<hr?hr:t):hr=t,pr=e+mr,fr||(fr=!0,window.postMessage(gr,"*"))};ir=function(e,t){var n=-1;return null!=t&&"number"==typeof t.timeout&&(n=rr()+t.timeout),(-1===cr||-1!==n&&n<cr)&&(cr=n),e={scheduledCallback:e,timeoutTime:n,prev:null,next:null},null===lr?lr=e:null!==(t=e.prev=sr)&&(t.next=e),sr=e,dr||(dr=!0,ur(br)),e},ar=function(e){if(null!==e.prev||lr===e){var t=e.next,n=e.prev;e.next=null,e.prev=null,null!==t?null!==n?(n.next=t,t.prev=n):(t.prev=null,lr=t):null!==n?(n.next=null,sr=n):sr=lr=null}}}else{var wr=new Map;ir=function(e){var t={scheduledCallback:e,timeoutTime:0,next:null,prev:null},n=tr(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return wr.set(e,n),t},ar=function(e){var t=wr.get(e.scheduledCallback);wr.delete(e),nr(t)}}function _r(e,t){return e=u({children:void 0},t),(t=function(e){var t="";return i.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function xr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Sr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Cr(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),u({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Er(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function kr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Or(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Pr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Tr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function jr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Tr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Ar,Rr=void 0,Nr=(Ar=function(e,t){if(e.namespaceURI!==Pr.svg||"innerHTML"in e)e.innerHTML=t;else{for((Rr=Rr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Rr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Ar(e,t)})}:Ar);function Fr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Mr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Lr=["Webkit","ms","Moz","O"];function Dr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||Mr.hasOwnProperty(o)&&Mr[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Mr).forEach(function(e){Lr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Mr[t]=Mr[e]})});var Ur=u({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Br(e,t,n){t&&(Ur[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"===r(t.dangerouslySetInnerHTML)&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!==r(t.style)&&p("62",n()))}function Ir(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var zr=l.thatReturns("");function $r(e,t){var n=zn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=x[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Fn("scroll",e);break;case"focus":case"blur":Fn("focus",e),Fn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":nt(o,!0)&&Fn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===pe.indexOf(o)&&Nn(o,e)}n[o]=!0}}}function qr(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Pr.html&&(r=Tr(e)),r===Pr.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function Hr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Vr(e,t,n,r){var o=Ir(t,n);switch(t){case"iframe":case"object":Nn("load",e);var i=n;break;case"video":case"audio":for(i=0;i<pe.length;i++)Nn(pe[i],e);i=n;break;case"source":Nn("error",e),i=n;break;case"img":case"image":case"link":Nn("error",e),Nn("load",e),i=n;break;case"form":Nn("reset",e),Nn("submit",e),i=n;break;case"details":Nn("toggle",e),i=n;break;case"input":Rt(e,n),i=At(e,n),Nn("invalid",e),$r(r,"onChange");break;case"option":i=_r(e,n);break;case"select":Sr(e,n),i=u({},n,{value:void 0}),Nn("invalid",e),$r(r,"onChange");break;case"textarea":Er(e,n),i=Cr(e,n),Nn("invalid",e),$r(r,"onChange");break;default:i=n}Br(t,i,zr);var a,s=i;for(a in s)if(s.hasOwnProperty(a)){var c=s[a];"style"===a?Dr(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&Nr(e,c):"children"===a?"string"==typeof c?("textarea"!==t||""!==c)&&Fr(e,c):"number"==typeof c&&Fr(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(_.hasOwnProperty(a)?null!=c&&$r(r,a):null!=c&&jt(e,a,c,o))}switch(t){case"input":ot(e),Mt(e,n,!1);break;case"textarea":ot(e),Or(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?xr(e,!!n.multiple,t,!1):null!=n.defaultValue&&xr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=l)}}function Wr(e,t,n,r,o){var i=null;switch(t){case"input":n=At(e,n),r=At(e,r),i=[];break;case"option":n=_r(e,n),r=_r(e,r),i=[];break;case"select":n=u({},n,{value:void 0}),r=u({},r,{value:void 0}),i=[];break;case"textarea":n=Cr(e,n),r=Cr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=l)}Br(t,r,zr),t=e=void 0;var a=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var s=n[e];for(t in s)s.hasOwnProperty(t)&&(a||(a={}),a[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(_.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var c=r[e];if(s=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==s&&(null!=c||null!=s))if("style"===e)if(s){for(t in s)!s.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(a||(a={}),a[t]="");for(t in c)c.hasOwnProperty(t)&&s[t]!==c[t]&&(a||(a={}),a[t]=c[t])}else a||(i||(i=[]),i.push(e,a)),a=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(i=i||[]).push(e,""+c)):"children"===e?s===c||"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(_.hasOwnProperty(e)?(null!=c&&$r(o,e),i||s===c||(i=[])):(i=i||[]).push(e,c))}return a&&(i=i||[]).push("style",a),i}function Gr(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Nt(e,o),Ir(n,r),r=Ir(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?Dr(e,u):"dangerouslySetInnerHTML"===a?Nr(e,u):"children"===a?Fr(e,u):jt(e,a,u,r)}switch(n){case"input":Ft(e,o);break;case"textarea":kr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?xr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?xr(e,!!o.multiple,o.defaultValue,!0):xr(e,!!o.multiple,o.multiple?[]:"",!1))}}function Yr(e,t,n,r,o){switch(t){case"iframe":case"object":Nn("load",e);break;case"video":case"audio":for(r=0;r<pe.length;r++)Nn(pe[r],e);break;case"source":Nn("error",e);break;case"img":case"image":case"link":Nn("error",e),Nn("load",e);break;case"form":Nn("reset",e),Nn("submit",e);break;case"details":Nn("toggle",e);break;case"input":Rt(e,n),Nn("invalid",e),$r(o,"onChange");break;case"select":Sr(e,n),Nn("invalid",e),$r(o,"onChange");break;case"textarea":Er(e,n),Nn("invalid",e),$r(o,"onChange")}for(var i in Br(t,n,zr),r=null,n)if(n.hasOwnProperty(i)){var a=n[i];"children"===i?"string"==typeof a?e.textContent!==a&&(r=["children",a]):"number"==typeof a&&e.textContent!==""+a&&(r=["children",""+a]):_.hasOwnProperty(i)&&null!=a&&$r(o,i)}switch(t){case"input":ot(e),Mt(e,n,!0);break;case"textarea":ot(e),Or(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=l)}return r}function Kr(e,t){return e.nodeValue!==t}var Xr={createElement:qr,createTextNode:Hr,setInitialProperties:Vr,diffProperties:Wr,updateProperties:Gr,diffHydratedProperties:Yr,diffHydratedText:Kr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Ft(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=W(r);o||p("90"),it(r),Ft(r,o)}}}break;case"textarea":kr(e,n);break;case"select":null!=(t=n.value)&&xr(e,!!n.multiple,t,!1)}}},Qr=null,Jr=null;function Zr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function eo(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"===r(t.dangerouslySetInnerHTML)&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var to=rr,no=ir,ro=ar;function oo(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function io(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var ao=[],uo=-1;function lo(e){return{current:e}}function so(e){0>uo||(e.current=ao[uo],ao[uo]=null,uo--)}function co(e,t){ao[++uo]=e.current,e.current=t}var fo=lo(d),po=lo(!1),ho=d;function mo(e){return vo(e)?ho:fo.current}function yo(e,t){var n=e.type.contextTypes;if(!n)return d;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function vo(e){return 2===e.tag&&null!=e.type.childContextTypes}function go(e){vo(e)&&(so(po),so(fo))}function bo(e){so(po),so(fo)}function wo(e,t,n){fo.current!==d&&p("168"),co(fo,t),co(po,n)}function _o(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",wt(e)||"Unknown",o);return u({},t,n)}function xo(e){if(!vo(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||d,ho=fo.current,co(fo,t),co(po,po.current),!0}function So(e,t){var n=e.stateNode;if(n||p("169"),t){var r=_o(e,ho);n.__reactInternalMemoizedMergedChildContext=r,so(po),so(fo),co(fo,r)}else so(po);co(po,t)}function Co(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Eo(e,t,n){var r=e.alternate;return null===r?((r=new Co(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function ko(e,t,n){var o=e.type,i=e.key;if(e=e.props,"function"==typeof o)var a=o.prototype&&o.prototype.isReactComponent?2:0;else if("string"==typeof o)a=5;else switch(o){case ct:return Oo(e.children,t,n,i);case mt:a=11,t|=3;break;case ft:a=11,t|=2;break;case dt:return(o=new Co(15,e,i,4|t)).type=dt,o.expirationTime=n,o;case vt:a=16,t|=2;break;default:e:{switch("object"===(void 0===o?"undefined":r(o))&&null!==o?o.$$typeof:null){case pt:a=13;break e;case ht:a=12;break e;case yt:a=14;break e;default:p("130",null==o?o:void 0===o?"undefined":r(o),"")}a=void 0}}return(t=new Co(a,e,i,t)).type=o,t.expirationTime=n,t}function Oo(e,t,n,r){return(e=new Co(10,e,r,t)).expirationTime=n,e}function Po(e,t,n){return(e=new Co(6,e,null,t)).expirationTime=n,e}function To(e,t,n){return(t=new Co(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function jo(e,t,n){return e={current:t=new Co(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var Ao=null,Ro=null;function No(e){return function(t){try{return e(t)}catch(e){}}}function Fo(e){"function"==typeof Ao&&Ao(e)}function Mo(e){"function"==typeof Ro&&Ro(e)}var Lo=!1;function Do(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Uo(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Bo(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Io(e,t,n){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n)}function zo(e,t,n){var r=e.alternate;if(null===r){var o=e.updateQueue,i=null;null===o&&(o=e.updateQueue=Do(e.memoizedState))}else o=e.updateQueue,i=r.updateQueue,null===o?null===i?(o=e.updateQueue=Do(e.memoizedState),i=r.updateQueue=Do(r.memoizedState)):o=e.updateQueue=Uo(i):null===i&&(i=r.updateQueue=Uo(o));null===i||o===i?Io(o,t,n):null===o.lastUpdate||null===i.lastUpdate?(Io(o,t,n),Io(i,t,n)):(Io(o,t,n),i.lastUpdate=t)}function $o(e,t,n){var r=e.updateQueue;null===(r=null===r?e.updateQueue=Do(e.memoizedState):qo(e,r)).lastCapturedUpdate?r.firstCapturedUpdate=r.lastCapturedUpdate=t:(r.lastCapturedUpdate.next=t,r.lastCapturedUpdate=t),(0===r.expirationTime||r.expirationTime>n)&&(r.expirationTime=n)}function qo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Uo(t)),t}function Ho(e,t,n,r,o,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,o):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(o="function"==typeof(e=n.payload)?e.call(i,r,o):e)||void 0===o)break;return u({},r,o);case 2:Lo=!0}return r}function Vo(e,t,n,r,o){if(Lo=!1,!(0===t.expirationTime||t.expirationTime>o)){for(var i=(t=qo(e,t)).baseState,a=null,u=0,l=t.firstUpdate,s=i;null!==l;){var c=l.expirationTime;c>o?(null===a&&(a=l,i=s),(0===u||u>c)&&(u=c)):(s=Ho(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(c=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f>o?(null===c&&(c=l,null===a&&(i=s)),(0===u||u>f)&&(u=f)):(s=Ho(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(i=s),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=c,t.expirationTime=u,e.memoizedState=s}}function Wo(e,t){"function"!=typeof e&&p("191",e),e.call(t)}function Go(e,t,n){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var r=e.callback;null!==r&&(e.callback=null,Wo(r,n)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,Wo(t,n)),e=e.nextEffect}function Yo(e,t){return{value:e,source:t,stack:_t(t)}}var Ko=lo(null),Xo=lo(null),Qo=lo(0);function Jo(e){var t=e.type._context;co(Qo,t._changedBits),co(Xo,t._currentValue),co(Ko,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function Zo(e){var t=Qo.current,n=Xo.current;so(Ko),so(Xo),so(Qo),(e=e.type._context)._currentValue=n,e._changedBits=t}var ei={},ti=lo(ei),ni=lo(ei),ri=lo(ei);function oi(e){return e===ei&&p("174"),e}function ii(e,t){co(ri,t),co(ni,e),co(ti,ei);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:jr(null,"");break;default:t=jr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}so(ti),co(ti,t)}function ai(e){so(ti),so(ni),so(ri)}function ui(e){ni.current===e&&(so(ti),so(ni))}function li(e,t,n){var r=e.memoizedState;r=null===(t=t(n,r))||void 0===t?r:u({},r,t),e.memoizedState=r,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=r)}var si={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===ln(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=_a(),o=Bo(r=ba(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),zo(e,o,r),wa(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=_a(),o=Bo(r=ba(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),zo(e,o,r),wa(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=_a(),r=Bo(n=ba(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),zo(e,r,n),wa(e,n)}};function ci(e,t,n,r,o,i){var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!e.prototype||!e.prototype.isPureReactComponent||(!c(t,n)||!c(r,o))}function fi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&si.enqueueReplaceState(t,t.state,null)}function di(e,t){var n=e.type,r=e.stateNode,o=e.pendingProps,i=mo(e);r.props=o,r.state=e.memoizedState,r.refs=d,r.context=yo(e,i),null!==(i=e.updateQueue)&&(Vo(e,i,o,r,t),r.state=e.memoizedState),"function"==typeof(i=e.type.getDerivedStateFromProps)&&(li(e,i,o),r.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&si.enqueueReplaceState(r,r.state,null),null!==(i=e.updateQueue)&&(Vo(e,i,o,r,t),r.state=e.memoizedState)),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var pi=Array.isArray;function hi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!==(void 0===e?"undefined":r(e))){if(n._owner){var o=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),o=n.stateNode),o||p("147",e);var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=o.refs===d?o.refs={}:o.refs;null===e?delete t[i]:t[i]=e})._stringRef=i,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function mi(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function yi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=Eo(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Po(n,e.mode,r)).return=e,t):((t=i(t,n,r)).return=e,t)}function s(e,t,n,r){return null!==t&&t.type===n.type?((r=i(t,n.props,r)).ref=hi(e,t,n),r.return=e,r):((r=ko(n,e.mode,r)).ref=hi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=To(n,e.mode,r)).return=e,t):((t=i(t,n.children||[],r)).return=e,t)}function f(e,t,n,r,o){return null===t||10!==t.tag?((t=Oo(n,e.mode,r,o)).return=e,t):((t=i(t,n,r)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Po(""+t,e.mode,n)).return=e,t;if("object"===(void 0===t?"undefined":r(t))&&null!==t){switch(t.$$typeof){case lt:return(n=ko(t,e.mode,n)).ref=hi(e,null,t),n.return=e,n;case st:return(t=To(t,e.mode,n)).return=e,t}if(pi(t)||bt(t))return(t=Oo(t,e.mode,n,null)).return=e,t;mi(e,t)}return null}function h(e,t,n,o){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,o);if("object"===(void 0===n?"undefined":r(n))&&null!==n){switch(n.$$typeof){case lt:return n.key===i?n.type===ct?f(e,t,n.props.children,o,i):s(e,t,n,o):null;case st:return n.key===i?c(e,t,n,o):null}if(pi(n)||bt(n))return null!==i?null:f(e,t,n,o,null);mi(e,n)}return null}function m(e,t,n,o,i){if("string"==typeof o||"number"==typeof o)return l(t,e=e.get(n)||null,""+o,i);if("object"===(void 0===o?"undefined":r(o))&&null!==o){switch(o.$$typeof){case lt:return e=e.get(null===o.key?n:o.key)||null,o.type===ct?f(t,e,o.props.children,i,o.key):s(t,e,o,i);case st:return c(t,e=e.get(null===o.key?n:o.key)||null,o,i)}if(pi(o)||bt(o))return f(t,e=e.get(n)||null,o,i,null);mi(t,o)}return null}function y(r,i,u,l){for(var s=null,c=null,f=i,p=i=0,y=null;null!==f&&p<u.length;p++){f.index>p?(y=f,f=null):y=f.sibling;var v=h(r,f,u[p],l);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(r,f),i=a(v,i,p),null===c?s=v:c.sibling=v,c=v,f=y}if(p===u.length)return n(r,f),s;if(null===f){for(;p<u.length;p++)(f=d(r,u[p],l))&&(i=a(f,i,p),null===c?s=f:c.sibling=f,c=f);return s}for(f=o(r,f);p<u.length;p++)(y=m(f,r,p,u[p],l))&&(e&&null!==y.alternate&&f.delete(null===y.key?p:y.key),i=a(y,i,p),null===c?s=y:c.sibling=y,c=y);return e&&f.forEach(function(e){return t(r,e)}),s}function v(r,i,u,l){var s=bt(u);"function"!=typeof s&&p("150"),null==(u=s.call(u))&&p("151");for(var c=s=null,f=i,y=i=0,v=null,g=u.next();null!==f&&!g.done;y++,g=u.next()){f.index>y?(v=f,f=null):v=f.sibling;var b=h(r,f,g.value,l);if(null===b){f||(f=v);break}e&&f&&null===b.alternate&&t(r,f),i=a(b,i,y),null===c?s=b:c.sibling=b,c=b,f=v}if(g.done)return n(r,f),s;if(null===f){for(;!g.done;y++,g=u.next())null!==(g=d(r,g.value,l))&&(i=a(g,i,y),null===c?s=g:c.sibling=g,c=g);return s}for(f=o(r,f);!g.done;y++,g=u.next())null!==(g=m(f,r,y,g.value,l))&&(e&&null!==g.alternate&&f.delete(null===g.key?y:g.key),i=a(g,i,y),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach(function(e){return t(r,e)}),s}return function(e,o,a,l){var s="object"===(void 0===a?"undefined":r(a))&&null!==a&&a.type===ct&&null===a.key;s&&(a=a.props.children);var c="object"===(void 0===a?"undefined":r(a))&&null!==a;if(c)switch(a.$$typeof){case lt:e:{for(c=a.key,s=o;null!==s;){if(s.key===c){if(10===s.tag?a.type===ct:s.type===a.type){n(e,s.sibling),(o=i(s,a.type===ct?a.props.children:a.props,l)).ref=hi(e,s,a),o.return=e,e=o;break e}n(e,s);break}t(e,s),s=s.sibling}a.type===ct?((o=Oo(a.props.children,e.mode,l,a.key)).return=e,e=o):((l=ko(a,e.mode,l)).ref=hi(e,o,a),l.return=e,e=l)}return u(e);case st:e:{for(s=a.key;null!==o;){if(o.key===s){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(e,o.sibling),(o=i(o,a.children||[],l)).return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}(o=To(a,e.mode,l)).return=e,e=o}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==o&&6===o.tag?(n(e,o.sibling),(o=i(o,a,l)).return=e,e=o):(n(e,o),(o=Po(a,e.mode,l)).return=e,e=o),u(e);if(pi(a))return y(e,o,a,l);if(bt(a))return v(e,o,a,l);if(c&&mi(e,a),void 0===a&&!s)switch(e.tag){case 2:case 1:p("152",(l=e.type).displayName||l.name||"Component")}return n(e,o)}}var vi=yi(!0),gi=yi(!1),bi=null,wi=null,_i=!1;function xi(e,t){var n=new Co(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Si(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Ci(e){if(_i){var t=wi;if(t){var n=t;if(!Si(e,t)){if(!(t=oo(n))||!Si(e,t))return e.effectTag|=2,_i=!1,void(bi=e);xi(bi,n)}bi=e,wi=io(t)}else e.effectTag|=2,_i=!1,bi=e}}function Ei(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;bi=e}function ki(e){if(e!==bi)return!1;if(!_i)return Ei(e),_i=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!eo(t,e.memoizedProps))for(t=wi;t;)xi(e,t),t=oo(t);return Ei(e),wi=bi?oo(e.stateNode):null,!0}function Oi(){wi=bi=null,_i=!1}function Pi(e,t,n){Ti(e,t,n,t.expirationTime)}function Ti(e,t,n,r){t.child=null===e?gi(t,null,n,r):vi(t,e.child,n,r)}function ji(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ai(e,t,n,r,o){ji(e,t);var i=0!=(64&t.effectTag);if(!n&&!i)return r&&So(t,!1),Fi(e,t);n=t.stateNode,at.current=t;var a=i?null:n.render();return t.effectTag|=1,i&&(Ti(e,t,null,o),t.child=null),Ti(e,t,a,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&So(t,!0),t.child}function Ri(e){var t=e.stateNode;t.pendingContext?wo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&wo(0,t.context,!1),ii(e,t.containerInfo)}function Ni(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){o.return=i.return,i=o;break}i=i.return}o=i}}function Fi(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=Eo(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Eo(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Mi(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:Ri(t);break;case 2:xo(t);break;case 4:ii(t,t.stateNode.containerInfo);break;case 13:Jo(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var o=t.type,i=t.pendingProps,a=mo(t);return o=o(i,a=yo(t,a)),t.effectTag|=1,"object"===(void 0===o?"undefined":r(o))&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(a=t.type,t.tag=2,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,"function"==typeof(a=a.getDerivedStateFromProps)&&li(t,a,i),i=xo(t),o.updater=si,t.stateNode=o,o._reactInternalFiber=t,di(t,n),e=Ai(e,t,!0,i,n)):(t.tag=1,Pi(e,t,o),t.memoizedProps=i,e=t.child),e;case 1:return i=t.type,n=t.pendingProps,po.current||t.memoizedProps!==n?(i=i(n,o=yo(t,o=mo(t))),t.effectTag|=1,Pi(e,t,i),t.memoizedProps=n,e=t.child):e=Fi(e,t),e;case 2:if(i=xo(t),null===e)if(null===t.stateNode){var u=t.pendingProps,l=t.type;o=mo(t);var s=2===t.tag&&null!=t.type.contextTypes;u=new l(u,a=s?yo(t,o):d),t.memoizedState=null!==u.state&&void 0!==u.state?u.state:null,u.updater=si,t.stateNode=u,u._reactInternalFiber=t,s&&((s=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,s.__reactInternalMemoizedMaskedChildContext=a),di(t,n),o=!0}else{l=t.type,o=t.stateNode,s=t.memoizedProps,a=t.pendingProps,o.props=s;var c=o.context;u=yo(t,u=mo(t));var f=l.getDerivedStateFromProps;(l="function"==typeof f||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==a||c!==u)&&fi(t,o,a,u),Lo=!1;var h=t.memoizedState;c=o.state=h;var m=t.updateQueue;null!==m&&(Vo(t,m,a,o,n),c=t.memoizedState),s!==a||h!==c||po.current||Lo?("function"==typeof f&&(li(t,f,a),c=t.memoizedState),(s=Lo||ci(t,s,a,h,c,u))?(l||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.effectTag|=4)):("function"==typeof o.componentDidMount&&(t.effectTag|=4),t.memoizedProps=a,t.memoizedState=c),o.props=a,o.state=c,o.context=u,o=s):("function"==typeof o.componentDidMount&&(t.effectTag|=4),o=!1)}else l=t.type,o=t.stateNode,a=t.memoizedProps,s=t.pendingProps,o.props=a,c=o.context,u=yo(t,u=mo(t)),(l="function"==typeof(f=l.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(a!==s||c!==u)&&fi(t,o,s,u),Lo=!1,c=t.memoizedState,h=o.state=c,null!==(m=t.updateQueue)&&(Vo(t,m,s,o,n),h=t.memoizedState),a!==s||c!==h||po.current||Lo?("function"==typeof f&&(li(t,f,s),h=t.memoizedState),(f=Lo||ci(t,a,s,c,h,u))?(l||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(s,h,u),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(s,h,u)),"function"==typeof o.componentDidUpdate&&(t.effectTag|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof o.componentDidUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=s,t.memoizedState=h),o.props=s,o.state=h,o.context=u,o=f):("function"!=typeof o.componentDidUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),o=!1);return Ai(e,t,o,i,n);case 3:return Ri(t),null!==(i=t.updateQueue)?(o=null!==(o=t.memoizedState)?o.element:null,Vo(t,i,t.pendingProps,null,n),(i=t.memoizedState.element)===o?(Oi(),e=Fi(e,t)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(wi=io(t.stateNode.containerInfo),bi=t,o=_i=!0),o?(t.effectTag|=2,t.child=gi(t,null,i,n)):(Oi(),Pi(e,t,i)),e=t.child)):(Oi(),e=Fi(e,t)),e;case 5:return oi(ri.current),(i=oi(ti.current))!==(o=jr(i,t.type))&&(co(ni,t),co(ti,o)),null===e&&Ci(t),i=t.type,s=t.memoizedProps,o=t.pendingProps,a=null!==e?e.memoizedProps:null,po.current||s!==o||((s=1&t.mode&&!!o.hidden)&&(t.expirationTime=1073741823),s&&1073741823===n)?(s=o.children,eo(i,o)?s=null:a&&eo(i,a)&&(t.effectTag|=16),ji(e,t),1073741823!==n&&1&t.mode&&o.hidden?(t.expirationTime=1073741823,t.memoizedProps=o,e=null):(Pi(e,t,s),t.memoizedProps=o,e=t.child)):e=Fi(e,t),e;case 6:return null===e&&Ci(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return ii(t,t.stateNode.containerInfo),i=t.pendingProps,po.current||t.memoizedProps!==i?(null===e?t.child=vi(t,null,i,n):Pi(e,t,i),t.memoizedProps=i,e=t.child):e=Fi(e,t),e;case 14:return i=t.type.render,n=t.pendingProps,o=t.ref,po.current||t.memoizedProps!==n||o!==(null!==e?e.ref:null)?(Pi(e,t,i=i(n,o)),t.memoizedProps=n,e=t.child):e=Fi(e,t),e;case 10:return n=t.pendingProps,po.current||t.memoizedProps!==n?(Pi(e,t,n),t.memoizedProps=n,e=t.child):e=Fi(e,t),e;case 11:return n=t.pendingProps.children,po.current||null!==n&&t.memoizedProps!==n?(Pi(e,t,n),t.memoizedProps=n,e=t.child):e=Fi(e,t),e;case 15:return n=t.pendingProps,t.memoizedProps===n?e=Fi(e,t):(Pi(e,t,n.children),t.memoizedProps=n,e=t.child),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps,a=!0;if(po.current)a=!1;else if(i===o)return t.stateNode=0,Jo(t),Fi(e,t);var u=o.value;if(t.memoizedProps=o,null===i)u=1073741823;else if(i.value===o.value){if(i.children===o.children&&a)return t.stateNode=0,Jo(t),Fi(e,t);u=0}else{var l=i.value;if(l===u&&(0!==l||1/l==1/u)||l!=l&&u!=u){if(i.children===o.children&&a)return t.stateNode=0,Jo(t),Fi(e,t);u=0}else if(u="function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,u):1073741823,0==(u|=0)){if(i.children===o.children&&a)return t.stateNode=0,Jo(t),Fi(e,t)}else Ni(t,r,u,n)}return t.stateNode=u,Jo(t),Pi(e,t,o.children),t.child}(e,t,n);case 12:e:if(o=t.type,a=t.pendingProps,s=t.memoizedProps,i=o._currentValue,u=o._changedBits,po.current||0!==u||s!==a){if(t.memoizedProps=a,void 0!==(l=a.unstable_observedBits)&&null!==l||(l=1073741823),t.stateNode=l,0!=(u&l))Ni(t,o,u,n);else if(s===a){e=Fi(e,t);break e}n=(n=a.children)(i),t.effectTag|=1,Pi(e,t,n),e=t.child}else e=Fi(e,t);return e;default:p("156")}}function Li(e){e.effectTag|=4}var Di=void 0,Ui=void 0,Bi=void 0;function Ii(e,t){var n=t.pendingProps;switch(t.tag){case 1:return null;case 2:return go(t),null;case 3:ai(),bo();var r=t.stateNode;return r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(ki(t),t.effectTag&=-3),Di(t),null;case 5:ui(t),r=oi(ri.current);var o=t.type;if(null!==e&&null!=t.stateNode){var i=e.memoizedProps,a=t.stateNode,u=oi(ti.current);a=Wr(a,o,i,n,r),Ui(e,t,a,o,i,n,r,u),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!n)return null===t.stateNode&&p("166"),null;if(e=oi(ti.current),ki(t))n=t.stateNode,o=t.type,i=t.memoizedProps,n[$]=t,n[q]=i,r=Yr(n,o,i,e,r),t.updateQueue=r,null!==r&&Li(t);else{(e=qr(o,n,r,e))[$]=t,e[q]=n;e:for(i=t.child;null!==i;){if(5===i.tag||6===i.tag)e.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}Vr(e,o,n,r),Zr(o,n)&&Li(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Bi(e,t,e.memoizedProps,n);else{if("string"!=typeof n)return null===t.stateNode&&p("166"),null;r=oi(ri.current),oi(ti.current),ki(t)?(r=t.stateNode,n=t.memoizedProps,r[$]=t,Kr(r,n)&&Li(t)):((r=Hr(n,r))[$]=t,t.stateNode=r)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return ai(),Di(t),null;case 13:return Zo(t),null;case 12:return null;case 0:p("167");default:p("156")}}function zi(e,t){var n=t.source;null===t.stack&&null!==n&&_t(n),null!==n&&wt(n),t=t.value,null!==e&&2===e.tag&&wt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function $i(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){va(e,t)}else t.current=null}function qi(e){switch(Mo(e),e.tag){case 2:$i(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){va(e,t)}break;case 5:$i(e);break;case 4:Wi(e)}}function Hi(e){return 5===e.tag||3===e.tag||4===e.tag}function Vi(e){e:{for(var t=e.return;null!==t;){if(Hi(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(Fr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Hi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,a=o.stateNode,u=n;8===i.nodeType?i.parentNode.insertBefore(a,u):i.insertBefore(a,u)}else t.insertBefore(o.stateNode,n);else r?(i=t,a=o.stateNode,8===i.nodeType?i.parentNode.insertBefore(a,i):i.appendChild(a)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Wi(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,a=i;;)if(qi(a),null!==a.child&&4!==a.tag)a.child.return=a,a=a.child;else{if(a===i)break;for(;null===a.sibling;){if(null===a.return||a.return===i)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}o?(i=r,a=t.stateNode,8===i.nodeType?i.parentNode.removeChild(a):i.removeChild(a)):r.removeChild(t.stateNode)}else if(4===t.tag?r=t.stateNode.containerInfo:qi(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function Gi(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&(n[q]=r,Gr(n,i,o,e,r))}break;case 6:null===t.stateNode&&p("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:p("163")}}function Yi(e,t,n){(n=Bo(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){eu(r),zi(e,t)},n}function Ki(e,t,n){(n=Bo(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===da?da=new Set([this]):da.add(this);var n=t.value,r=t.stack;zi(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function Xi(e,t,n,r,o,i){n.effectTag|=512,n.firstEffect=n.lastEffect=null,r=Yo(r,n),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void $o(e,r=Yi(e,r,i),i);case 2:if(t=r,n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&(null===da||!da.has(n)))return e.effectTag|=1024,void $o(e,r=Ki(e,t,i),i)}e=e.return}while(null!==e)}function Qi(e){switch(e.tag){case 2:go(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return ai(),bo(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return ui(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return ai(),null;case 13:return Zo(e),null;default:return null}}Di=function(){},Ui=function(e,t,n){(t.updateQueue=n)&&Li(t)},Bi=function(e,t,n,r){n!==r&&Li(t)};var Ji=to(),Zi=2,ea=Ji,ta=0,na=0,ra=!1,oa=null,ia=null,aa=0,ua=-1,la=!1,sa=null,ca=!1,fa=!1,da=null;function pa(){if(null!==oa)for(var e=oa.return;null!==e;){var t=e;switch(t.tag){case 2:go(t);break;case 3:ai(),bo();break;case 5:ui(t);break;case 4:ai();break;case 13:Zo(t)}e=e.return}ia=null,aa=0,ua=-1,la=!1,oa=null,fa=!1}function ha(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=Ii(t,e);var o=e;if(1073741823===aa||1073741823!==o.expirationTime){var i=0;switch(o.tag){case 3:case 2:var a=o.updateQueue;null!==a&&(i=a.expirationTime)}for(a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){fa=!0;break}e=n}else{if(null!==(e=Qi(e)))return e.effectTag&=511,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function ma(e){var t=Mi(e.alternate,e,aa);return null===t&&(t=ha(e)),at.current=null,t}function ya(e,t,n){ra&&p("243"),ra=!0,t===aa&&e===ia&&null!==oa||(pa(),aa=t,ua=-1,oa=Eo((ia=e).current,null,aa),e.pendingCommitExpirationTime=0);var r=!1;for(la=!n||aa<=Zi;;){try{if(n)for(;null!==oa&&!Za();)oa=ma(oa);else for(;null!==oa;)oa=ma(oa)}catch(t){if(null===oa)r=!0,eu(t);else{null===oa&&p("271");var o=(n=oa).return;if(null===o){r=!0,eu(t);break}Xi(e,o,n,t,0,aa),oa=ha(n)}}break}if(ra=!1,r)return null;if(null===oa){if(fa)return e.pendingCommitExpirationTime=t,e.current.alternate;la&&p("262"),0<=ua&&setTimeout(function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&Ha(e,t)},ua),function(e){null===Ta&&p("246"),Ta.remainingExpirationTime=e}(e.current.expirationTime)}return null}function va(e,t){var n;e:{for(ra&&!ca&&p("263"),n=e.return;null!==n;){switch(n.tag){case 2:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===da||!da.has(r))){zo(n,e=Ki(n,e=Yo(t,e),1),1),wa(n,1),n=void 0;break e}break;case 3:zo(n,e=Yi(n,e=Yo(t,e),1),1),wa(n,1),n=void 0;break e}n=n.return}3===e.tag&&(zo(e,n=Yi(e,n=Yo(t,e),1),1),wa(e,1)),n=void 0}return n}function ga(){var e=2+25*(1+((_a()-2+500)/25|0));return e<=ta&&(e=ta+1),ta=e}function ba(e,t){return e=0!==na?na:ra?ca?1:aa:1&t.mode?Ua?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Ua&&(0===Aa||e>Aa)&&(Aa=e),e}function wa(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!ra&&0!==aa&&t<aa&&pa();var r=n.current.expirationTime;ra&&!ca&&ia===n||Ha(n,r),za>Ia&&p("185")}e=e.return}}function _a(){return ea=to()-Ji,Zi=2+(ea/10|0)}function xa(e){var t=na;na=2+25*(1+((_a()-2+500)/25|0));try{return e()}finally{na=t}}function Sa(e,t,n,r,o){var i=na;na=1;try{return e(t,n,r,o)}finally{na=i}}var Ca=null,Ea=null,ka=0,Oa=void 0,Pa=!1,Ta=null,ja=0,Aa=0,Ra=!1,Na=!1,Fa=null,Ma=null,La=!1,Da=!1,Ua=!1,Ba=null,Ia=1e3,za=0,$a=1;function qa(e){if(0!==ka){if(e>ka)return;null!==Oa&&ro(Oa)}var t=to()-Ji;ka=e,Oa=no(Wa,{timeout:10*(e-2)-t})}function Ha(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===Ea?(Ca=Ea=e,e.nextScheduledRoot=e):(Ea=Ea.nextScheduledRoot=e).nextScheduledRoot=Ca;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}Pa||(La?Da&&(Ta=e,ja=1,Qa(e,1,!1)):1===t?Ga():qa(t))}function Va(){var e=0,t=null;if(null!==Ea)for(var n=Ea,r=Ca;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===Ea)&&p("244"),r===r.nextScheduledRoot){Ca=Ea=r.nextScheduledRoot=null;break}if(r===Ca)Ca=o=r.nextScheduledRoot,Ea.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===Ea){(Ea=n).nextScheduledRoot=Ca,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===Ea)break;n=r,r=r.nextScheduledRoot}}null!==(n=Ta)&&n===t&&1===e?za++:za=0,Ta=t,ja=e}function Wa(e){Ya(0,!0,e)}function Ga(){Ya(1,!1,null)}function Ya(e,t,n){if(Ma=n,Va(),t)for(;null!==Ta&&0!==ja&&(0===e||e>=ja)&&(!Ra||_a()>=ja);)_a(),Qa(Ta,ja,!Ra),Va();else for(;null!==Ta&&0!==ja&&(0===e||e>=ja);)Qa(Ta,ja,!1),Va();null!==Ma&&(ka=0,Oa=null),0!==ja&&qa(ja),Ma=null,Ra=!1,Xa()}function Ka(e,t){Pa&&p("253"),Ta=e,ja=t,Qa(e,t,!1),Ga(),Xa()}function Xa(){if(za=0,null!==Ba){var e=Ba;Ba=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Na||(Na=!0,Fa=e)}}}if(Na)throw e=Fa,Fa=null,Na=!1,e}function Qa(e,t,n){Pa&&p("245"),Pa=!0,n?null!==(n=e.finishedWork)?Ja(e,n,t):null!==(n=ya(e,t,!0))&&(Za()?e.finishedWork=n:Ja(e,n,t)):null!==(n=e.finishedWork)?Ja(e,n,t):null!==(n=ya(e,t,!1))&&Ja(e,n,t),Pa=!1}function Ja(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ba?Ba=[r]:Ba.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,ca=ra=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0,_a(),at.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var o=t.firstEffect}else o=t;else o=t.firstEffect;Qr=An;var i=s();if(Hn(i)){if("selectionStart"in i)var a={start:i.selectionStart,end:i.selectionEnd};else e:{var u=window.getSelection&&window.getSelection();if(u&&0!==u.rangeCount){a=u.anchorNode;var l=u.anchorOffset,c=u.focusNode;u=u.focusOffset;try{a.nodeType,c.nodeType}catch(e){a=null;break e}var d=0,h=-1,m=-1,y=0,v=0,g=i,b=null;t:for(;;){for(var w;g!==a||0!==l&&3!==g.nodeType||(h=d+l),g!==c||0!==u&&3!==g.nodeType||(m=d+u),3===g.nodeType&&(d+=g.nodeValue.length),null!==(w=g.firstChild);)b=g,g=w;for(;;){if(g===i)break t;if(b===a&&++y===l&&(h=d),b===c&&++v===u&&(m=d),null!==(w=g.nextSibling))break;b=(g=b).parentNode}g=w}a=-1===h||-1===m?null:{start:h,end:m}}else a=null}a=a||{start:0,end:0}}else a=null;for(Jr={focusedElem:i,selectionRange:a},Rn(!1),sa=o;null!==sa;){i=!1,a=void 0;try{for(;null!==sa;){if(256&sa.effectTag){var _=sa.alternate;switch((l=sa).tag){case 2:if(256&l.effectTag&&null!==_){var x=_.memoizedProps,S=_.memoizedState,C=l.stateNode;C.props=l.memoizedProps,C.state=l.memoizedState;var E=C.getSnapshotBeforeUpdate(x,S);C.__reactInternalSnapshotBeforeUpdate=E}break;case 3:case 5:case 6:case 4:break;default:p("163")}}sa=sa.nextEffect}}catch(e){i=!0,a=e}i&&(null===sa&&p("178"),va(sa,a),null!==sa&&(sa=sa.nextEffect))}for(sa=o;null!==sa;){_=!1,x=void 0;try{for(;null!==sa;){var k=sa.effectTag;if(16&k&&Fr(sa.stateNode,""),128&k){var O=sa.alternate;if(null!==O){var P=O.ref;null!==P&&("function"==typeof P?P(null):P.current=null)}}switch(14&k){case 2:Vi(sa),sa.effectTag&=-3;break;case 6:Vi(sa),sa.effectTag&=-3,Gi(sa.alternate,sa);break;case 4:Gi(sa.alternate,sa);break;case 8:Wi(S=sa),S.return=null,S.child=null,S.alternate&&(S.alternate.child=null,S.alternate.return=null)}sa=sa.nextEffect}}catch(e){_=!0,x=e}_&&(null===sa&&p("178"),va(sa,x),null!==sa&&(sa=sa.nextEffect))}if(P=Jr,O=s(),k=P.focusedElem,_=P.selectionRange,O!==k&&f(document.documentElement,k)){null!==_&&Hn(k)&&(O=_.start,void 0===(P=_.end)&&(P=O),"selectionStart"in k?(k.selectionStart=O,k.selectionEnd=Math.min(P,k.value.length)):window.getSelection&&(O=window.getSelection(),x=k[me()].length,P=Math.min(_.start,x),_=void 0===_.end?P:Math.min(_.end,x),!O.extend&&P>_&&(x=_,_=P,P=x),x=qn(k,P),S=qn(k,_),x&&S&&(1!==O.rangeCount||O.anchorNode!==x.node||O.anchorOffset!==x.offset||O.focusNode!==S.node||O.focusOffset!==S.offset)&&((C=document.createRange()).setStart(x.node,x.offset),O.removeAllRanges(),P>_?(O.addRange(C),O.extend(S.node,S.offset)):(C.setEnd(S.node,S.offset),O.addRange(C))))),O=[];for(P=k;P=P.parentNode;)1===P.nodeType&&O.push({element:P,left:P.scrollLeft,top:P.scrollTop});for("function"==typeof k.focus&&k.focus(),k=0;k<O.length;k++)(P=O[k]).element.scrollLeft=P.left,P.element.scrollTop=P.top}for(Jr=null,Rn(Qr),Qr=null,n.current=t,sa=o;null!==sa;){o=!1,k=void 0;try{for(O=r;null!==sa;){var T=sa.effectTag;if(36&T){var j=sa.alternate;switch(_=O,(P=sa).tag){case 2:var A=P.stateNode;if(4&P.effectTag)if(null===j)A.props=P.memoizedProps,A.state=P.memoizedState,A.componentDidMount();else{var R=j.memoizedProps,N=j.memoizedState;A.props=P.memoizedProps,A.state=P.memoizedState,A.componentDidUpdate(R,N,A.__reactInternalSnapshotBeforeUpdate)}var F=P.updateQueue;null!==F&&(A.props=P.memoizedProps,A.state=P.memoizedState,Go(P,F,A));break;case 3:var M=P.updateQueue;if(null!==M){if(x=null,null!==P.child)switch(P.child.tag){case 5:x=P.child.stateNode;break;case 2:x=P.child.stateNode}Go(P,M,x)}break;case 5:var L=P.stateNode;null===j&&4&P.effectTag&&Zr(P.type,P.memoizedProps)&&L.focus();break;case 6:case 4:case 15:case 16:break;default:p("163")}}if(128&T){P=void 0;var D=sa.ref;if(null!==D){var U=sa.stateNode;switch(sa.tag){case 5:P=U;break;default:P=U}"function"==typeof D?D(P):D.current=P}}var B=sa.nextEffect;sa.nextEffect=null,sa=B}}catch(e){o=!0,k=e}o&&(null===sa&&p("178"),va(sa,k),null!==sa&&(sa=sa.nextEffect))}ra=ca=!1,Fo(t.stateNode),0===(t=n.current.expirationTime)&&(da=null),e.remainingExpirationTime=t}function Za(){return!(null===Ma||Ma.timeRemaining()>$a)&&(Ra=!0)}function eu(e){null===Ta&&p("246"),Ta.remainingExpirationTime=0,Na||(Na=!0,Fa=e)}function tu(e,t){var n=La;La=!0;try{return e(t)}finally{(La=n)||Pa||Ga()}}function nu(e,t){if(La&&!Da){Da=!0;try{return e(t)}finally{Da=!1}}return e(t)}function ru(e,t){Pa&&p("187");var n=La;La=!0;try{return Sa(e,t)}finally{La=n,Ga()}}function ou(e,t,n){if(Ua)return e(t,n);La||Pa||0===Aa||(Ya(Aa,!1,null),Aa=0);var r=Ua,o=La;La=Ua=!0;try{return e(t,n)}finally{Ua=r,(La=o)||Pa||Ga()}}function iu(e){var t=La;La=!0;try{Sa(e)}finally{(La=t)||Pa||Ya(1,!1,null)}}function au(e,t,n,r,o){var i=t.current;if(n){var a;n=n._reactInternalFiber;e:{for(2===ln(n)&&2===n.tag||p("170"),a=n;3!==a.tag;){if(vo(a)){a=a.stateNode.__reactInternalMemoizedMergedChildContext;break e}(a=a.return)||p("171")}a=a.stateNode.context}n=vo(n)?_o(n,a):a}else n=d;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Bo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),zo(i,o,r),wa(i,r),r}function uu(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=fn(t))?null:e.stateNode}function lu(e,t,n,r){var o=t.current;return au(e,t,n,o=ba(_a(),o),r)}function su(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function cu(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ao=No(function(e){return t.onCommitFiberRoot(n,e)}),Ro=No(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(u({},e,{findHostInstanceByFiber:function(e){return null===(e=fn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var fu=tu,du=ou,pu=function(){Pa||0===Aa||(Ya(Aa,!1,null),Aa=0)};function hu(e){this._expirationTime=ga(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function mu(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function yu(e,t,n){this._internalRoot=jo(e,t,n)}function vu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function gu(e,t,n,r,o){vu(n)||p("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=su(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new yu(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=su(i._internalRoot);u.call(e)}}nu(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return su(i._internalRoot)}function bu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return vu(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:st,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ie.injectFiberControlledHostComponent(Xr),hu.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new mu;return au(e,t,null,n,r._onCommit),r},hu.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},hu.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Ka(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},hu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},mu.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},mu.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},yu.prototype.render=function(e,t){var n=this._internalRoot,r=new mu;return null!==(t=void 0===t?null:t)&&r.then(t),lu(e,n,null,r._onCommit),r},yu.prototype.unmount=function(e){var t=this._internalRoot,n=new mu;return null!==(e=void 0===e?null:e)&&n.then(e),lu(null,t,null,n._onCommit),n},yu.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new mu;return null!==(n=void 0===n?null:n)&&o.then(n),lu(t,r,e,o._onCommit),o},yu.prototype.createBatch=function(){var e=new hu(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ye=fu,Ke=du,Xe=pu;var wu={createPortal:bu,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:uu(e)},hydrate:function(e,t,n){return gu(null,e,t,!0,n)},render:function(e,t,n){return gu(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),gu(e,t,n,!1,r)},unmountComponentAtNode:function(e){return vu(e)||p("40"),!!e._reactRootContainer&&(nu(function(){gu(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return bu.apply(void 0,arguments)},unstable_batchedUpdates:tu,unstable_deferredUpdates:xa,unstable_interactiveUpdates:ou,flushSync:ru,unstable_flushControlled:iu,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:I,EventPluginRegistry:E,EventPropagators:re,ReactControlledComponent:Ge,ReactDOMComponentTree:G,ReactDOMEventListener:Dn},unstable_createRoot:function(e,t){return new yu(e,!0,null!=t&&!0===t.hydrate)}};cu({findFiberByHostInstance:H,bundleType:0,version:"16.4.1",rendererPackageName:"react-dom"});var _u={default:wu},xu=_u&&wu||_u;e.exports=xu.default?xu.default:xu},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(105)},function(e,t,n){"use strict";var r,o=(r="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,function(e,t,n,o){var i=e&&e.defaultProps,a=arguments.length-3;if(t||0===a||(t={}),t&&i)for(var u in i)void 0===t[u]&&(t[u]=i[u]);else t||(t=i||{});if(1===a)t.children=o;else if(a>1){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+3];t.children=l}return{$$typeof:r,type:e,key:void 0===n?null:""+n,ref:null,props:t,_owner:null}}),i=u(n(106)),a=u(n(97));u(n(39));function u(e){return e&&e.__esModule?e:{default:e}}i.default.render(o(a.default,{}),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,